#!/usr/bin/env bash

# Make vim the default editor.
export EDITOR='vim';

# Enable persistent REPL history for `node`.
export NODE_REPL_HISTORY=~/.node_history;
# Allow 32³ entries; the default is 1000.
export NODE_REPL_HISTORY_SIZE='32768';
# Use sloppy mode by default, matching web browsers.
export NODE_REPL_MODE='sloppy';

# Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
export PYTHONIOENCODING='UTF-8';

# Increase Bash history size. Allow 32³ entries; the default is 500.
export HISTSIZE='32768';
export HISTFILESIZE="${HISTSIZE}";
# Omit duplicates and commands that begin with a space from history.
export HISTCONTROL='ignoreboth';

# Prefer US English and use UTF-8.
export LANG='en_US.UTF-8';
export LC_ALL='en_US.UTF-8';

# Highlight section titles in manual pages.
export LESS_TERMCAP_md="${yellow}";

# Don’t clear the screen after quitting a manual page.
export MANPAGER='less -X';

# Avoid issues with `gpg` as installed via Homebrew.
# https://stackoverflow.com/a/42265848/96656
export GPG_TTY=$(tty);

# Hide the “default interactive shell is now zsh” warning on macOS.
export BASH_SILENCE_DEPRECATION_WARNING=1;

export DEEPSEEK_API_KEY="YourKey"
export OPENROUTER_API_KEY="YourKey"

# ########################### custom your exports here ###################################
if [[ "$(uname -s)" == "Darwin" ]]; then
    export HOMEBREW_NO_AUTO_UPDATE=1
    BREW_PREFIX=$(brew --prefix)
    JDK_PREFIX=$(brew --prefix openjdk)

    # 确保 `brew` 安装了相关工具后再修改 PATH
    for formula in coreutils make gnu-sed; do
        if brew list --formula | grep -q "^$formula$"; then
            PATH="$(brew --prefix $formula)/libexec/gnubin:$PATH"
        fi
    done

    # 解析 JAVA_HOME，避免 `realpath` 失败
    if [[ -d "$JDK_PREFIX" ]]; then
        export JAVA_HOME="$JDK_PREFIX"
        export PATH="$JAVA_HOME/bin:$PATH"
    fi

    # 设置 OpenSSL 相关路径
    export LDFLAGS="-L${BREW_PREFIX}/opt/openssl@3/lib"
    export CPPFLAGS="-I${BREW_PREFIX}/opt/openssl@3/include -I${JDK_PREFIX}/include"
    export PATH="${BREW_PREFIX}/opt/openssl@3/bin:$PATH"

    # 加载其他环境配置
    . "${BREW_PREFIX}/share/liquidprompt"
    . "${BREW_PREFIX}/etc/profile.d/z.sh"
    . "$(brew --prefix asdf)/libexec/asdf.sh"
fi

if [[ "$(uname -s)" == "Linux" && $- == *i* ]]; then
    # 只在交互式 shell 中执行
    source ~/.liquidprompt/liquidprompt
    . ~/z/z.sh
    . "$HOME/.asdf/asdf.sh"
fi


if command -v asdf &>/dev/null; then
    # Golang 配置
    if asdf list golang &>/dev/null; then
        export GOPATH="$HOME/githubs/go"
        ASDF_GOROOT=$(asdf where golang 2>/dev/null)/go
        if [[ -d "$ASDF_GOROOT" ]]; then
            export GOROOT="$ASDF_GOROOT"
            export PATH+=":$GOROOT/bin:$GOPATH/bin"
            export GOPROXY="https://goproxy.cn,direct"
            export GOBIN="$GOPATH/bin"  # 让 go install 默认安装到 GOPATH/bin
        fi
    fi

    # Erlang 配置
    if asdf list erlang &>/dev/null; then
        ASDF_ERLANG_BIN=$(asdf where erlang 2>/dev/null)/bin
        [[ -d "$ASDF_ERLANG_BIN" ]] && export PATH+=":$ASDF_ERLANG_BIN"
    fi

    # Python 配置
    if asdf list python &>/dev/null; then
        echo "Python detected in asdf"

        # 获取用户 Python 站点包的 bin 目录
        USER_BASE_BIN=$(python -m site --user-base 2>/dev/null)/bin
        echo "User Base Bin: $USER_BASE_BIN"

        # 获取 asdf 安装的 Python 路径
        ASDF_PYTHON_DIR=$(asdf where python 2>/dev/null)

        if [[ -n "$ASDF_PYTHON_DIR" && -d "$ASDF_PYTHON_DIR/bin" ]]; then
            ASDF_PYTHON_BIN="$ASDF_PYTHON_DIR/bin"
            echo "ASDF Python Bin: $ASDF_PYTHON_BIN"

            # 更新 PATH
            export PATH="$USER_BASE_BIN:$ASDF_PYTHON_BIN:$PATH"
        else
            echo "⚠️  Error: asdf where python failed or directory does not exist!" >&2
        fi
    fi

    # Rust 配置
    if asdf list rust &>/dev/null; then
        ASDF_RUST_BIN=$(asdf where rust 2>/dev/null)/bin
        [[ -d "$ASDF_RUST_BIN" ]] && export PATH+=":$ASDF_RUST_BIN"
    fi
fi
