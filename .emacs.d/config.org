:PROPERTIES: header-args:emacs-lisp :tangle
:ID:       E7980AE6-D0E5-4796-83D5-2A0F81400FC2
:END:
#+title: 我的 Emacs 配置
#+date: 2023-02-10 15:21:00 
#+auto_tangle: t

* Custom Vars and Const

#+BEGIN_SRC emacs-lisp :tangle yes

(setq erlang-path-prefix (file-truename "~/.asdf/installs/erlang/24.3.4"))
(setq erlang-lib-tools-version "3.5.2")
(setq http-proxy "127.0.0.1:8123")     ; HTTP/HTTPS proxy
(setq socks-proxy "127.0.0.1:1080")    ; SOCKS proxy
(setq epg-gpg-program "gpg2")

(defvar zxh-emacs-root-dir (file-truename "~/.emacs.d"))
(defvar zxh-emacs-vendor-dir (concat zxh-emacs-root-dir "/vendor"))

(when (eq system-type 'gnu/linux)
  (setq plantuml-path "/opt/plantuml/plantuml.jar")
  (defvar zxh-emacs-module-header-root "/usr/local/include")
  (defvar zxh-emacs-rime-user-data-dir (concat (getenv "HOME") "/.config/fcitx/rime/")))

(when (eq system-type 'darwin)
  (setq plantuml-path "/opt/homebrew/Cellar/plantuml/1.2023.2/libexec/plantuml.jar")
  (defvar zxh-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/")
  (defvar zxh-emacs-rime-user-data-dir (concat (getenv "HOME") "/Library/Rime")))

;; do not check signature
(setq package-check-signature nil) 
;; M-x package-install RET gnu-elpa-keyring-update RET. 
;; M-: (setq package-check-signature "allow-unsigned") 

#+END_SRC

* Bootstrap use-package

#+BEGIN_SRC emacs-lisp :tangle yes

(require 'package)
(package-initialize)

(setq package-archives '
      (("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
        ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")))


;; Install use-package if not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;;; Solve for package-check signature
;;; set it t if you thought it is not secure.
(setq package-check-signature nil)

(require 'use-package)
(setq use-package-always-ensure t)


(defun add-subdirs-to-load-path (search-dir)
  (interactive)
  (let* ((dir (file-name-as-directory search-dir)))
    (dolist (subdir
             ;; 过滤出不必要的目录，提升Emacs启动速度
             (cl-remove-if
              #'(lambda (subdir)
                  (or
                   ;; 不是目录的文件都移除
                   (not (file-directory-p (concat dir subdir)))
                   ;; 父目录、 语言相关和版本控制目录都移除
                   (member subdir '("." ".." 
                                    "dist" "node_modules" "__pycache__" 
                                    "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) 
              (directory-files dir)))
      (let ((subdir-path (concat dir (file-name-as-directory subdir))))
        ;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升Emacs启动速度
        (when (cl-some #'(lambda (subdir-file)
                           (and (file-regular-p (concat subdir-path subdir-file))
                                ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                       (directory-files subdir-path))
          
          ;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾
          ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动
          (add-to-list 'load-path subdir-path t))
        
        ;; 继续递归搜索子目录
        (add-subdirs-to-load-path subdir-path)))))

(add-subdirs-to-load-path zxh-emacs-vendor-dir)

#+END_SRC

* Accelerate

#+begin_src emacs-lisp :tangle yes

(tool-bar-mode -1)                      ;禁用工具栏
(menu-bar-mode -1)                      ;禁用菜单栏
(scroll-bar-mode -1)                    ;禁用滚动条

(setq
 ;; 不要缩放frame.
 frame-inhibit-implied-resize t
 ;; 默认用最简单的模式
 initial-major-mode 'fundamental-mode
 ;; 不要自动启用package
 package-enable-at-startup nil
 package--init-file-ensured t)

#+end_src
* Bootstrap-Init
#+begin_src emacs-lisp :tangle yes
(let (
      ;; 加载的时候临时增大`gc-cons-threshold'以加速启动速度。
      (gc-cons-threshold most-positive-fixnum)
      (gc-cons-percentage 0.6)
      ;; 清空避免加载远程文件的时候分析文件。
      (file-name-handler-alist nil))

  ;; 让窗口启动更平滑
  (setq frame-inhibit-implied-resize t)
  (setq-default inhibit-redisplay t
                inhibit-message t)
  (add-hook 'window-setup-hook
            (lambda ()
              (setq-default inhibit-redisplay nil
                            inhibit-message nil)
              (redisplay)))
)
#+end_src

* Elf-mode

#+begin_src emacs-lisp :tangle yes
(defvar-local elf-mode nil)

(defun elf-setup-default ()
  "Make `elf-mode' get called automatically for binaries."
  (add-to-list 'magic-mode-alist (cons "ELF" 'elf-mode)))

(defvar elf-mode-command "readelf --syms -W %s"
  "The shell command to use for `elf-mode'.")

;;;###autoload
(defun elf-mode ()
  (interactive)
  (let ((inhibit-read-only t))
    (if elf-mode
        (progn
          (erase-buffer)
          (insert-file-contents (buffer-file-name))
          (setq elf-mode nil))
      (setq elf-mode t)
      (erase-buffer)
      (insert (shell-command-to-string
               (format elf-mode-command (buffer-file-name)))))
    (set-buffer-modified-p nil)
    (read-only-mode 1)))

#+end_src
* Idle

#+BEGIN_SRC emacs-lisp :tangle yes
;; idel
;;(pretty-lambda-for-modes)
;;(browse-kill-ring-default-keybindings)    ;加载默认的按键邦定
;;(setq browse-kill-ring-quit-action        ;设置退出动作
;;      (quote save-and-restore))           ;保存还原窗口设置
(autoload 'hanconvert-region "hanconvert" ;简繁中文互相转换
  "Convert a region from simple chinese to tradition chinese or
from tradition chinese to simple chinese" t)
(autoload 'irfc "init-irfc")
(custom-set-variables '(tramp-verbose 0)) ;设置tramp的响应方式, 关闭后不弹出消息
(setq max-lisp-eval-depth 40000)          ;lisp最大执行深度
(setq max-specpdl-size 10000)             ;最大容量
(setq kill-ring-max 1024) ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
(setq mark-ring-max 1024) ;设置的mark ring容量
(setq eval-expression-print-length nil) ;设置执行表达式的长度没有限制
(setq eval-expression-print-level nil)  ;设置执行表达式的深度没有限制
(auto-compression-mode 1)               ;打开压缩文件时自动解压缩
(setq read-quoted-char-radix 16)        ;设置 引用字符 的基数
(setq global-mark-ring-max 1024)        ;设置最大的全局标记容量
(global-hl-line-mode 1)                 ;高亮当前行
(setq isearch-allow-scroll t)           ;isearch搜索时是可以滚动屏幕的
(setq enable-recursive-minibuffers t)   ;minibuffer 递归调用命令
(setq history-delete-duplicates t)      ;删除minibuffer的重复历史
(setq minibuffer-message-timeout 1)     ;显示消息超时的时间
(setq auto-revert-mode 1)               ;自动更新buffer
(show-paren-mode t)                     ;显示括号匹配
(setq show-paren-style 'parentheses) ;括号匹配显示但不是烦人的跳到另一个括号。
(setq blink-matching-paren nil)      ;当插入右括号时不显示匹配的左括号
(setq message-log-max t)         ;设置message记录全部消息, 而不用截去
(setq require-final-newline nil) ;不自动添加换行符到末尾, 有些情况会出现错误
(setq ediff-window-setup-function (quote ediff-setup-windows-plain)) ;比较窗口设置在同一个frame里
(setq x-stretch-cursor t)         ;光标在 TAB 字符上会显示为一个大方块
(put 'narrow-to-region 'disabled nil)   ;开启变窄区域
(setq print-escape-newlines t)          ;显示字符窗中的换行符为 \n
(setq tramp-default-method "ssh")       ;设置传送文件默认的方法
(setq void-text-area-pointer nil)       ;禁止显示鼠标指针
(setq byte-compile-warnings
      (quote (
              ;; 显示的警告
              free-vars                 ;不在当前范围的引用变量
              unresolved                ;不知道的函数
              callargs                  ;函数调用的参数和定义的不匹配
              obsolete                  ;荒废的变量和函数
              noruntime                 ;函数没有定义在运行时期
              interactive-only          ;正常不被调用的命令
              make-local ;调用 `make-variable-buffer-local' 可能会不正确的
              mapcar     ;`mapcar' 调用
              ;;
              ;; 抑制的警告
              (not redefine)        ;重新定义的函数 (比如参数数量改变)
              (not cl-functions)    ;`CL' 包中的运行时调用的函数
              )))
(elf-setup-default)                   ;二进制文件默认用elf模式打开
(setq echo-keystrokes 0.1)              ;加快快捷键提示的速度
(tooltip-mode -1)                       ;不要显示任何 tooltips

#+END_SRC

* Generic

#+begin_src emacs-lisp :tangle yes

;; Restore emacs session.
;; (setq initial-buffer-choice t)
;; (run-with-timer 1 nil #'(lambda () (bury-buffer)))

;; 增加长行处理性能
(setq bidi-inhibit-bpa t)
(setq-default bidi-paragraph-direction 'left-to-right)

;; 增加IO性能
(setq process-adaptive-read-buffering nil)
(setq read-process-output-max (* 1024 1024))

(fset 'yes-or-no-p 'y-or-n-p)           ;以 y/n代表 yes/no
(blink-cursor-mode -1)                  ;指针不闪动
(transient-mark-mode 1)                 ;标记高亮
(global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
(setq use-dialog-box nil)               ;never pop dialog
(setq inhibit-startup-screen t)         ;inhibit start screen
(setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
(setq-default comment-style 'indent)    ;设定自动缩进的注释风格
(setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
(setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
(setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
(setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
(setq split-width-threshold nil)        ;分屏的时候使用上下分屏
(setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
(setq confirm-kill-processes nil)       ;退出自动杀掉进程
(setq async-bytecomp-allowed-packages nil) ;避免magit报错
(setq word-wrap-by-category t)             ;按照中文折行
(add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮

(setq completion-auto-select nil)       ;避免默认自动选择

(setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
(setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙

;; 平滑地进行半屏滚动，避免滚动后recenter操作
(setq scroll-step 1
      scroll-conservatively 10000)

;; 不显示 *scratch*
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

;; Don't ask me when close emacs with process is running
;;(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
;;  "Prevent annoying \"Active processes exist\" query when you quit Emacs."
;;  (require 'noflet)
;;  (noflet ((process-list ())) ad-do-it))

;; Don't ask me when kill process buffer
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))

#+end_src
* Indent
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(defun adjust-languages-indent (n)
  (setq-local c-basic-offset n)

  (setq-local coffee-tab-width n)
  (setq-local javascript-indent-level n)
  (setq-local js-indent-level n)
  (setq-local js2-basic-offset n)

  (setq-local web-mode-attr-indent-offset n)
  (setq-local web-mode-attr-value-indent-offset n)
  (setq-local web-mode-code-indent-offset n)
  (setq-local web-mode-css-indent-offset n)
  (setq-local web-mode-markup-indent-offset n)
  (setq-local web-mode-sql-indent-offset n)

  (setq-local css-indent-offset n)

  (setq-local typescript-indent-level n))

(dolist (hook (list
               'c-mode-hook
               'c++-mode-hook
               'java-mode-hook
               'haskell-mode-hook
               'asm-mode-hook
               'sh-mode-hook
               'haskell-cabal-mode-hook
               'ruby-mode-hook
               'qml-mode-hook
               'scss-mode-hook
               'coffee-mode-hook
               'rust-mode-hook
               ))
  (add-hook hook #'(lambda ()
                     (setq indent-tabs-mode nil)
                     (adjust-languages-indent 4)
                     )))

(dolist (hook (list
               'web-mode-hook
               'js-mode-hook
               'typescript-mode-hook
               ))
  (add-hook hook #'(lambda ()
                     (setq indent-tabs-mode nil)
                     (adjust-languages-indent 2)
                     )))
#+end_src
* Encode
#+begin_src emacs-lisp :tangle yes
;; Code
(prefer-coding-system 'utf-8)
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LC_CTYPE" "en_US.UTF-8")

;; Set UTF-8 as the default coding system
(set-charset-priority 'unicode)
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
#+end_src
* Performance

#+begin_src emacs-lisp :tangle yes
;; Disable garbage collection when entering commands.
(defun max-gc-limit ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun reset-gc-limit ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'max-gc-limit)
(add-hook 'minibuffer-exit-hook #'reset-gc-limit)

;; Improve the performance of rendering long lines.
(setq-default bidi-display-reordering nil)

#+end_src

* Functions&Const

#+BEGIN_SRC emacs-lisp :tangle yes

(defconst sys/win32p (eq system-type 'windows-nt) "Are we running on a WinTel system?")
(defconst sys/linuxp (eq system-type 'gnu/linux) "Are we running on a GNU/Linux?")
(defconst sys/linux-x-p (and (display-graphic-p) sys/linuxp) "X on GNU/Linux?")
(defconst sys/macp (eq system-type 'darwin) "running on a Mac system?")
(defconst sys/mac-x-p (and (display-graphic-p) sys/macp) "X on a Mac system?")
(defconst sys/mac-cocoa-p (featurep 'cocoa) "with Cocoa on a Mac system?")
(defconst sys/mac-port-p (eq window-system 'mac) "macport build on a Mac system?")
(defconst sys/cygwinp (eq system-type 'cygwin) "Are we running on a Cygwin system?")
(defconst sys/rootp (string-equal "root" (getenv "USER")) "Are you using ROOT user?")
(defconst emacs/>=27p
  (>= emacs-major-version 27)
  "Emacs is 27 or above.")

(defconst emacs/>=28p
  (>= emacs-major-version 28)
  "Emacs is 28 or above.")

(defconst emacs/>=29p
  (>= emacs-major-version 29)
  "Emacs is 29 or above.")

(defvar socks-noproxy)
(defvar socks-server)
(defcustom http-proxy "127.0.0.1:8123" "Set network proxy." :group 'centaur :type 'string)

;; from lazycat emacs config
(defun org-export-docx ()
  (interactive)
  (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
        (template-file (concat (file-name-as-directory zxh-emacs-root-dir)
                               "template.docx")))
    (message (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file)) 
    (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                           (buffer-file-name)
                           docx-file
                           template-file
                           ))
    (message "Convert finish: %s" docx-file)))


;; --------------------------------------------
;; 辅助函数
;; --------------------------------------------
(defun x/system-is-mac () (interactive) (string-equal system-type "darwin"))

(defun x/system-is-linux () (interactive) (string-equal system-type "gnu/linux"))

(defun format-function-parameters ()
  "Turn the list of function parameters into multiline."
  (interactive)
  (beginning-of-line)
  (search-forward "(" (line-end-position))
  (newline-and-indent)
  (while (search-forward "," (line-end-position) t)
    (newline-and-indent))
  (end-of-line)
  (c-hungry-delete-forward)
  (insert " ")
  (search-backward ")")
  (newline-and-indent))

(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (org-display-inline-images)
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-nondirectory (buffer-file-name))
                  "assets/"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (unless (file-exists-p (file-name-directory filename))
    (make-directory (file-name-directory filename)))
  ; take screenshot
  (if (eq system-type 'darwin)
      (call-process "screencapture" nil nil nil "-i" filename))
  (if (eq system-type 'gnu/linux)
      (call-process "import" nil nil nil filename))
  ; insert into file if correctly taken
  (if (file-exists-p filename)
    (insert (concat "[[file:" filename "]]"))))

;; --------------------------------------------
;; proxy 操作辅助函数
;; --------------------------------------------
(defun proxy-http-show ()
  "Show HTTP/HTTPS proxy."
  (interactive)
  (if url-proxy-services
      (message "Current HTTP proxy is `%s'" http-proxy)
    (message "No HTTP proxy")))

(defun proxy-http-enable ()
  "Enable HTTP/HTTPS proxy."
  (interactive)
  (setq url-proxy-services
        `(("http" . ,http-proxy)
          ("https" . ,http-proxy)
          ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
  (proxy-http-show))

(defun proxy-http-disable ()
  "Disable HTTP/HTTPS proxy."
  (interactive)
  (setq url-proxy-services nil)
  (proxy-http-show))

(defun proxy-http-toggle ()
  "Toggle HTTP/HTTPS proxy."
  (interactive)
  (if (bound-and-true-p url-proxy-services)
      (proxy-http-disable)
    (proxy-http-enable)))

(defun proxy-socks-show ()
  "Show SOCKS proxy."
  (interactive)
  (when (fboundp 'cadddr)                ; defined 25.2+
    (if (bound-and-true-p socks-noproxy)
        (message "Current SOCKS%d proxy is %s:%s"
                 (cadddr socks-server) (cadr socks-server) (caddr socks-server))
      (message "No SOCKS proxy"))))

(defun proxy-socks-enable ()
  "Enable SOCKS proxy."
  (interactive)
  (require 'socks)
  (setq url-gateway-method 'socks
        socks-noproxy '("localhost"))
  (let* ((proxy (split-string socks-proxy ":"))
         (host (car proxy))
         (port (cadr  proxy)))
    (setq socks-server `("Default server" ,host ,port 5)))
  (setenv "all_proxy" (concat "socks5://" socks-proxy))
  (proxy-socks-show))

(defun proxy-socks-disable ()
  "Disable SOCKS proxy."
  (interactive)
  (setq url-gateway-method 'native
        socks-noproxy nil
        socks-server nil)
  (setenv "all_proxy" "")
  (proxy-socks-show))

(defun proxy-socks-toggle ()
  "Toggle SOCKS proxy."
  (interactive)
  (if (bound-and-true-p socks-noproxy)
      (proxy-socks-disable)
    (proxy-socks-enable)))


;; --------------------------------------------
;; FIle 操作与编码辅助函数
;; --------------------------------------------
(defun x/save-all ()
  "Save all file-visiting buffers without prompting."
  (interactive)
  (save-some-buffers t))

(defun x/open-init-file ()
  (interactive)
  (find-file user-init-file))

(defun x/reload-init-file ()
  "Reload init.el file."
  (interactive)
  (load user-init-file)
  (message "Reloaded init.el OK."))

(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
             buffer-file-name))))
(defun dos2unix ()
  "Convert the current buffer to UNIX file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix nil))

(defun unix2dos ()
  "Convert the current buffer to DOS file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos nil))

(defun delete-trailing-M()
  "Delete `^M' characters in the buffer.
              Same as `replace-string C-q C-m RET RET'."
  (interactive)
  (save-excursion
    (goto-char 0)
    (while (search-forward "\r" nil :noerror)
      (replace-match ""))))

(defun save-buffer-as-utf8 (coding-system)
  "Revert a buffer with `CODING-SYSTEM' and save as UTF-8."
  (interactive "zCoding system for visited file (default nil):")
  (revert-buffer-with-coding-system coding-system)
  (set-buffer-file-coding-system 'utf-8)
  (save-buffer))

(defun save-buffer-gbk-as-utf8 ()
  "Revert a buffer with GBK and save as UTF-8."
  (interactive)

  (save-buffer-as-utf8 'gbk))


;; --------------------------------------------
;; buffer 操作辅助函数
;; --------------------------------------------
(defun switch-to-messages ()
  "Select buffer *message* in the current window."
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun switch-to-dashboard ()
  "Select buffer *message* in the current window."
  (interactive)
  (switch-to-buffer "*Dashboard*"))

(defun hold-line-scroll-up ()
  "Scroll the page with the cursor in the same line"
  (interactive)
  ;; move the cursor also
  (let ((tmp (current-column)))
    (scroll-up 1)
    (line-move-to-column tmp)
    (forward-line 1)))

(defun hold-line-scroll-down ()
  "Scroll the page with the cursor in the same line"
  (interactive)
  ;; move the cursor also
  (let ((tmp (current-column)))
    (scroll-down 1)
    (line-move-to-column tmp)
    (forward-line -1)))


;; -------------------------------------------
;; Company 辅助函数
;; -------------------------------------------
(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))


;; --------------------------------------------
;; 文件操作辅助函数
;; --------------------------------------------
(defun +rename-current-file (newname)
  "Rename current visiting file to NEWNAME.
        If NEWNAME is a directory, move file to it."
  (interactive
   (progn
     (unless buffer-file-name
       (user-error "No file is visiting"))
     (let ((name (read-file-name "Rename to: " nil buffer-file-name 'confirm)))
       (when (equal (file-truename name)
                    (file-truename buffer-file-name))
         (user-error "Can't rename file to itself"))
       (list name))))
  ;; NEWNAME is a directory
  (when (equal newname (file-name-as-directory newname))
    (setq newname (concat newname (file-name-nondirectory buffer-file-name))))
  (rename-file buffer-file-name newname)
  (set-visited-file-name newname)
  (rename-buffer newname))

(defun +delete-current-file (file)
  "Delete current visiting FILE."
  (interactive
   (list (or buffer-file-name
             (user-error "No file is visiting"))))
  (when (y-or-n-p (format "Really delete '%s'? " file))
    (kill-this-buffer)
    (delete-file file)))

(defun +copy-current-file (new-path &optional overwrite-p)
  "Copy current buffer's file to `NEW-PATH'.
          If `OVERWRITE-P', overwrite the destination file without
          confirmation."
  (interactive
   (progn
     (unless buffer-file-name
       (user-error "No file is visiting"))
     (list (read-file-name "Copy file to: ")
           current-prefix-arg)))
  (let ((old-path (buffer-file-name))
        (new-path (expand-file-name new-path)))
    (make-directory (file-name-directory new-path) t)
    (copy-file old-path new-path (or overwrite-p 1))))

(defun +copy-current-filename (file)
  "Copy the full path to the current FILE."
  (interactive
   (list (or buffer-file-name
             (user-error "No file is visiting"))))
  (kill-new file)
  (message "Copying '%s' to clipboard" file))

(defun +copy-current-buffer-name ()
  "Copy the name of current buffer."
  (interactive)
  (kill-new (buffer-name))
  (message "Copying '%s' to clipboard" (buffer-name)))


;; --------------------------------------------
;; Window 操作辅助函数
;; --------------------------------------------
(defvar toggle-one-window-window-configuration nil
  "The window configuration use for `toggle-one-window'.")

(defun toggle-one-window ()
  "Toggle between window layout and one window."
  (interactive)
  (if (equal (length (cl-remove-if #'window-dedicated-p (window-list))) 1)
      (if toggle-one-window-window-configuration
          (progn
            (set-window-configuration toggle-one-window-window-configuration)
            (setq toggle-one-window-window-configuration nil))
        (message "No other windows exist."))
    (setq toggle-one-window-window-configuration (current-window-configuration))
    (delete-other-windows)))

(defun set-control-w-shortcuts ()
  (define-prefix-command 'my-window-map)
  (global-set-key (kbd "C-w") 'my-window-map)
  (define-key my-window-map (kbd "h") 'windmove-left)
  (define-key my-window-map (kbd "j") 'windmove-down)
  (define-key my-window-map (kbd "k") 'windmove-up)
  (define-key my-window-map (kbd "l") 'windmove-right)
  (define-key my-window-map (kbd "v") 'split-window-right)
  (define-key my-window-map (kbd "b") 'split-window-below)
  (define-key my-window-map (kbd "d") 'delete-window)
  (define-key my-window-map (kbd "D") 'delete-other-windows)
  (define-key my-window-map (kbd "B") 'kill-buffer-and-window)
  (define-key my-window-map (kbd "o") 'toggle-one-window))

#+END_SRC

* Fundamental Plugins

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package use-package-ensure-system-package)
  (use-package protobuf-mode)
  (use-package markdown-mode)
  (use-package dockerfile-mode)
  (use-package nginx-mode)
  (use-package json-mode)
  (use-package json-reformat)
  (use-package comment-dwim-2)
  (use-package buffer-flip)
  (use-package dash-at-point)
  (use-package async :init (async-bytecomp-package-mode 1))
  (use-package projectile :config (projectile-global-mode))
  (use-package flycheck :config (global-flycheck-mode 1))
  (use-package restclient :config (setq restclient-inhibit-cookies t))
  (use-package autorevert :ensure nil :hook (after-init . global-auto-revert-mode))
  (use-package so-long :ensure nil :hook (after-init . global-so-long-mode)) ;; emacs27+ new feature
  (use-package highlight-parentheses :init (setq hl-paren-colors '("DarkOrange" "DeepSkyBlue" "DarkRed")))
  (use-package rainbow-delimiters :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  (use-package exec-path-from-shell :if (or sys/mac-x-p sys/linux-x-p) :config (exec-path-from-shell-initialize))
  (use-package which-key
    :hook (after-init . which-key-mode)
    :config
    (progn
      (which-key-mode)
      (which-key-setup-side-window-right)))

  (use-package all-the-icons
    :ensure t
    :when (display-graphic-p)
    :commands all-the-icons-install-fonts
    )

  ;; 其他原生接口的前端 
  (use-package ivy
    :init (setq ivy-use-virtual-buffers t
                ivy-count-format "%d/%d ")
    :config (ivy-mode t))

  ;; 取代原生的一些常用指令
  (use-package counsel :after ivy :config (counsel-mode))

  ;; 取代原生的 I-search
  (use-package swiper :after ivy)
  (use-package counsel-projectile
    :after (counsel projectile)
    :preface
    (eval-when-compile
      (declare-function counsel-projectile-mode nil))
    :commands
    (counsel-projectile-rg
     counsel-projectile-find-file
     counsel-projectile-switch-project
     counsel-projectile-switch-to-buffer)
    :config
    (counsel-projectile-mode t))

  (use-package youdao-dictionary
    :commands youdao-dictionary-play-voice-of-current-word
    :init
    (setq url-automatic-caching t
          youdao-dictionary-use-chinese-word-segmentation t) ; 中文分词
    (defun my-youdao-search-at-point ()
      "Search word at point and display result with `posframe', `pos-tip', or buffer."
      (interactive)
      (if (display-graphic-p)
          (youdao-dictionary-search-at-point-posframe)
        (youdao-dictionary-search-at-point))))

#+END_SRC

* Indent Tab

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (defun adjust-languages-indent (n)
    (setq-local c-basic-offset n)

    (setq-local coffee-tab-width n)
    (setq-local javascript-indent-level n)
    (setq-local js-indent-level n)
    (setq-local js2-basic-offset n)

    (setq-local web-mode-attr-indent-offset n)
    (setq-local web-mode-attr-value-indent-offset n)
    (setq-local web-mode-code-indent-offset n)
    (setq-local web-mode-css-indent-offset n)
    (setq-local web-mode-markup-indent-offset n)
    (setq-local web-mode-sql-indent-offset n)

    (setq-local css-indent-offset n)

    (setq-local typescript-indent-level n))

  (dolist (hook (list
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'asm-mode-hook
                 'sh-mode-hook
                 'haskell-cabal-mode-hook
                 'ruby-mode-hook
                 'qml-mode-hook
                 'scss-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 4)
                       )))

  (dolist (hook (list
                 'web-mode-hook
                 'js-mode-hook
                 'typescript-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 2)
                       )))

#+END_SRC

* Quick Search And Move

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package avy)
  (use-package vundo
   :defer t
   :load-path "~/.emacs.d/vendor/vundo"
   :commands (vundo)
   :config
   ;; Take less on-screen space.
   (setq vundo-compact-display t)
   (custom-set-faces
    '(vundo-node ((t (:foreground "#808080"))))
    '(vundo-stem ((t (:foreground "#808080"))))
    '(vundo-highlight ((t (:foreground "#FFFF00")))))
   ;; Use `HJKL` VIM-like motion
   (define-key vundo-mode-map (kbd "l") #'vundo-forward)
   (define-key vundo-mode-map (kbd "h") #'vundo-backward)
   (define-key vundo-mode-map (kbd "j") #'vundo-next)
   (define-key vundo-mode-map (kbd "k") #'vundo-previous)
   (define-key vundo-mode-map (kbd "a") #'vundo-stem-root)
   (define-key vundo-mode-map (kbd "e") #'vundo-stem-end)
   (define-key vundo-mode-map (kbd "q") #'vundo-quit)
   (define-key vundo-mode-map (kbd "C-g") #'vundo-quit)
   (define-key vundo-mode-map (kbd "RET") #'vundo-confirm))

  (use-package ag
    :config
    (progn
      (setq ag-highlight-search t)
      (bind-key "n" 'compilation-next-error ag-mode-map)
      (bind-key "p" 'compilation-previous-error ag-mode-map)
      (bind-key "N" 'compilation-next-file ag-mode-map)
      (bind-key "P" 'compilation-previous-file ag-mode-map)))

  (use-package dumb-jump
    :config
    (setq dumb-jump-aggressive nil)
    (setq dumb-jump-selector 'ivy)
    (setq dumb-jump-prefer-searcher 'ag))

  ;; Hiding structured data
  (use-package hideshow
    :hook (prog-mode . hs-minor-mode)
    :config
    (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

    (defface hideshow-border-face
      '((((background light))
         :background "rosy brown" :extend t)
        (t
         :background "sandy brown" :extend t))
      "Face used for hideshow fringe."
      :group 'hideshow)

    (define-fringe-bitmap 'hideshow-folded-fringe
      (vector #b00000000
              #b00000000
              #b00000000
              #b11000011
              #b11100111
              #b01111110
              #b00111100
              #b00011000))

    (defun hideshow-folded-overlay-fn (ov)
      "Display a folded region indicator with the number of folded lines."
      (when (eq 'code (overlay-get ov 'hs))
        (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
               (info (format " (%d)..." nlines)))
          ;; fringe indicator
          (overlay-put ov 'before-string (propertize " "
                                                     'display '(left-fringe hideshow-folded-fringe
                                                                            hideshow-border-face)))
          ;; folding indicator
          (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))
    :custom
    (hs-set-up-overlay #'hideshow-folded-overlay-fn))

#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package vc
  :ensure nil
  :custom
  ;; 打开链接文件时，不进行追问
  (vc-follow-symlinks t)
  (vc-allow-async-revert t)
  (vc-handled-backends '(Git)))

(use-package diff-hl
  :ensure t
  :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
         (magit-pre-refresh  . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :init
  (global-diff-hl-mode t)
  :config
  ;; When Emacs runs in terminal, show the indicators in margin instead.
  (unless (display-graphic-p)
    (diff-hl-margin-mode)))

(setq vc-follow-symlinks t)

;;(use-package magit
;;  :ensure t
;;  :custom
;;  ;; 在当前 window 中显示 magit buffer。
;;  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
;;  (magit-log-arguments '("-n256" "--graph" "--decorate" "--color"))
;;  ;; 按照 word 展示 diff。
;;  (magit-diff-refine-hunk t)
;;  ;(magit-clone-default-directory "~/go/src/")
;;  :config
;;  ;; diff org-mode 时展开内容。
;;  (add-hook 'magit-diff-visit-file-hook (lambda() (when (derived-mode-p 'org-mode)(org-fold-show-entry)))))
;;
;;;; git-link 根据仓库地址、commit 等信息为光标位置生成 URL:
;;;; (use-package git-link :config (setq git-link-use-commit t))
;;;; 自动 revert buffer，确保 modeline 上的分支名正确，但是 CPU Profile 显示 比较影响性能，故暂不开启。
;;;; (setq auto-revert-check-vc-info t) 

#+END_SRC

* Evil-Mode

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun x/config-evil-leader ()
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      ","  'avy-goto-char-2
      ":"  'eval-expression

      "A"  'align-regexp

      ;; buffer & bookmark
      "bb" 'switch-to-buffer
      "bo" 'switch-to-buffer-other-window
      "bn" '+copy-current-buffer-name
      "bv" 'revert-buffer
      "bz" 'bury-buffer         ;隐藏当前buffer
      "bZ" 'unbury-buffer         ;反隐藏当前buffer

      "bK" 'kill-other-window-buffer ;;;关闭其他窗口的buffer

      ;; --------------
      "bm" 'bookmark-set
      "bM" 'bookmark-set-no-overwrite
      "bi" 'bookmark-insert
      "br" 'bookmark-rename
      "bd" 'bookmark-delete
      "bw" 'bookmark-write
      "bj" 'bookmark-jump
      "bJ" 'bookmark-jump-other-window
      "bl" 'bookmark-bmenu-list
      "bs" 'bookmark-save

      ;; code
      "cc" 'comment-dwim
      "cd" 'delete-trailing-whitespace
      "cl" 'toggle-truncate-lines
      "cm" 'delete-trailing-M

      ;; dired
      ;; "dj" 'dired-jump
      ;; "dJ" 'dired-jump-other-window
      "d" '(lambda () (interactive) (eaf-open-in-file-manager (file-name-directory (buffer-file-name))))

      ;; external Apps
      "eY" 'youdao-dictionary-search-from-input
      "ep" 'plantuml–parse-headlines
      "ej" 'plantuml-display-json-open
      "ey" 'plantuml-display-yaml-open
      "em" 'plantuml-org-to-mindmap-open
      "ew" 'plantuml-org-to-wbs-open
      "ea" 'plantuml-auto-convert-open
      "es" 'my-org-screenshot 
      "eo" 'org-export-docx

      ;; file
      "fh" '(lambda () (interactive) (eaf-open-in-file-manager "~/"))
      "fe" '(lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory)))
      "fi" '(lambda () (interactive) (load-file (expand-file-name "init.el" user-emacs-directory)))
      "ff" 'find-file
      "fF" 'find-file-other-frame
      "fo" 'find-file-other-window
      "fd" '+delete-current-file
      "fn" '+copy-current-filename
      "fr" '+rename-current-file
      "fR" 'recentf-open-files
      "fs" 'sudo
      "fa" 'x/save-all
      "f-" 'text-scale-decrease        ;减小字体大小
      "f=" 'text-scale-increase        ;增加字体大小

      ;; magit
      ;; "gs" 'magit-status
      ;; "gb" 'magit-branch-checkout
      ;; "gp" 'magit-pull
      ;; "gB" 'global-blamer-mode
      ;; "gt" 'magit-blame-toggle
      "gm" 'one-key-menu-git
      "gs" 'eaf-open-git

      ;; project && proxy
      "pf" 'counsel-projectile-find-file
      "pp" 'counsel-projectile-switch-project
      "pb" 'counsel-projectile-switch-to-buffer
      "pk" 'projectile-kill-buffers
      "ps" 'proxy-socks-toggle
      "ph" 'proxy-http-toggle

      ;; search
      "sI" 'imenu
      "s/" 'counsel-rg
      "sj" 'evil-show-jumps
      "sm" 'evil-show-marks
      "sr" 'evil-show-registers
      "si" 'color-rg-search-input
      "ss" 'color-rg-search-symbol-in-project
      "sp" 'color-rg-search-project
      "sl" 'counsel-projectile-rg

      ;; window && frame
      "ww" 'other-window
      "wf" 'other-frame

      ;; fold
      "zA" 'evil-close-folds
      "za" 'evil-open-folds
      "zo" 'evil-open-fold
      "zO" 'evil-open-fold-rec
      "zc" 'evil-close-fold
      "zC" 'evil-close-fold-rec
      "zt" 'evil-toggle-fold

      )
    )

  ;;; UNDO
  ;; Vim style undo not needed for emacs 28
  (use-package undo-fu)

  ;;; Vim Bindings
  (use-package evil
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-u-scroll t)
    (setq evil-esc-delay 0)
    :config
    (evil-mode 1))

  (use-package evil-leader
    :init
    (progn
      (global-evil-leader-mode)
      (setq evil-leader/in-all-states 1)
      (x/config-evil-leader)))

  (use-package evil-collection
    :disabled
    :after evil
    :config
    (evil-collection-init))

  ;; {{ specify major mode uses Evil (vim) NORMAL state or EMACS original state.
  ;; You may delete this setup to use Evil NORMAL state always.
  (dolist (p '((minibuffer-inactive-mode . emacs)
               (eaf-mode . emacs)
               (calendar-mode . emacs)
               (special-mode . emacs)
               (grep-mode . emacs)
               (Info-mode . emacs)
               (term-mode . emacs)
               (sdcv-mode . emacs)
               (anaconda-nav-mode . emacs)
               (log-edit-mode . emacs)
               (vc-log-edit-mode . emacs)
               (magit-log-edit-mode . emacs)
               (magit-status-mode . emacs)
               (erc-mode . emacs)
               (neotree-mode . emacs)
               (w3m-mode . emacs)
               (gud-mode . emacs)
               (help-mode . emacs)
               (eshell-mode . emacs)
               (shell-mode . emacs)
               (xref--xref-buffer-mode . emacs)
               (dashboard-mode . normal)
               (color-rg-mode . emacs)
               (fundamental-mode . normal)
               (woman-mode . emacs)
               (sr-mode . emacs)
               (profiler-report-mode . emacs)
               ;;(dired-mode . normal)
               (dired-mode . emacs)
               (compilation-mode . emacs)
               (speedbar-mode . emacs)
               (ivy-occur-mode . emacs)
               (ffip-file-mode . emacs)
               (ivy-occur-grep-mode . normal)
               (messages-buffer-mode . normal)
               ))
    (evil-set-initial-state (car p) (cdr p)))

  ;;-----------------------
  (eval-after-load "evil-maps"
    '(progn
       (dolist (map '(evil-motion-state-map
                      evil-insert-state-map
                      evil-emacs-state-map
                      evil-window-map))
         (define-key (eval map) "\C-]" nil)
         (define-key (eval map) "\C-t" nil)
         (define-key (eval map) "\C-w" nil)
         (define-key (eval map) "\M-]" nil)
         (set-control-w-shortcuts))))

  ;; evilmode-map
  (defun smart-q ()
      "Delete window in read-only buffers, otherwise record macro."
      (interactive)
      (if buffer-read-only
          (if (= 1 (count-windows))
              (bury-buffer)
            (delete-window))
        (call-interactively 'evil-record-macro)))
  (with-eval-after-load 'evil
    (define-key evil-normal-state-map (kbd "q") 'smart-q)
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (define-key evil-normal-state-map (kbd "C-t") nil)
    (define-key evil-normal-state-map (kbd "C-]") nil)
    (define-key evil-normal-state-map (kbd "/")  'swiper)
    (define-key evil-motion-state-map (kbd "C-6") nil))

#+END_SRC

* Org-Mode
** Org 辅助配置

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package org-auto-tangle
  :ensure t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
(use-package toc-org
  :ensure t
  :hook (org-mode . toc-org-mode))

(use-package f :ensure t)
(use-package org-imagine
  :load-path "~/.emacs.d/vendor/org-imagine"
  :config
  (setq
    org-imagine-cache-dir "./.org-imagine"
    org-imagine-is-overwrite nil)
    )
#+END_SRC

** Org 主配置

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ob-erlang)
  (use-package org
    :config
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex) 
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((lisp . t)
       (emacs-lisp . t)
       (latex . t)
       (sql . t)
       (go . t)
       (erlang . t)
       ;; (js. t)
       (C . t)
       (python . t)
       ))
    (setq
          ;;org-ellipsis " ⤵"
          org-ellipsis "..." 

          ;; 使用 UTF-8 显示 LaTeX 或 \xxx 特殊字符， M-x org-entities-help 查看所有特殊字符。
          org-pretty-entities t
          org-highlight-latex-and-related '(latex)
          ;; 只显示而不处理和解释 latex 标记，例如 \xxx 或 \being{xxx}, 避免 export pdf 时出错。
          org-export-with-latex 'verbatim
          org-hide-emphasis-markers t
          org-hide-block-startup t
          org-hidden-keywords '(title)
          org-cycle-separator-lines 2
          org-cycle-level-faces t
          org-n-level-faces 4
          ;; TODO 状态更新记录到 LOGBOOK Drawer 中。
          org-log-into-drawer t
          ;; TODO 状态更新时记录 note.
          org-log-done 'note ;; note, time
          ;; 不在线显示图片，手动点击显示更容易控制大小。
          ;; org-startup-with-inline-images nil
          ;; 先从 #+ATTR.* 获取宽度，如果没有设置则默认为 300 。
          org-image-actual-width '(420)
          org-cycle-inline-images-display nil
          org-html-validation-link nil
          org-export-with-broken-links t
          ;; 文件链接使用相对路径, 解决 hugo 等 image 引用的问题。
          org-link-file-path-type 'relative
          org-startup-folded 'content
          ;; 使用 R_{s} 形式的下标（默认是 R_s, 容易与正常内容混淆) 。
          org-use-sub-superscripts nil
          ;; 如果对 headline 编号，则 latext 输出时会导致 toc 缺失，故关闭。
          org-startup-numerated nil
          org-startup-indented t
          ;; export 时不处理 super/subscripting, 等效于 #+OPTIONS: ^:nil 。
          org-export-with-sub-superscripts nil
          org-hide-leading-stars t
          org-indent-indentation-per-level 2
          ;; 内容缩进与对应 headerline 一致。
          org-adapt-indentation t
          org-list-indent-offset 2
          ;; org-timer 到期时发送声音提示。
          org-clock-sound t)
    ;; 不自动缩进。
    (setq org-src-preserve-indentation t)
    (setq org-edit-src-content-indentation 0)
    ;; 不自动对齐 tag。
    (setq org-tags-column 0)
    (setq org-auto-align-tags nil)
    ;; 显示不可见的编辑。
    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-fold-catch-invisible-edits t)
    (setq org-special-ctrl-a/e t)
    (setq org-insert-heading-respect-content t)
    ;; 支持 ID property 作为 internal link target(默认是 CUSTOM_ID property)
    (setq org-id-link-to-org-use-id t)
    (setq org-M-RET-may-split-line nil)
    (setq org-todo-keywords '((sequence "TODO(t!)" "DOING(d@)" "|" "DONE(D)")
                              (sequence "BLOCKED(b@)" "|" "CANCELLED(c@)")))

    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode 0))))

  ;; 关闭频繁弹出的 org-element-cache 警告 buffer 。
  (setq org-element-use-cache nil)
#+END_SRC

** Org 美化配置

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package valign
  :custom (valign-fancy-bar 1)
  :hook
  ((org-mode . valign-mode)
   (markdown-mode . valign-mode)))

(use-package org-modern
  :ensure t
  :after (org)
  :init
  ;;(setq org-modern-list '((43 . "🔘") (45 . "🔸") (42 . "")))
  ;;(setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶"))
  ;;(setq org-modern-list '((?- . "•")))
  (setq org-modern-star '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
  (setq org-modern-table-vertical 2)
  (setq org-modern-block-name nil)
  (setq org-modern-keyword nil)
  (setq org-modern-timestamp nil)
  :config
  (setq org-modern-table nil)  ;  关掉表格美化
  (add-hook 'org-mode-hook #'valign-mode) ; valign 解决 org-modern 下org-mode 表格不对齐的问题
  )
#+END_SRC

** Org-Latex-Pdf
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; engrave-faces 相比 minted 渲染速度更快。
  (use-package engrave-faces
    :ensure t
    :after ox-latex
    :config
    (require 'engrave-faces-latex)
    (setq org-latex-src-block-backend 'engraved)
    ;; 代码块左侧添加行号。
    (add-to-list 'org-latex-engraved-options '("numbers" . "left"))
    ;; 代码块主题。
    ;;(setq org-latex-engraved-theme 'ef-light))
    )

  (require 'ox-latex)
  (with-eval-after-load 'ox-latex
    ;; latex image 的默认宽度, 可以通过 #+ATTR_LATEX :width xx 配置。
    (setq org-latex-image-default-width "0.8\\linewidth")
    ;; 使用 booktabs style 来显示表格，例如支持隔行颜色, 这样 #+ATTR_LATEX: 中不需要添加 :booktabs t。
    (setq org-latex-tables-booktabs t)
    ;; 保存 LaTeX 日志文件。
    (setq org-latex-remove-logfiles t)

    ;; ;; 目录页前后分页。
    ;; (setq org-latex-toc-command "\\clearpage \\tableofcontents \\clearpage \n")
    ;; ;; 封面页，不添加页编号。
    ;; (setq org-latex-title-command
    ;; 	"\\maketitle\n\\setcounter{page}{0}\n\\thispagestyle{empty}\n\\newpage \n")

    ;; 使用支持中文的 xelatex。
    ;;(setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
    (setq org-latex-pdf-process '
          ;;("latexmk -xelatex -quiet -shell-escape -f %f"
          ("latexmk -xelatex -shell-escape -f %f"
           "rm -fr %b.out %b.tex %b.brf %b.bbl"))
    ;;        ;;"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl"))

    (add-to-list 'org-latex-classes
                 '("ctexart"
                   "
                   \\documentclass[lang=cn,11pt,a4paper,table]{ctexart}
                      [NO-DEFAULT-PACKAGES]
                      [PACKAGES]
                      [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

** Org-Latex-Preview
#+begin_src emacs-lisp :tangle yes

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq org-export-coding-system 'utf-8)
(setq org-fast-tag-selection-single-key 'expert)
(setq org-export-kill-product-buffer-when-displayed t)
(setq org-fontify-whole-heading-line t)
(setq org-directory "/Users/zxh/githubs/private/notes")
(setq org-startup-with-inline-images t)
(setq org-startup-with-latex-preview t)

;;Org LaTeX customizations
(setq org-latex-preview-default-process 'dvisvgm)
;; (setq org-latex-pdf-process
;;  	'("xelatex -interaction nonstopmode -output-directory %o %f"
;;       "xelatex -interaction nonstopmode -output-directory %o %f"
;;       "xelatex -interaction nonstopmode -output-directory %o %f"))

(setq org-latex-packages-alist
      '(("T1" "fontenc" t)
        ("" "amsmath" t)
        ("" "bm" t) ; Bold math required
        ("" "mathtools" t)
        ("" "siunitx" t)
        ("" "physics2" t)))

(setq org-latex-preview-preamble
      "\\documentclass{article}
[DEFAULT-PACKAGES]
[PACKAGES]
\\usepackage{xcolor}
\\usephysicsmodule{ab,ab.braket,diagmat,xmat}%
")

;; (plist-put org-latex-preview-options :scale 2.20)
;; (plist-put org-latex-preview-options :zoom 1.15)
(plist-put org-format-latex-options :scale 2.2)
(plist-put org-format-latex-options :zoom 1.15)

;;Use `CDLaTeX' to improve editing experiences
;; Org-mode 和 CDLaTeX虽然同是 Emacs 的 mode，但是地位不同的。
;; Org-mode 是 Major Mode（主要模块）；CDLaTeX 是 Minor Mode（辅助模块）。
;; 一般来说 Emacs 是不能同时使用多个 Major Mode。
;;  CDLaTeX 作用是实现了部分来自另外一个 Major Mode ——AUCTeX 的功能
;; 让你可以在其他的 Major Mode 里快速输入 LaTeX。

;; 相比直接在 Org-mode 里使用 CDLaTeX,推荐使用 Org-mode 自带的轻量版的 org-cdlatex-mode。
;; org-cdlatex-mode 依赖 cdlatex.el 和 texmathp.el(来自 AUTeX,判定光标是否在内嵌的 LaTeX 中
;; 所以需要安的 CDLaTeX 和 AUTeX：
;; 打开 Org-mode，用 M-x org-cdlatex-mode 打开 CDLaTeX。
;; 然后你就可以体验的 CDLaTeX 带来的快速输入 LaTeX 的功能了：
;;
;;    <TAB> 自动补全一些 LaTeX 模板，如：fr => ~\frac{}{} 和 lr( => \left(\right)。
;;    <TAB> 也可以用于在各个 {} 之间跳跃；
;;     _ 和 ^ 会自动补全 {}，不过如果 {} 里只有一个元素的话，也会自动去掉；
;;     ` 后加一个字母可以快速输入一些 LaTeX 的符号，如 `a => \alpha 和 `b => \beta；
;;     一些字母之后加上 ' 则是可以修改该字母的字体或者加修饰，如 a'. => \dot{a} 和 a'1 => {\displaystyle a}。

(use-package tex
  :ensure auctex)

(use-package cdlatex
  :load-path "~/.emacs.d/vendor/cdlatex"
  :diminish (org-cdlatex-mode)
  :config (add-hook 'org-mode-hook #'turn-on-org-cdlatex))

;; (add-hook 'org-mode-hook #'(lambda ()
;;                              (org-latex-preview-auto-mode 1)))

;; To display LaTeX symbols as unicode
;;(setq org-pretty-entities t)
;;(setq org-pretty-entities-include-sub-superscripts nil)

;; 为了补全，原来是绑定在了M-TAB上的，但是这个键我绑定在了切换窗口上，于是 把它改成TAB好了：
(global-set-key (kbd "TAB") 'pcomplete)

#+end_src
* Programming

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package plantuml-mode
    :ensure t
    :mode ("\\.plantuml\\'" . plantuml-mode)
    :init
    ;; enable plantuml babel support
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((plantuml . t))))
    :config
    (setq org-plantuml-exec-mode 'plantuml)
    (setq org-plantuml-executable-path "plantuml")
    (setq plantuml-executable-path "plantuml")
    (setq plantuml-default-exec-mode 'executable)
    ;; set default babel header arguments
    (setq org-babel-default-header-args:plantuml
          '((:exports . "results")
            (:results . "file")
            ))
    )

  ;;---------------------------------------------------------
  ;; Golang
  (use-package go-mode)

  ;;---------------------------------------------------------
  ;; Erlang 
  (let* ((tools-version erlang-lib-tools-version)
         (path-prefix erlang-path-prefix)
         (tools-path
          (concat path-prefix "/lib/tools-" tools-version "/emacs")))
    (when (file-exists-p tools-path)
      (setq load-path (cons tools-path load-path))
      (setq erlang-root-dir (concat path-prefix "/erlang"))
      (setq exec-path (cons (concat path-prefix "/bin") exec-path))
      (require 'erlang-start)
      (defvar inferior-erlang-prompt-timeout t)))

  ;;---------------------------------------------------------
  ;; C/C++
  (use-package cc-mode
    :ensure nil
    :bind (:map c-mode-base-map
                ("C-c c" . compile))
    :hook (c-mode-common . (lambda () (c-set-style "stroustrup")))
    :init (setq-default c-basic-offset 4)
    :config
    (use-package modern-cpp-font-lock
      :init (modern-c++-font-lock-global-mode t)))

  ;;---------------------------------------------------------
  ;; Python 
  ;; Install: pip install pyflakes autopep8
  (use-package python
    :ensure nil
    :hook (inferior-python-mode . (lambda ()
                                    (process-query-on-exit-flag
                                     (get-process "Python"))))
    :init
    ;; Disable readline based native completion
    (setq python-shell-completion-native-enable nil)
    :config
    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems stupidly make the unversioned one point at Python 2.
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))

    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))

    ;; Live Coding in Python
    (use-package live-py-mode))

  ;;;---------------------------------------------------------
  ;; rust
  ;; brew install rust-analyzer
  ;; rustup component add rust-src rustfmt clippy rls rust-analysis
  ;;;---------------------------------------------------------
  ;;(use-package lsp-mode
  ;;:init
  ;;:custom
  ;;(lsp-eldoc-render-all t)
  ;;(lsp-idle-delay 0.6)
  ;;; enable / disable the hints as you prefer:
  ;;(lsp-rust-analyzer-server-display-inlay-hints t)
  ;;(lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  ;;(lsp-rust-analyzer-display-chaining-hints t)
  ;;(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  ;;(lsp-rust-analyzer-display-closure-return-type-hints t)
  ;;(lsp-rust-analyzer-display-parameter-hints nil)
  ;;(lsp-rust-analyzer-display-reborrow-hints nil)
  ;;)
  (use-package rust-mode
    ;;:hook ((rust-mode . my/rust-lsp))
    :config
    (setq rust-format-on-save t)
    (defun my/rust-lsp ()
      (setq-local lsp-completion-enable nil
                  compile-command "cargo build")
      ))

  ;;---------------------------------------------------------
  ;; Other languages
  ;;---------------------------------------------------------
  (use-package sh-script :defer t :config (setq sh-basic-offset 4))
  (use-package lua-mode  :defer t :config (add-hook 'lua-mode-hook #'company-mode))
  (use-package yaml-mode :ensure t)

#+END_SRC

* AutoInsert

#+BEGIN_SRC emacs-lisp :tangle yes

(load "autoinsert")
(auto-insert-mode)
(setq auto-insert t)
(setq auto-insert-query t)
(add-hook 'find-file-hooks 'auto-insert)
(setq auto-insert-alist
      (append '(
                (("\\.go$" . "golang header")
                 nil
                 "//---------------------------------------------------------------------\n"
                 "// @Copyright (c) 2023-2024 x Enterprise, Inc. (https://x.com)\n"
                 "// @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
                 "// @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                 "//----------------------------------------------------------------------\n"
                 _
                 ))
              auto-insert-alist))
(setq auto-insert-alist
      (append '(
                (("\\.erl$" . "erlang header")
                 nil
                 "%%%-------------------------------------------------------------------\n"
                 "%%% @Copyright (c) 2023-2024 x Enterprise, Inc. (https://x.com)\n"
                 "%%% @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
                 "%%% @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                 "%%%-------------------------------------------------------------------\n"
                 _
                 ))
              auto-insert-alist))

(setq auto-insert-alist
      (append '(
                (("\\.org$" . "org header")
                 nil
                 "#+TITLE: TODO" n  
                 "#+DATE: " (format-time-string "%Y-%m-%d %a") n 
                 "#+SUBTITLE: 内部资料，注意保密!
#+AUTHOR: zxh(robertzhouxh@gmail.com)
#+LANGUAGE: zh-CN
# 不自动输出 titile 和 toc，后续定制输出。num 控制输出的目录级别。
#+OPTIONS: prop:t title:nil num:2 toc:nil ^:nil
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: ctexart
# 引用自定义 latext style 文件，需要去掉 .sty 后缀。" n
"#+LATEX_HEADER: \\usepackage{"(concat (getenv "HOME") "/.emacs.d/mystyle")"}" n
"# 定制 PDF 封面和目录。
#+begin_export latex
% 封面页
\\begin{titlepage}
% 插入标题
\\maketitle
% 插入封面图
%\\ThisCenterWallPaper{0.4}{/path/to/image.png}
% 封面页不编号
\\noindent\\fboxsep=0pt
\\setcounter{page}{0}
\\thispagestyle{empty}
\\end{titlepage}

% 摘要页
\\begin{abstract}
这是一个摘要。
\\end{abstract}

% 目录页
\\newpage
\\tableofcontents
\\newpage
,#+end_export
"
                 _
                 ))
              auto-insert-alist))

;; (setq auto-insert-alist
;;       (append '(
;;                 (("\\.org$" . "org header")
;;                  nil
;;                  "#+title: TODO\n"
;;                  "#+author: zxh\n"
;;                  "#+email: robertzhouxh@gmail.com\n"
;;                  "#+date:" (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
;;                  "#+OPTIONS: ^:nil\n"
;;                  "#+OPTIONS: toc:2\n"
;;                  "#+LATEX_CLASS: zxh-latex-class\n"
;;                  "#+LATEX_HEADER: \\hypersetup{colorlinks=true,linkcolor=blue}\n"
;;                  "#+LATEX_HEADER: \\makeatletter \\def\\@maketitle{\\null \\begin{center} {\\vskip 5em \\Huge \\@title} \\vskip 30em {\\LARGE \\@author} \\vskip 3em {\\LARGE \\@date} \\end{center} \\newpage} \\makeatother\n\n"
;;                  "* 目录 :TOC_2_org:"
;;                  _
;;                  ))
;;               auto-insert-alist))
#+END_SRC

* Font
** Lazycat's Font Config

#+BEGIN_SRC emacs-lisp :tangle yes

(defun load-font-setup()
  (cond ((eq window-system 'pgtk)
         (set-face-attribute 'default nil :height 140 :family "WenQuanYi Micro Hei Mono"))
        (t
         (let ((emacs-font-size 20)
               (chinese-font-name  "TsangerJinKai05")
               english-font-name)
           (cond
            ((featurep 'cocoa)
             (setq english-font-name "Monaco"))
            ((string-equal system-type "gnu/linux")
             (setq english-font-name "WenQuanYi Micro Hei Mono")))
           (when (display-grayscale-p)
             (set-frame-font (format "%s-%s" (eval english-font-name) (eval emacs-font-size)))
             (set-fontset-font (frame-parameter nil 'font) 'unicode (eval english-font-name))

             (dolist (charset '(kana han symbol cjk-misc bopomofo))
               (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family (eval chinese-font-name))))
             )))))

(load-font-setup)

;; This is hacking to fix Emacs 29 will decrease font after standby.
(add-function :after after-focus-change-function #'load-font-setup)

(dolist (hook (list
               'c-mode-common-hook
               'c-mode-hook
               'c++-mode-hook
               'java-mode-hook
               'haskell-mode-hook
               'emacs-lisp-mode-hook
               'lisp-interaction-mode-hook
               'lisp-mode-hook
               'maxima-mode-hook
               'ielm-mode-hook
               'sh-mode-hook
               'makefile-gmake-mode-hook
               'python-mode-hook
               'js-mode-hook
               'go-mode-hook
               'qml-mode-hook
               'jade-mode-hook
               'css-mode-hook
               'coffee-mode-hook
               'rust-mode-hook
               'qmake-mode-hook
               'lua-mode-hook
               'web-mode-hook
               'markdown-mode-hook
               'conf-toml-mode-hook
               'typescript-mode-hook
               ))
  (add-hook hook #'(lambda () (load-font-setup))))
#+END_SRC

** 废弃

#+BEGIN_SRC emacs-lisp :tangle no 

(toggle-frame-maximized)

(defun available-font (font-list)
  "Get the first available font from FONT-LIST."
  (catch 'font
    (dolist (font font-list)
      (if (member font (font-family-list))
	      (throw 'font font)))))

(defun zxh/setup-font ()
  "Font setup."

  (interactive)
  (let* ((efl '("Monaco" "WenQuanYi Micro Hei Mono" "Source Code Pro" "Ubuntu Mono"))
         (cfl '("TsangerJinKai05" "楷体" "黑体" "STHeiti" "STKaiti"))

	     (cf (available-font cfl))
	     (ef (available-font efl)))

    (when ef
      (dolist (face '(default fixed-pitch fixed-pitch-serif variable-pitch))
	    (set-face-attribute face nil :family ef)))

    (when cf
      (dolist (charset '(kana han cjk-misc bopomofo))
	    (set-fontset-font t charset cf))
      (setq face-font-rescale-alist
	        (mapcar (lambda (item) (cons item 1.2)) cfl)))))

;; settings for daemon mode
(if (daemonp)
    (add-hook 'after-make-frame-functions
	          (lambda (frame)
		        (with-selected-frame frame
		          (cabins/setup-font))))
  (add-hook 'after-init-hook #'zxh/setup-font))

#+END_SRC

* Rime
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rime
  :bind
  (:map rime-active-mode-map
        ("C-;" . 'rime-inline-ascii)
        :map rime-mode-map
        ("C-`" . 'rie-send-keybinding) 
        ("M-o" . 'rime--backspace)
        ("M-m" . 'rime--return)
        ("M-h" . 'rime--escape)
        ("M-j" . 'rime-force-enable))
  :custom
  (default-input-method "rime")
  (rime-posframe-style 'vertical)
  (rime-show-candidate 'posframe)
  (rime-user-data-dir zxh-emacs-rime-user-data-dir)
  (rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
  :config
  (setq rime-disable-predicates
        ;; 行首输入符号
        '(rime-predicate-punctuation-line-begin-p
          ;; 中文字符加空格之后输入符号
          rime-predicate-punctuation-after-space-cc-p
          ;; 中文字符加空格之后输入英文
          rime-predicate-space-after-cc-p
          ;; 英文使用半角符号
          rime-predicate-punctuation-after-ascii-p
          ;; 编程模式，只在注释中输入中文
          rime-predicate-prog-in-code-p))
  (when (x/system-is-mac)
    (setq rime-posframe-properties
          (list :background-color "#333333"
                :foreground-color "#dcdccc"
                ;; :font "PingFang SC"
                ;; :font "TsangerJinKai05"
                :font "TsangerJinKai05-18"
                :internal-border-width 10)))
  (when (x/system-is-linux)
    (setq rime-posframe-properties
          (list :background-color "#333333"
                :foreground-color "#dcdccc"
                ;; :font "WenQuanYi Micro Hei Mono-14"
                :font "TsangerJinKai05-18"
                :internal-border-width 10)))
)
#+END_SRC
* Platform

#+BEGIN_SRC emacs-lisp :tangle yes

;; macos
(when (x/system-is-mac)

  ;; Keyboard 
  (setq echo-keystrokes 0.1)
  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)
  ;; (setq mac-command-modifier       'super   ;; s: super(Command/Win)
  ;;       mac-control-modifier       'control ;; C: Ctrl
  ;;       mac-option-modifier        'meta    ;; M: Meta (Option/Alt)
  ;;       )

  ;; Copy/Paste
  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx)

  ;; Move to Trash
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash/emacs")
  (defun system-move-file-to-trash (file)
    "Use \"trash\" to move FILE to the system trash.
        When using Homebrew, install it using \"brew install trash\"."
    (call-process (executable-find "trash")
                  nil 0 nil
                  file))

  ;; Done
  (message "Wellcome To Mac OS X, Have A Nice Day!!!"))


;; linux
(when (x/system-is-linux)
  (defun yank-to-x-clipboard ()
    (interactive)
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!"))))

#+END_SRC

* Reading & OpenAI

#+BEGIN_SRC emacs-lisp :tangle yes

  ;;(use-package calibredb
  ;;  :ensure t
  ;;  :commands calibredb
  ;;  :bind ("\e\e b" . calibredb)
  ;;  :config
  ;;  (setq calibredb-root-dir "~/Calibre")
  ;;  (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
  ;;  (setq calibredb-library-alist '(("~/Books/books")
  ;;                                  ))

  ;;  (setq calibredb-format-icons-in-terminal t)
  ;;  (setq calibredb-id-width 0)
  ;;  )

  ;; (use-package org-ai
  ;;   :load-path "~/.emacs.d/vendor/org-ai"
  ;;   :bind (
  ;;          ("C-c q" . org-ai-prompt)
  ;;          ("C-c x" . org-ai-on-region)
  ;;          )
  ;;   :hook (org-mode . org-ai-mode)
  ;;   :config
  ;;   ;;(setq org-ai-openai-api-token "sk-")
  ;;   (setq org-ai-default-max-tokens 480)
  ;;   (setq org-ai-default-chat-system-prompt "你是一个Emacs助手，请以Org-mode的格式来回复我")
  ;;   )
#+END_SRC

* Lazycat Plugins

#+BEGIN_SRC emacs-lisp :tangle yes

;;(require 'visual-regexp)
;;(setq vr/match-separator-use-custom-face t)
;;(setq vr/match-separator-string "⇛")
(require 'lazy-load)
(require 'one-key)
(require 'posframe)
(require 'lazycat-toolkit)
(require 'goto-chg)
(require 'watch-other-window)
(require 'thing-edit)
(require 'color-rg)
(require 'blink-search)
(require 'markmacro)

;; (require 'sort-tab)
;; (sort-tab-mode 1)

;; (require 'auto-save)
;; (auto-save-enable)
;; (setq auto-save-silent t)
;; (setq auto-save-delete-trailing-whitespace nil)

;; ----------------------------------------------------------
;; auto mode
(defun add-to-alist (alist-var elt-cons &optional no-replace)
  "Add to the value of ALIST-VAR an element ELT-CONS if it isn't there yet.
                  If an element with the same car as the car of ELT-CONS is already present,
                  replace it with ELT-CONS unless NO-REPLACE is non-nil; if a matching
                  element is not already present, add ELT-CONS to the front of the alist.
                  The test for presence of the car of ELT-CONS is done with `equal'."
  (let ((existing-element (assoc (car elt-cons) (symbol-value alist-var))))
    (if existing-element
        (or no-replace
            (rplacd existing-element (cdr elt-cons)))
      (set alist-var (cons elt-cons (symbol-value alist-var)))))
  (symbol-value alist-var))

(dolist (elt-cons '(
                    ("\\.markdown" . markdown-mode)
                    ("\\.md" . markdown-mode)
                    ("\\.yaml" . yaml-mode)
                    ("\\.yml" . yaml-mode)
                    ("\\.stumpwmrc\\'" . lisp-mode)
                    ("\\.[hg]s\\'" . haskell-mode)
                    ("\\.hi\\'" . haskell-mode)
                    ("\\.hs-boot\\'" . haskell-mode)
                    ("\\.chs\\'" . haskell-mode)
                    ("\\.l[hg]s\\'" . literate-haskell-mode)
                    ("\\.inc\\'" . asm-mode)
                    ("\\.max\\'" . maxima-mode)
                    ("\\.org\\'" . org-mode)
                    ("\\.cron\\(tab\\)?\\'" . crontab-mode)
                    ("cron\\(tab\\)?\\." . crontab-mode)
                    ("\\.py$" . python-mode)
                    ("SConstruct". python-mode)
                    ("\\.jl\\'" . lisp-mode)
                    ("\\.asdf\\'" . lisp-mode)
                    ("CMakeLists\\.txt\\'" . cmake-mode)
                    ("\\.cmake\\'" . cmake-mode)
                    ("\\.php\\'" . php-mode)
                    ("\\.vue" . web-mode)
                    ("\\.wxml" . web-mode)
                    ("\\.phtml\\'" . web-mode)
                    ("\\.tpl\\.php\\'" . web-mode)
                    ("\\.as[cp]x\\'" . web-mode)
                    ("\\.erb\\'" . web-mode)
                    ("\\.mustache\\'" . web-mode)
                    ("\\.djhtml\\'" . web-mode)
                    ("\\.html?\\'" . web-mode)
                    ("\\.js.erb\\'" . js-mode)
                    ("\\.css\\'" . css-mode)
                    ("\\.wxss\\'" . css-mode)
                    ("\\.jade" . jade-mode)
                    ("\\.go$" . go-mode)
                    ("\\.rs$" . rust-mode)
                    ("\\.pro$" . qmake-mode)
                    ("\\.js$" . js-mode)
                    ("\\.wxs$" . js-mode)
                    ("\\.jsx$" . web-mode)
                    ("\\.lua$" . lua-mode)
                    ("\\.y$" . bison-mode)
                    ;;("\\.pdf$" . pdf-view-mode)
                    ("\\.ts$" . typescript-mode)
                    ("\\.tsx$" . typescript-mode)
                    ("\\.cpp$" . c++-mode)
                    ("\\.h$" . c++-mode)
                    ("\\.ll$" . llvm-mode)
                    ("\\.bc$" . hexl-mode)
                    ("\\.nim$" . nim-mode)
                    ("\\.nims$" . nim-mode)
                    ("\\.nimble$" . nim-mode)
                    ("\\.nim.cfg$" . nim-mode)
                    ("\\.exs$" . elixir-mode)
                    ("\\.erl$" . erlang-mode)
                    ("\\.schema$" . erlang-mode)
                    ("rebar\\.config$" . erlang-mode)
                    ("relx\\.config$" . erlang-mode)
                    ("sys\\.config\\.src$" . erlang-mode)
                    ("sys\\.config$" . erlang-mode)
                    ("\\.config\\.src?$" . erlang-mode)
                    ("\\.config\\.script?$" . erlang-mode)
                    ("\\.hrl?$" . erlang-mode)
                    ("\\.app?$" . erlang-mode)
                    ("\\.app.src?$" . erlang-mode)
                    ("\\Emakefile" . erlang-mode)
                    ("\\.json$" . json-mode)
                    ("\\.clj$" . clojure-mode)
                    ("\\.plantuml$" . plantuml-mode)
                    ))
  (add-to-alist 'auto-mode-alist elt-cons))


;;---------------------------------------------------------
;; Line numbers are not displayed when large files are used.
(setq line-number-display-limit large-file-warning-threshold)
(setq line-number-display-limit-width 1000)

(dolist (hook (list
               'c-mode-common-hook
               'c-mode-hook
               'emacs-lisp-mode-hook
               'lisp-interaction-mode-hook
               'lisp-mode-hook
               'java-mode-hook
               'asm-mode-hook
               'haskell-mode-hook
               'rcirc-mode-hook
               'erc-mode-hook
               'sh-mode-hook
               'makefile-gmake-mode-hook
               'python-mode-hook
               'js-mode-hook
               'html-mode-hook
               'css-mode-hook
               'tuareg-mode-hook
               'go-mode-hook
               'qml-mode-hook
               'markdown-mode-hook
               'slime-repl-mode-hook
               'package-menu-mode-hook
               'cmake-mode-hook
               'php-mode-hook
               'web-mode-hook
               'sws-mode-hook
               'jade-mode-hook
               'vala-mode-hook
               'rust-mode-hook
               'ruby-mode-hook
               'qmake-mode-hook
               'lua-mode-hook
               'swift-mode-hook
               'llvm-mode-hook
               'conf-toml-mode-hook
               'nxml-mode-hook
               'nim-mode-hook
               'typescript-mode-hook
               'elixir-mode-hook
               'erlang-mode-hook
               'clojure-mode-hook
               ))
  (add-hook hook (lambda () (display-line-numbers-mode))))

;;----------------------------------------------------------
;; fingertip
;; (when (or (string-match "Emacs 30." (emacs-version))
;;           (string-match "Emacs 31." (emacs-version)))
;;   (require 'fingertip)
;;   (message "For Emacs 29+, load fingertip")
;;   (dolist (hook (list
;;                  'c-mode-common-hook
;;                  'c-mode-hook
;;                  'c++-mode-hook
;;                  'java-mode-hook
;;                  'haskell-mode-hook
;;                  'emacs-lisp-mode-hook
;;                  'lisp-interaction-mode-hook
;;                  'lisp-mode-hook
;;                  'maxima-mode-hook
;;                  'ielm-mode-hook
;;                  'sh-mode-hook
;;                  'makefile-gmake-mode-hook
;;                  'php-mode-hook
;;                  'python-mode-hook
;;                  'js-mode-hook
;;                  'go-mode-hook
;;                  'qml-mode-hook
;;                  'jade-mode-hook
;;                  'css-mode-hook
;;                  'ruby-mode-hook
;;                  'coffee-mode-hook
;;                  'rust-mode-hook
;;                  'qmake-mode-hook
;;                  'lua-mode-hook
;;                  'swift-mode-hook
;;                  'web-mode-hook
;;                  'markdown-mode-hook
;;                  'llvm-mode-hook
;;                  'conf-toml-mode-hook
;;                  'nim-mode-hook
;;                  'typescript-mode-hook

;;                  'c-ts-mode-hook
;;                  'c++-ts-mode-hook
;;                  'cmake-ts-mode-hook
;;                  'toml-ts-mode-hook
;;                  'css-ts-mode-hook
;;                  'js-ts-mode-hook
;;                  'json-ts-mode-hook
;;                  'python-ts-mode-hook
;;                  'bash-ts-mode-hook
;;                  'typescript-ts-mode-hook
;;                  ))
;;     (add-hook hook #'(lambda () (fingertip-mode 1))))
;;   )


;;----------------------------------------------------------
;; 使用 lsp-bridge 时， 请先关闭其他补全插件，
;; 比如 lsp-mode, eglot, company, corfu 等等， lsp-bridge 提供从补全后端、 补全前端到多后端融合的全套解决方案。

(use-package yasnippet-snippets :ensure t)
(use-package yasnippet
  :ensure t
  :diminish (yas-minor-mode . "γ")
  :bind
  ("C-c y s" . yas-insert-snippet)
  ("C-c y v" . yas-visit-snippet-file)
  :commands (yas-expand-snippet yas-insert-snippet yas-new-snippet)
  :init (add-hook 'prog-mode-hook #'yas-minor-mode)
  :config (progn
	    (add-to-list 'yas-snippet-dirs "~/.emacs.d/my-snippets")
      (yas-global-mode 1)
	    ))

;;; Require
(require 'lsp-bridge)
(require 'lsp-bridge-jdtls)

;;; Code:

(setq lsp-bridge-enable-completion-in-minibuffer t)
(setq lsp-bridge-signature-show-function 'lsp-bridge-signature-show-with-frame)
(setq lsp-bridge-enable-with-tramp t)
(setq acm-enable-quick-access t)
(setq acm-backend-yas-match-by-trigger-keyword t)
(setq acm-enable-tabnine nil)
(setq acm-enable-codeium nil)

(global-lsp-bridge-mode)

;; 打开日志，开发者才需要
(setq lsp-bridge-enable-log t)

(setq lsp-bridge-get-multi-lang-server-by-project
      (lambda (project-path filepath)
        ;; If typescript file include deno.land url, then use Deno LSP server.
        (save-excursion
          (when (string-equal (file-name-extension filepath) "ts")
            (dolist (buf (buffer-list))
              (when (string-equal (buffer-file-name buf) filepath)
                (with-current-buffer buf
                  (goto-char (point-min))
                  (when (search-forward-regexp (regexp-quote "from \"https://deno.land") nil t)
                    (return "deno")))))))))

;; Support jump to define of EAF root from EAF application directory.
;; (setq lsp-bridge-get-project-path-by-filepath
;;       (lambda (filepath)
;;         (when (string-prefix-p (expand-file-name "~/lazycat-emacs/site-lisp/extensions/emacs-application-framework/app") filepath)
;;           (expand-file-name "~/lazycat-emacs/site-lisp/extensions/emacs-application-framework/"))))

;; Refer: https://emacs-china.org/t/lsp-bridge/20786/3221
(setq lsp-bridge-get-project-path-by-filepath
      (lambda (filepath)
        (save-match-data
          (and (string-match (concat (getenv "HOME") "/zxh/githubs/gld/\\([^/]*\\)") filepath)
               (match-string 0 filepath)))))

#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dashboard
  ;; :ensure t
  :load-path "~/.emacs.d/vendor/emacs-dashboard"
  :config
  ;; Icon in graphic mode
  (when (display-graphic-p)
    (setq
     dashboard-set-heading-icons t
     dashboard-set-file-icons t))

  (setq
   ;;dashboard-center-content t
   dashboard-banner-logo-title " 浩哥专属 Emacs:-) "
   dashboard-startup-banner (expand-file-name "icon.png" user-emacs-directory)
   dashboard-items '((recents . 5)
                     (bookmarks . 5)
                     (agenda . 5)
                     (projects . 5)))
  (dashboard-setup-startup-hook))  


(add-to-list 'custom-theme-load-path "~/.emacs.d/vendor/everforest-theme")
(add-to-list 'custom-theme-load-path "~/.emacs.d/vendor/tao-theme")

(require 'lazycat-theme)
;; (lazycat-theme-load-with-sunrise)
;; ;(lazycat-theme-load-light)
(lazycat-theme-load-dark)

(require 'awesome-tray)
(setq awesome-tray-active-modules '("location" "pdf-view-page" "belong" "file-path" "mode-name" "last-command" "battery" "date"))
(setq awesome-tray-info-padding-right 1)
(awesome-tray-mode 1)

;;(load-theme 'tao-yang t)
;;(load-theme 'tao-yin t)

;; --------------------------------------------------------------------------------------------------
;;         ;;随系统切换 light 和 dark mode 主题，利用 macOS 下 emacs-plus 增加的 ns-system-appearance-change-functions 钩子来实现
;;         ;;(defun my/apply-theme (appearance)
;;         ;;  "Load theme, taking current system APPEARANCE into consideration."
;;         ;;  (mapc #'disable-theme custom-enabled-themes)
;;         ;;  (pcase appearance
;;         ;;    ('light (load-theme 'tao-yang t))
;;         ;;    ('dark (load-theme 'tao-yin t))))
;;         ;;(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)

;;          ;; https://emacs-china.org/t/emacs-theme/7781/18
;;          ;;为了避免 enable-theme 出现混乱，考虑在enable-theme之前，先做一下disable-theme为好。
;;          (load-theme 'tango t t)     ;;加载浅色主题，但不启用。
;;          (load-theme 'zerodark t t)	;;加载深色主题，但不启用。
;;          ;;早上5点启用浅色主题， 每24小时重复一次。
;;          (run-at-time "05:00" (* 60 60 24) (lambda () (enable-theme 'tango)))
;;          ;;晚上7点启用深色主题， 每24小时重复一次。
;;          (run-at-time "19:00" (* 60 60 24) (lambda () (enable-theme 'zerodark)))
;; --------------------------------------------------------------------------------------------------
#+END_SRC

* Eaf

#+BEGIN_SRC emacs-lisp :tangle yes

  (require 'eaf)
  (require 'eaf-image-viewer)
  (require 'eaf-pdf-viewer)
  (require 'eaf-browser)
  (require 'eaf-file-manager)
  (require 'eaf-mindmap)
  (require 'eaf-markmap)
  (require 'eaf-org-previewer)
  (require 'eaf-git)
  (require 'eaf-map)
  (require 'eaf-system-monitor)
  (require 'eaf-video-player)

  ;; Code: 
  ;; You need configuration your own local proxy program first.
  ;;(setq eaf-proxy-type "socks5")
  ;;(setq eaf-proxy-host "127.0.0.1")
  ;;(setq eaf-proxy-port "1080")

  ;; Make `eaf-browser-restore-buffers' restore last close browser buffers.
  (setq eaf-browser-continue-where-left-off t)

  (eaf-bind-key undo_action "C-/" eaf-browser-keybinding)
  (eaf-bind-key redo_action "C-?" eaf-browser-keybinding)
  (eaf-bind-key scroll_up "M-j" eaf-browser-keybinding)
  (eaf-bind-key scroll_down "M-k" eaf-browser-keybinding)
  (eaf-bind-key scroll_up_page "M-n" eaf-browser-keybinding)
  (eaf-bind-key scroll_down_page "M-p" eaf-browser-keybinding)
  (eaf-bind-key open_link "M-h" eaf-browser-keybinding)
  (eaf-bind-key open_link_new_buffer "M-H" eaf-browser-keybinding)
  (eaf-bind-key insert_or_open_link_new_buffer "D" eaf-browser-keybinding)
  (eaf-bind-key insert_or_open_link_background_buffer "F" eaf-browser-keybinding)
  (eaf-bind-key watch-other-window-up-line "M-<" eaf-browser-keybinding)
  (eaf-bind-key watch-other-window-down-line "M->" eaf-browser-keybinding)
  (eaf-bind-key emacs-session-save "<f5>" eaf-browser-keybinding)
  (eaf-bind-key refresh_page "M-r" eaf-browser-keybinding)

  (defun eaf-goto-left-tab ()
    (interactive)
    (sort-tab-select-prev-tab))

  (defun eaf-goto-right-tab ()
    (interactive)
    (sort-tab-select-next-tab))

  (setq eaf-goto-right-after-close-buffer t)

  (one-key-create-menu
   "GIT"
   '(
     ;; (("s" . "Git status") . eaf-open-git)
     (("u" . "Git push to remote") . eaf-git-push)
     (("i" . "Git pull") . eaf-git-pull)
     (("c" . "Git clone") . eaf-git-clone)
     (("h" . "Git history") . eaf-git-show-history)
     )
   t)

  (one-key-create-menu
   "DIRECTORY"
   '(
     (("h" . "Home") . (lambda () (interactive) (eaf-open-in-file-manager "~/")))
     (("d" . "Documents") . (lambda () (interactive) (eaf-open-in-file-manager "~/Documents")))
     (("l" . "Downloads") . (lambda () (interactive) (eaf-open-in-file-manager "~/Downloads")))
     (("p" . "Picture") . (lambda () (interactive) (eaf-open-in-file-manager "~/Pictures")))
     (("m" . "Music") . (lambda () (interactive) (eaf-open-in-file-manager "~/Music")))
     (("c" . "Config") . (lambda () (interactive) (eaf-open-in-file-manager zxh-emacs-root-dir)))
     (("n" . "NRSL") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/nrsl")))
     (("z" . "ZGRH") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/zgrh")))
     (("j" . "JTCX") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/jt")))
     (("s" . "SD") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/sd")))
     (("g" . "GLD") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/gld")))
     )
   t)

  ;;; Require
  (require 'mind-wave)
  
  ;;; Code:
  (setq mind-wave-chat-model "gpt-4")
  (setq mind-wave-async-text-model "gpt-4")
  (setq mind-wave-action-code-model "gpt-4")
  (setq mind-wave-explain-word-model "gpt-4")
  
  (one-key-create-menu
   "MIND-WAVE"
   '(
     (("t" . "Translate to english") . mind-wave-translate-to-english)
     (("T" . "Explain word") . mind-wave-explain-word)
     (("d" . "Proofreading doc") . mind-wave-proofreading-doc)
     (("f" . "Fix typos") . mind-wave-check-typos)
     (("r" . "Refactory code") . mind-wave-refactory-code)
     (("R" . "Refactory code with input") . mind-wave-refactory-code-with-input)
     (("c" . "Comment code") . mind-wave-comment-code)
     (("e" . "Explain code") . mind-wave-explain-code)
     (("E" . "Explain point") . mind-wave-explain-point)
     (("a" . "Adjust text") . mind-wave-adjust-text)
     (("g" . "Generate code") . mind-wave-generate-code)
     (("G" . "Generate patch name") . mind-wave-generate-commit-name)
     (("v" . "Summary video") . mind-wave-summary-video)
     (("w" . "Summary video") . mind-wave-summary-web)
     (("x" . "Restore window configuration") . mind-wave-restore-window-configuration)
     )
   t)

(add-hook 'eaf-git-commit-and-push-hook #'mind-wave-generate-commit-name)


#+END_SRC

* Key-Bindings

#+BEGIN_SRC emacs-lisp :tangle yes

;; #######################################################################
;; Global KeyBindings:  C-h b/k 找到快捷键bind -> ReMap it
;; x-mode KeyBindings   C-h b/k 找到快捷键: M: comand, S: option, C: Control
;; 使用 lsp-bridge 关闭其他补全插件， lsp-bridge 提供从补全后端、 补全前端到多后端融合的全套解决方案。
;; #######################################################################

;; --- 卸载按键, 全局按键的卸载
(lazy-load-unset-keys  
 '("C-x C-f" "C-q" "s-T" "s-W" "s-z" "M-h" "s-c" "s-x" "s-v" "C-6" "M-." "M-," "M-]"))
;; '("C-x C-f" "C-z" "C-q" "s-T" "s-W" "s-z" "M-h" "C-x C-c" "C-\\" "s-c" "s-x" "s-v" "C-6" "M-." "M-,"))
;;(global-set-key (kbd "C-x k")   'kill-this-buffer)

(set-control-w-shortcuts)
(define-key dired-mode-map     (kbd "e")   'wdired-change-to-wdired-mode)

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "M-h") nil)
  (define-key org-mode-map (kbd "C-,") nil))

(defun bjm/kill-this-buffer () (interactive) (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k")   'bjm/kill-this-buffer)

(global-set-key (kbd "<f5>")    'emacs-session-save) ;退出emacs
(global-set-key (kbd "C-,")     'goto-last-change)
(global-set-key (kbd "C-4")     'insert-changelog-date)
(global-set-key (kbd "C-5")     'insert-standard-date)

(global-set-key (kbd "C-c p f") 'projectile-find-file)
(global-set-key (kbd "C-c p b") 'projectile-switch-to-buffer)
(global-set-key (kbd "C-c p p") 'projectile-switch-project)

(global-set-key (kbd "M-7")     'sort-tab-select-prev-tab)
(global-set-key (kbd "M-8 ")    'sort-tab-select-next-tab)
(global-set-key (kbd "M-s-7")   'sort-tab-select-first-tab)
(global-set-key (kbd "M-s-8")   'sort-tab-select-last-tab)
(global-set-key (kbd "C-;")     'sort-tab-close-current-tab)
(global-set-key (kbd "s-q")     'sort-tab-close-mode-tabs)
(global-set-key (kbd "s-Q")     'sort-tab-close-all-tabs)

(global-set-key (kbd "C-x C-f") 'ido-find-file)
(global-set-key (kbd "C-x b")   'ido-switch-buffer)
(global-set-key (kbd "C-x i")   'ido-insert-buffer)
(global-set-key (kbd "C-x I")   'ido-insert-file)

(global-set-key (kbd "M-n")     'hold-line-scroll-down)
(global-set-key (kbd "M-p")     'hold-line-scroll-up)
(global-set-key (kbd "M-]")     'watch-other-window-up)
(global-set-key (kbd "M-[")     'watch-other-window-down)
(global-set-key (kbd "M->")     'watch-other-window-up-line)
(global-set-key (kbd "M-<")     'watch-other-window-down-line)

(global-set-key (kbd "C-x y")   'dash-at-point)

(global-set-key (kbd "C-c SPC") 'avy-goto-char-2)
(global-set-key (kbd "M-g f")   'avy-goto-line)
(global-set-key (kbd "M-g w")   'avy-goto-word-1)

(global-set-key (kbd "C-M-s")   'color-rg-search-input)
(global-set-key (kbd "C-M-;")   'magit-status)
(global-set-key (kbd "C-x G")   'git-messenger:popup-message)

(global-set-key (kbd "C-]")     'lsp-bridge-find-def)
(global-set-key (kbd "C-t")     'lsp-bridge-find-def-return)
(global-set-key (kbd "M-,")     'lsp-bridge-code-action) 
(global-set-key (kbd "M-.")     'lsp-bridge-find-references) 
(global-set-key (kbd "C-9")     'lsp-bridge-popup-documentation)
(global-set-key (kbd "C-0")     'lsp-bridge-rename) 

(global-set-key (kbd "M-s-j")   'lsp-bridge-diagnostic-jump-next)            ;显示下一个错误 
(global-set-key (kbd "M-s-k")   'lsp-bridge-diagnostic-jump-prev)            ;显示上一个错误 
(global-set-key (kbd "M-s-l")   'lsp-bridge-diagnostic-ignore)               ;忽略当前的错误
(global-set-key (kbd "M-s-n")   'lsp-bridge-popup-documentation-scroll-up)   ;向下滚动文档
(global-set-key (kbd "M-s-p")   'lsp-bridge-popup-documentation-scroll-down) ;向上滚动文档

;; macro for marked objects
(global-set-key (kbd "s-/")     'markmacro-mark-words)
(global-set-key (kbd "s-?")     'markmacro-mark-lines)
(global-set-key (kbd "s-:")     'markmacro-mark-chars)
(global-set-key (kbd "s-L")     'markmacro-mark-imenus)
(global-set-key (kbd "s-<")     'markmacro-apply-all)
(global-set-key (kbd "s->")     'markmacro-apply-all-except-first)
(global-set-key (kbd "s-M")     'markmacro-rect-set)
(global-set-key (kbd "s-D")     'markmacro-rect-delete)
(global-set-key (kbd "s-F")     'markmacro-rect-replace)
(global-set-key (kbd "s-I")     'markmacro-rect-insert)
(global-set-key (kbd "s-C")     'markmacro-rect-mark-columns)
(global-set-key (kbd "s-S")     'markmacro-rect-mark-symbols)

;; one-key-menu
(global-set-key (kbd "C-c g")   'one-key-menu-git)
(global-set-key (kbd "C-c d")   'one-key-menu-directory)

#+END_SRC
