:PROPERTIES: header-args:emacs-lisp :tangle
:ID:       E7980AE6-D0E5-4796-83D5-2A0F81400FC2
:END:
#+title: 我的 Emacs 配置
#+date: 2023-02-10 15:21:00 
#+auto_tangle: t

* Custom Vars and Const

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq erlang-path-prefix "~/.asdf/installs/erlang/24.3.4")
  (setq erlang-lib-tools-version "3.5.2")
  (setq plantuml-path "/opt/homebrew/Cellar/plantuml/1.2023.1/libexec/plantuml.jar")
  (setq http-proxy "127.0.0.1:8123")     ; HTTP/HTTPS proxy
  (setq socks-proxy "127.0.0.1:1080")    ; SOCKS proxy
  (setq emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/")

  (defvar zxh-emacs-root-dir (file-truename "~/.emacs.d"))
  (defvar zxh-emacs-vendor-dir (concat zxh-emacs-root-dir "/vendor"))

#+END_SRC

* Bootstrap use-package

#+BEGIN_SRC emacs-lisp :tangle yes

  (require 'package)
  (setq package-archives '(("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")
                           ))

  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)          ; To prevent initializing twice
    (package-initialize))

  ;; set use-package-verbose to t for interpreted .emacs,
  ;; and to nil for byte-compiled .emacs.elc.
  (eval-and-compile
    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))

  ;; Install use-package if not installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))

  (defun add-subdirs-to-load-path (search-dir)
    (interactive)
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; 过滤出不必要的目录，提升Emacs启动速度
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; 不是目录的文件都移除
                     (not (file-directory-p (concat dir subdir)))
                     ;; 父目录、 语言相关和版本控制目录都移除
                     (member subdir '("." ".." 
                                      "dist" "node_modules" "__pycache__" 
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) 
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升Emacs启动速度
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))
          
            ;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾
            ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动
            (add-to-list 'load-path subdir-path t))
        
          ;; 继续递归搜索子目录
          (add-subdirs-to-load-path subdir-path)))))

  (add-subdirs-to-load-path zxh-emacs-vendor-dir)

#+END_SRC

* Generic

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; 加速
  (setq
   ;; 不要缩放frame.
   frame-inhibit-implied-resize t
   ;; 默认用最简单的模式
   initial-major-mode 'fundamental-mode
   package--init-file-ensured t)
  (setq custom-file "~/.emacs.d/custom.el")

  (if (file-exists-p custom-file)
      (load custom-file))

  (tool-bar-mode -1)                      ;禁用工具栏
  (menu-bar-mode -1)                      ;禁用菜单栏
  (scroll-bar-mode -1)                    ;禁用滚动条

  ;; 增加长行处理性能
  (setq bidi-inhibit-bpa t)
  (setq-default bidi-paragraph-direction 'left-to-right)

  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (fset 'yes-or-no-p 'y-or-n-p)           ;以 y/n代表 yes/no
  (blink-cursor-mode -1)                  ;指针不闪动
  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq use-dialog-box nil)               ;never pop dialog
  (setq inhibit-startup-screen t)         ;inhibit start screen
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
  (setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq word-wrap-by-category t)             ;按照中文折行
  (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮

  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
  (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙

  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq scroll-step 1
        scroll-conservatively 10000)

  ;; 不显示 *scratch*
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

  ;; Don't ask me when kill process buffer
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))

  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq-default scroll-step 1
                scroll-preserve-screen-position t
                scroll-up-aggressively 0.01
                scroll-down-aggressively 0.01
                redisplay-dont-pause t
                auto-window-vscroll nil
                ;; Mouse wheel scroll behavior
                mouse-wheel-scroll-amount '(1 ((shift) . 1))
                mouse-wheel-progressive-speed nil
                mouse-wheel-follow-mouse 't
                fast-but-imprecise-scrolling nil)

  ;; idle
  (custom-set-variables '(tramp-verbose 0)) ;设置tramp的响应方式, 关闭后不弹出消息
  (setq max-lisp-eval-depth 40000)          ;lisp最大执行深度
  (setq max-specpdl-size 10000)             ;最大容量
  (setq kill-ring-max 1024)                 ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
  (setq mark-ring-max 1024)                 ;设置的mark ring容量
  (setq eval-expression-print-length nil)   ;设置执行表达式的长度没有限制
  (setq eval-expression-print-level nil)    ;设置执行表达式的深度没有限制
  (auto-compression-mode 1)                 ;打开压缩文件时自动解压缩
  (setq read-quoted-char-radix 16)          ;设置 引用字符 的基数
  (setq global-mark-ring-max 1024)          ;设置最大的全局标记容量
  (global-hl-line-mode 1)                   ;高亮当前行
  (setq isearch-allow-scroll t)             ;isearch搜索时是可以滚动屏幕的
  (setq one-key-popup-window nil)           ;禁止自动弹出窗口
  (setq enable-recursive-minibuffers t)     ;minibuffer 递归调用命令
  (setq history-delete-duplicates t)        ;删除minibuffer的重复历史
  (setq minibuffer-message-timeout 1)       ;显示消息超时的时间
  (setq auto-revert-mode 1)                 ;自动更新buffer
  (show-paren-mode t)                       ;显示括号匹配
  (setq show-paren-style 'parentheses)      ;括号匹配显示但不是烦人的跳到另一个括号。
  (setq blink-matching-paren nil)           ;当插入右括号时不显示匹配的左括号
  (setq message-log-max t)                  ;设置message记录全部消息, 而不用截去
  (setq require-final-newline nil)          ;不自动添加换行符到末尾, 有些情况会出现错误
  (setq ediff-window-setup-function (quote ediff-setup-windows-plain)) ;比较窗口设置在同一个frame里
  (setq x-stretch-cursor t)                 ;光标在 TAB 字符上会显示为一个大方块
  (put 'narrow-to-region 'disabled nil)     ;开启变窄区域
  (setq print-escape-newlines t)            ;显示字符窗中的换行符为 \n
  (setq tramp-default-method "ssh")         ;设置传送文件默认的方法
  (setq void-text-area-pointer nil)         ;禁止显示鼠标指针
  (setq echo-keystrokes 0.1)                ;加快快捷键提示的速度


    ;;; ### Auto-fill ###
    ;;; --- 自动换行
  (setq default-fill-columndefault-fill-column 100)          ;默认显示 100列就换行
  (dolist (hook (list
                 'after-text-mode-hook
                 'message-mode-hook
                 ))
    (add-hook hook #'(lambda () (auto-fill-mode 1))))

  ;;设置tab为4个空格的宽度
  (setq default-tab-width 4)
  ;; Code
  (prefer-coding-system 'utf-8)
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  (setenv "LC_CTYPE" "en_US.UTF-8")
  ;; Encoding
  ;; UTF-8 as the default coding system
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))

  ;; Explicitly set the prefered coding systems to avoid annoying prompt
  ;; from emacs (especially on Microsoft Windows)
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)

  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)

#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp :tangle yes

  (defconst sys/linuxp (eq system-type 'gnu/linux) "Are we running on a GNU/Linux?")
  (defconst sys/macp (eq system-type 'darwin) "running on a Mac system?")
  (defconst sys/mac-x-p (and (display-graphic-p) sys/macp) "X on a Mac system?")
  (defconst sys/mac-cocoa-p (featurep 'cocoa) "with Cocoa on a Mac system?")
  (defconst sys/mac-port-p (eq window-system 'mac) "macport build on a Mac system?")
  (defconst sys/linux-x-p (and (display-graphic-p) sys/linuxp) "X on GNU/Linux?")
  (defvar socks-noproxy)
  (defvar socks-server)
  (defcustom http-proxy "127.0.0.1:8123" "Set network proxy." :group 'centaur :type 'string)

  ;; from lazycat emacs config
  (defun org-export-docx ()
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
          (template-file (concat (file-name-as-directory zxh-emacs-root-dir)
                                 "template.docx")))
      (message (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file)) 
      (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                             (buffer-file-name)
                             docx-file
                             template-file
                             ))
      (message "Convert finish: %s" docx-file)))


  ;; --------------------------------------------
  ;; 辅助函数
  ;; --------------------------------------------
  (defun x/system-is-mac () (interactive) (string-equal system-type "darwin"))

  (defun x/system-is-linux () (interactive) (string-equal system-type "gnu/linux"))

  (defun format-function-parameters ()
    "Turn the list of function parameters into multiline."
    (interactive)
    (beginning-of-line)
    (search-forward "(" (line-end-position))
    (newline-and-indent)
    (while (search-forward "," (line-end-position) t)
      (newline-and-indent))
    (end-of-line)
    (c-hungry-delete-forward)
    (insert " ")
    (search-backward ")")
    (newline-and-indent))

  (defun my-org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
            same directory as the org-buffer and insert a link to this file."
    (interactive)
    (org-display-inline-images)

    (setq filename
          (concat
           (make-temp-name
            (concat (file-name-directory (buffer-file-name))
                    "/imgs/"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
                                          ; take screenshot
    (if (eq system-type 'darwin)
        (progn
          (call-process-shell-command "screencapture" nil nil nil nil " -s " (concat
                                                                              "\"" filename "\"" ))
          (call-process-shell-command "convert" nil nil nil nil (concat "\"" filename "\" -resize  \"50%\"" ) (concat "\"" filename "\"" ))
          ))

    (setq relative-dir (concat "./imgs/" (file-name-nondirectory filename)))
    (if (file-exists-p filename)
        (insert (concat "[[file:" relative-dir "]]")))
    (org-display-inline-images))

  ;; --------------------------------------------
  ;; proxy 操作辅助函数
  ;; --------------------------------------------
  (defun proxy-http-show ()
    "Show HTTP/HTTPS proxy."
    (interactive)
    (if url-proxy-services
        (message "Current HTTP proxy is `%s'" http-proxy)
      (message "No HTTP proxy")))

  (defun proxy-http-enable ()
    "Enable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services
          `(("http" . ,http-proxy)
            ("https" . ,http-proxy)
            ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
    (proxy-http-show))

  (defun proxy-http-disable ()
    "Disable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services nil)
    (proxy-http-show))

  (defun proxy-http-toggle ()
    "Toggle HTTP/HTTPS proxy."
    (interactive)
    (if (bound-and-true-p url-proxy-services)
        (proxy-http-disable)
      (proxy-http-enable)))

  (defun proxy-socks-show ()
    "Show SOCKS proxy."
    (interactive)
    (when (fboundp 'cadddr)                ; defined 25.2+
      (if (bound-and-true-p socks-noproxy)
          (message "Current SOCKS%d proxy is %s:%s"
                   (cadddr socks-server) (cadr socks-server) (caddr socks-server))
        (message "No SOCKS proxy"))))

  (defun proxy-socks-enable ()
    "Enable SOCKS proxy."
    (interactive)
    (require 'socks)
    (setq url-gateway-method 'socks
          socks-noproxy '("localhost"))
    (let* ((proxy (split-string socks-proxy ":"))
           (host (car proxy))
           (port (cadr  proxy)))
      (setq socks-server `("Default server" ,host ,port 5)))
    (setenv "all_proxy" (concat "socks5://" socks-proxy))
    (proxy-socks-show))

  (defun proxy-socks-disable ()
    "Disable SOCKS proxy."
    (interactive)
    (setq url-gateway-method 'native
          socks-noproxy nil
          socks-server nil)
    (setenv "all_proxy" "")
    (proxy-socks-show))

  (defun proxy-socks-toggle ()
    "Toggle SOCKS proxy."
    (interactive)
    (if (bound-and-true-p socks-noproxy)
        (proxy-socks-disable)
      (proxy-socks-enable)))


  ;; --------------------------------------------
  ;; FIle 操作与编码辅助函数
  ;; --------------------------------------------
  (defun x/save-all ()
    "Save all file-visiting buffers without prompting."
    (interactive)
    (save-some-buffers t))

  (defun x/open-init-file ()
    (interactive)
    (find-file user-init-file))

  (defun x/reload-init-file ()
    "Reload init.el file."
    (interactive)
    (load user-init-file)
    (message "Reloaded init.el OK."))

  (defun sudo ()
    "Use TRAMP to `sudo' the current buffer"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
               buffer-file-name))))
  (defun dos2unix ()
    "Convert the current buffer to UNIX file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-unix nil))

  (defun unix2dos ()
    "Convert the current buffer to DOS file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-dos nil))

  (defun delete-trailing-M()
    "Delete `^M' characters in the buffer.
              Same as `replace-string C-q C-m RET RET'."
    (interactive)
    (save-excursion
      (goto-char 0)
      (while (search-forward "\r" nil :noerror)
        (replace-match ""))))

  (defun save-buffer-as-utf8 (coding-system)
    "Revert a buffer with `CODING-SYSTEM' and save as UTF-8."
    (interactive "zCoding system for visited file (default nil):")
    (revert-buffer-with-coding-system coding-system)
    (set-buffer-file-coding-system 'utf-8)
    (save-buffer))

  (defun save-buffer-gbk-as-utf8 ()
    "Revert a buffer with GBK and save as UTF-8."
    (interactive)

    (save-buffer-as-utf8 'gbk))


  ;; --------------------------------------------
  ;; buffer 操作辅助函数
  ;; --------------------------------------------
  (defun switch-to-messages ()
    "Select buffer *message* in the current window."
    (interactive)
    (switch-to-buffer "*Messages*"))

  (defun switch-to-dashboard ()
    "Select buffer *message* in the current window."
    (interactive)
    (switch-to-buffer "*Dashboard*"))

  (defun hold-line-scroll-up ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-up 1)
      (line-move-to-column tmp)
      (forward-line 1)))

  (defun hold-line-scroll-down ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-down 1)
      (line-move-to-column tmp)
      (forward-line -1)))


  ;; -------------------------------------------
  ;; Company 辅助函数
  ;; -------------------------------------------
  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))


  ;; --------------------------------------------
  ;; 文件操作辅助函数
  ;; --------------------------------------------
  (defun +rename-current-file (newname)
    "Rename current visiting file to NEWNAME.
        If NEWNAME is a directory, move file to it."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "No file is visiting"))
       (let ((name (read-file-name "Rename to: " nil buffer-file-name 'confirm)))
         (when (equal (file-truename name)
                      (file-truename buffer-file-name))
           (user-error "Can't rename file to itself"))
         (list name))))
    ;; NEWNAME is a directory
    (when (equal newname (file-name-as-directory newname))
      (setq newname (concat newname (file-name-nondirectory buffer-file-name))))
    (rename-file buffer-file-name newname)
    (set-visited-file-name newname)
    (rename-buffer newname))

  (defun +delete-current-file (file)
    "Delete current visiting FILE."
    (interactive
     (list (or buffer-file-name
               (user-error "No file is visiting"))))
    (when (y-or-n-p (format "Really delete '%s'? " file))
      (kill-this-buffer)
      (delete-file file)))

  (defun +copy-current-file (new-path &optional overwrite-p)
    "Copy current buffer's file to `NEW-PATH'.
          If `OVERWRITE-P', overwrite the destination file without
          confirmation."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "No file is visiting"))
       (list (read-file-name "Copy file to: ")
             current-prefix-arg)))
    (let ((old-path (buffer-file-name))
          (new-path (expand-file-name new-path)))
      (make-directory (file-name-directory new-path) t)
      (copy-file old-path new-path (or overwrite-p 1))))

  (defun +copy-current-filename (file)
    "Copy the full path to the current FILE."
    (interactive
     (list (or buffer-file-name
               (user-error "No file is visiting"))))
    (kill-new file)
    (message "Copying '%s' to clipboard" file))

  (defun +copy-current-buffer-name ()
    "Copy the name of current buffer."
    (interactive)
    (kill-new (buffer-name))
    (message "Copying '%s' to clipboard" (buffer-name)))


  ;; --------------------------------------------
  ;; Window 操作辅助函数
  ;; --------------------------------------------
  (defvar toggle-one-window-window-configuration nil
    "The window configuration use for `toggle-one-window'.")

  (defun toggle-one-window ()
    "Toggle between window layout and one window."
    (interactive)
    (if (equal (length (cl-remove-if #'window-dedicated-p (window-list))) 1)
        (if toggle-one-window-window-configuration
            (progn
              (set-window-configuration toggle-one-window-window-configuration)
              (setq toggle-one-window-window-configuration nil))
          (message "No other windows exist."))
      (setq toggle-one-window-window-configuration (current-window-configuration))
      (delete-other-windows)))

#+END_SRC

* Fundamental Plugins

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package use-package-ensure-system-package)
  (use-package protobuf-mode)
  (use-package markdown-mode)
  (use-package dockerfile-mode)
  (use-package nginx-mode)
  (use-package json-mode)
  (use-package json-reformat)
  (use-package comment-dwim-2)
  (use-package buffer-flip)
  (use-package dash-at-point)
  (use-package async :init (async-bytecomp-package-mode 1))
  (use-package projectile :config (projectile-global-mode))
  (use-package flycheck :config (global-flycheck-mode 1))
  (use-package restclient :config (setq restclient-inhibit-cookies t))
  (use-package all-the-icons :if (display-graphic-p))
  (use-package autorevert :ensure nil :hook (after-init . global-auto-revert-mode))
  (use-package so-long :ensure nil :hook (after-init . global-so-long-mode)) ;; emacs27+ new feature
  (use-package highlight-parentheses :init (setq hl-paren-colors '("DarkOrange" "DeepSkyBlue" "DarkRed")))
  (use-package rainbow-delimiters :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  (use-package exec-path-from-shell :if (or sys/mac-x-p sys/linux-x-p) :config (exec-path-from-shell-initialize))
  (use-package which-key
    :hook (after-init . which-key-mode)
    :config
    (progn
      (which-key-mode)
      (which-key-setup-side-window-right)))

  ;; 其他原生接口的前端 
  (use-package ivy
    :init (setq ivy-use-virtual-buffers t
                ivy-count-format "%d/%d ")
    :config (ivy-mode t))
  ;; 取代原生的一些常用指令
  (use-package counsel :after ivy :config (counsel-mode))
  ;; 取代原生的 I-search
  (use-package swiper :after ivy)
  (use-package counsel-projectile
    :after (counsel projectile)
    :preface
    (eval-when-compile
      (declare-function counsel-projectile-mode nil))
    :commands
    (counsel-projectile-rg
     counsel-projectile-find-file
     counsel-projectile-switch-project
     counsel-projectile-switch-to-buffer)
    :config
    (counsel-projectile-mode t))

#+END_SRC

* Indent Tab

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (defun adjust-languages-indent (n)
    (setq-local c-basic-offset n)

    (setq-local coffee-tab-width n)
    (setq-local javascript-indent-level n)
    (setq-local js-indent-level n)
    (setq-local js2-basic-offset n)

    (setq-local web-mode-attr-indent-offset n)
    (setq-local web-mode-attr-value-indent-offset n)
    (setq-local web-mode-code-indent-offset n)
    (setq-local web-mode-css-indent-offset n)
    (setq-local web-mode-markup-indent-offset n)
    (setq-local web-mode-sql-indent-offset n)

    (setq-local css-indent-offset n)

    (setq-local typescript-indent-level n))

  (dolist (hook (list
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'asm-mode-hook
                 'sh-mode-hook
                 'haskell-cabal-mode-hook
                 'ruby-mode-hook
                 'qml-mode-hook
                 'scss-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 4)
                       )))

  (dolist (hook (list
                 'web-mode-hook
                 'js-mode-hook
                 'typescript-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 2)
                       )))

#+END_SRC

* Quick Search And Move

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package avy)
  (use-package vundo
    :defer t
    :commands (vundo)
    :config
    ;; Take less on-screen space.
    (setq vundo-compact-display t)
    (custom-set-faces
     '(vundo-node ((t (:foreground "#808080"))))
     '(vundo-stem ((t (:foreground "#808080"))))
     '(vundo-highlight ((t (:foreground "#FFFF00")))))
    ;; Use `HJKL` VIM-like motion
    (define-key vundo-mode-map (kbd "l") #'vundo-forward)
    (define-key vundo-mode-map (kbd "h") #'vundo-backward)
    (define-key vundo-mode-map (kbd "j") #'vundo-next)
    (define-key vundo-mode-map (kbd "k") #'vundo-previous)
    (define-key vundo-mode-map (kbd "a") #'vundo-stem-root)
    (define-key vundo-mode-map (kbd "e") #'vundo-stem-end)
    (define-key vundo-mode-map (kbd "q") #'vundo-quit)
    (define-key vundo-mode-map (kbd "C-g") #'vundo-quit)
    (define-key vundo-mode-map (kbd "RET") #'vundo-confirm))

  (use-package ag
    :defer t
    :config
    (progn
      (setq ag-highlight-search t)
      (bind-key "n" 'compilation-next-error ag-mode-map)
      (bind-key "p" 'compilation-previous-error ag-mode-map)
      (bind-key "N" 'compilation-next-file ag-mode-map)
      (bind-key "P" 'compilation-previous-file ag-mode-map)))

  (use-package dumb-jump
    :config
    (setq dumb-jump-aggressive nil)
    (setq dumb-jump-selector 'ivy)
    (setq dumb-jump-prefer-searcher 'ag))

  ;; Hiding structured data
  (use-package hideshow
    :hook (prog-mode . hs-minor-mode)
    :config
    (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

    (defface hideshow-border-face
      '((((background light))
         :background "rosy brown" :extend t)
        (t
         :background "sandy brown" :extend t))
      "Face used for hideshow fringe."
      :group 'hideshow)

    (define-fringe-bitmap 'hideshow-folded-fringe
      (vector #b00000000
              #b00000000
              #b00000000
              #b11000011
              #b11100111
              #b01111110
              #b00111100
              #b00011000))

    (defun hideshow-folded-overlay-fn (ov)
      "Display a folded region indicator with the number of folded lines."
      (when (eq 'code (overlay-get ov 'hs))
        (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
               (info (format " (%d)..." nlines)))
          ;; fringe indicator
          (overlay-put ov 'before-string (propertize " "
                                                     'display '(left-fringe hideshow-folded-fringe
                                                                            hideshow-border-face)))
          ;; folding indicator
          (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))
    :custom
    (hs-set-up-overlay #'hideshow-folded-overlay-fn))

#+END_SRC

* Company && Yasnippet

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package expand-region :bind ("C-=" . er/expand-region))
  (use-package company-restclient)
  (use-package company-nginx :after (nginx-mode) :hook((nginx-mode . company-nginx-keywords)))
  (use-package yasnippet
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode))

  (use-package company
    :bind
    (:map company-mode-map
          ("<tab>". tab-indent-or-complete)
          ("TAB". tab-indent-or-complete))
    :config
    (progn (setq company-idle-delay 0.5)
           (setq company-show-numbers t)))

  ;;Run M-x company-tabnine-install-binary to install the TabNine binary for your system.
  (use-package company-tabnine
    :defer t 
    :ensure t 
    :config (add-to-list 'company-backends #'company-tabnine))


  (use-package youdao-dictionary
    :commands youdao-dictionary-play-voice-of-current-word
    :init
    (setq url-automatic-caching t
          youdao-dictionary-use-chinese-word-segmentation t) ; 中文分词
    (defun my-youdao-search-at-point ()
      "Search word at point and display result with `posframe', `pos-tip', or buffer."
      (interactive)
      (if (display-graphic-p)
          (youdao-dictionary-search-at-point-posframe)
        (youdao-dictionary-search-at-point))))

#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package dired
    :ensure nil
    :hook (dired-after-readin . dired-directory-sort)
    :config
    (require 'dired-x)

    (setq dired-dwim-target t
          ;; Humanize file size
          dired-listing-switches "-alh")
    ;; Sort directories ahead of files
    (defun dired-directory-sort ()
      "Dired sort hook to list directories first."
      (save-excursion
        (let (buffer-read-only)
          (forward-line 2) ;; beyond dir. header
          (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
      (and (featurep 'xemacs)
           (fboundp 'dired-insert-set-properties)
           (dired-insert-set-properties (point-min) (point-max)))
      (set-buffer-modified-p nil)))

#+END_SRC

* Performance

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Disable garbage collection when entering commands.
  (defun max-gc-limit ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun reset-gc-limit ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'max-gc-limit)
  (add-hook 'minibuffer-exit-hook #'reset-gc-limit)

  ;; Improve the performance of rendering long lines.
  (setq-default bidi-display-reordering nil)

  ;;; Track Emacs commands frequency
  (use-package keyfreq
    :ensure t
    :config (keyfreq-mode 1) (keyfreq-autosave-mode 1))

#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; from https://emacs-china.org/t/magit-add-commit-push/22457
  (defun aborn/simple-git-commit-push ()
    "Simple commit current git project and push to its upstream."
    ;; (interactive "sCommit Message: ")
    (interactive)
    (when (and buffer-file-name
               (buffer-modified-p))
      (save-buffer))                   ;; save it first if modified.
    (magit-diff-unstaged)
    (when (yes-or-no-p "Do you really want to commit everything?")
      (magit-stage-modified)
      ;; (magit-mode-bury-buffer)
      (magit-diff-staged)
      (setq msg (read-string "Commit Message: "))
      (when (= 0 (length msg))
        (setq msg (format-time-string "commit by magit in emacs@%Y-%m-%d %H:%M:%S"
                                      (current-time))))
      (message "commit message is %s" msg)
      ;;(magit-commit (list "-m" msg))
      (magit-call-git "commit" "-m" msg)
      (magit-push-current-to-upstream nil)
      (message "now do async push to %s" (magit-get "remote" "origin" "url")))
    (magit-mode-bury-buffer))

  ;; https://github.com/aborn/.spacemacs.d/blob/687750f41a67ef3e8829b36095074f05d75f5b0d/parts/aborn-swift.el#L71
  (require 'async)
  (defun aborn/magit-create-or-checkout-fix-branch ()
    "Crate (or checkout to) fix branch using magit."
    (interactive)
    (let* ((cbranch (magit-get-current-branch))
           (bname (format-time-string "fix%m%d" (current-time))))
      (if (member bname (magit-list-local-branch-names))
          (progn
            (magit-checkout bname)
            (message "checkout to branch %s success." bname)
            (force-mode-line-update))
        (if (and cbranch
                 (not (string= cbranch bname))
                 (string= "master" cbranch))
            (progn
              (magit-branch-and-checkout bname "master")
              (message "create & checkout to branch %s success." bname))
          (message "current branch is %s (not master), create branch %s failed." cbranch bname))
        (force-mode-line-update))))

  (defun aborn/swift-git-commit-push (msg)
    "Commit modified and push to upstream."
    (interactive "sCommit Message: ")
    (when (= 0 (length msg))
      (setq msg (format-time-string "commit by magit in emacs@%Y-%m-%d %H:%M:%S" (current-time))))
    (message "commit message is %s" msg)
    (when (and buffer-file-name
               (buffer-modified-p))
      (save-buffer))                                     ;; save it first if modified.
    (magit-stage-modified)
    (magit-commit (list "-m" msg))
    (let* ((begin-time (current-time)))
      (async-start
       `(lambda ()
          ,(async-inject-variables "\\`begin-time\\'")
          ,(async-inject-variables "\\`default-directory\\'")
          ,(async-inject-variables "\\`load-path\\'")    ;; main-process load-path.
          (require 'magit)
          (require 'aborn-log)
          (aborn/log (format "[[** start to execute push in directory %s" default-directory))
          (aborn/log (shell-command-to-string "echo $PWD"))
          (when (file-exists-p default-directory)
            (aborn/log (shell-command-to-string "git push"))
            (aborn/log "finished push. **]]"))
          (format "%s push to upstream success. %s. time cost: %ss."
                  (aborn/log-format "")
                  (or (magit-get "remote" "origin" "url") default-directory)
                  (float-time (time-subtract (current-time) begin-time))))
       (lambda (result)
         (message "%s" result)))))

  (defun magit-blame-toggle ()
    "Toggle magit-blame-mode on and off interactively."
    (interactive)
    (if (and (boundp 'magit-blame-mode) magit-blame-mode)
        (magit-blame-quit)
      (call-interactively 'magit-blame)))

  (use-package magit
    ;; :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :config
    (magit-auto-revert-mode t)
    (magit-save-repository-buffers t)   
    (defun magit-display-buffer-same-window (buffer)
      "Display BUFFER in the selected window like God intended."
      (display-buffer buffer '(display-buffer-same-window)))
    (setq magit-display-buffer-function 'magit-display-buffer-same-window))

  (defun my/magit-display-buffer (buffer)
    (if (and git-commit-mode
             (with-current-buffer buffer
               (derived-mode-p 'magit-diff-mode)))
        (display-buffer buffer '((display-buffer-pop-up-window
                                  display-buffer-use-some-window
                                  display-buffer-below-selected)
                                 (inhibit-same-window . t)))
      (magit-display-buffer-traditional buffer)))

  (setq magit-display-buffer-function #'my/magit-display-buffer)

  (use-package git-gutter
    :custom
    (git-gutter:modified-sign "~")
    (git-gutter:added-sign    "+")
    (git-gutter:deleted-sign  "-")
    :custom-face
    (git-gutter:modified ((t (:background "#f1fa8c"))))
    (git-gutter:added    ((t (:background "#50fa7b"))))
    (git-gutter:deleted  ((t (:background "#ff79c6"))))
    :config
    (global-git-gutter-mode +1))

#+END_SRC

* Evil-Mode

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun x/config-evil-leader ()
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      ","  'avy-goto-char-2
      ":"  'eval-expression

      "A"  'align-regexp

      ;; buffer & bookmark
      "bb" 'switch-to-buffer
      "bo" 'switch-to-buffer-other-window
      "bn" '+copy-current-buffer-name
      "bv" 'revert-buffer
      "bz" 'bury-buffer         ;隐藏当前buffer
      "bZ" 'unbury-buffer         ;反隐藏当前buffer

      "bK" 'kill-other-window-buffer ;;;关闭其他窗口的buffer

      ;; --------------
      "bm" 'bookmark-set
      "bM" 'bookmark-set-no-overwrite
      "bi" 'bookmark-insert
      "br" 'bookmark-rename
      "bd" 'bookmark-delete
      "bw" 'bookmark-write
      "bj" 'bookmark-jump
      "bJ" 'bookmark-jump-other-window
      "bl" 'bookmark-bmenu-list
      "bs" 'bookmark-save

      ;; code
      "cc" 'comment-dwim
      "cd" 'delete-trailing-whitespace
      "cl" 'toggle-truncate-lines
      "cm" 'delete-trailing-M

      ;; dired
      "dj" 'dired-jump
      "dJ" 'dired-jump-other-window

      ;; external Apps
      "eY" 'youdao-dictionary-search-from-input
      "ep" 'plantuml–parse-headlines
      "ej" 'plantuml-display-json-open
      "ey" 'plantuml-display-yaml-open
      "em" 'plantuml-org-to-mindmap-open
      "ew" 'plantuml-org-to-wbs-open
      "ea" 'plantuml-auto-convert-open
      "es" 'my-org-screenshot 
      "eo" 'org-export-docx

      ;; file
      "fa" 'x/save-all
      "fu" 'sudo
      "ff" 'find-file
      "fF" 'find-file-other-frame
      "f/" 'find-file-other-window
      "fC" '+copy-current-file
      "fD" '+delete-current-file
      "fy" '+copy-current-filename
      "fR" '+rename-current-file
      "fr" 'recentf-open-files
      "fl" 'find-file-literally
      "f-" 'text-scale-decrease        ;减小字体大小
      "f=" 'text-scale-increase        ;增加字体大小
      "fe" '(lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory)))
      "fr" '(lambda () (interactive) (load-file (expand-file-name "init.el" user-emacs-directory)))

      ;; magit
      "gs" 'magit-status
      "gb" 'magit-branch-checkout
      "gp" 'magit-pull
      "gB" 'global-blamer-mode
      "gt" 'magit-blame-toggle
      "G"  'aborn/simple-git-commit-push

      ;; project && proxy
      "pf" 'counsel-projectile-find-file
      "pp" 'counsel-projectile-switch-project
      "pb" 'counsel-projectile-switch-to-buffer
      "pk" 'projectile-kill-buffers
      "ps" 'proxy-socks-toggle
      "ph" 'proxy-http-toggle

      ;; search
      "sI" 'imenu
      "s/" 'counsel-rg
      "sj" 'evil-show-jumps
      "sm" 'evil-show-marks
      "sr" 'evil-show-registers
      "si" 'color-rg-search-input
      "ss" 'color-rg-search-symbol-in-project
      "sp" 'color-rg-search-project
      "sl" 'counsel-projectile-rg

      ;; window && frame
      "ww" 'other-window
      "wf" 'other-frame

      ;; fold
      "zA" 'evil-close-folds
      "za" 'evil-open-folds
      "zo" 'evil-open-fold
      "zO" 'evil-open-fold-rec
      "zc" 'evil-close-fold
      "zC" 'evil-close-fold-rec
      "zt" 'evil-toggle-fold

      )
    )

  ;;; UNDO
  ;; Vim style undo not needed for emacs 28
  (use-package undo-fu)

  ;;; Vim Bindings
  (use-package evil
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-u-scroll t)
    (setq evil-esc-delay 0)
    :config
    (evil-mode 1))

  (use-package evil-leader
    :init
    (progn
      (global-evil-leader-mode)
      (setq evil-leader/in-all-states 1)
      (x/config-evil-leader)))

  (use-package evil-collection
    :disabled
    :after evil
    :config
    (evil-collection-init))

  ;; {{ specify major mode uses Evil (vim) NORMAL state or EMACS original state.
  ;; You may delete this setup to use Evil NORMAL state always.
  (dolist (p '((minibuffer-inactive-mode . emacs)
               (eaf-mode . emacs)
               (calendar-mode . emacs)
               (special-mode . emacs)
               (grep-mode . emacs)
               (Info-mode . emacs)
               (term-mode . emacs)
               (sdcv-mode . emacs)
               (anaconda-nav-mode . emacs)
               (log-edit-mode . emacs)
               (vc-log-edit-mode . emacs)
               (magit-log-edit-mode . emacs)
               (magit-status-mode . emacs)
               (erc-mode . emacs)
               (neotree-mode . emacs)
               (w3m-mode . emacs)
               (gud-mode . emacs)
               (help-mode . emacs)
               (eshell-mode . emacs)
               (shell-mode . emacs)
               (xref--xref-buffer-mode . emacs)
               (dashboard-mode . normal)
               (color-rg-mode . emacs)
               (fundamental-mode . normal)
               (woman-mode . emacs)
               (sr-mode . emacs)
               (profiler-report-mode . emacs)
               (dired-mode . normal)
               (compilation-mode . emacs)
               (speedbar-mode . emacs)
               (ivy-occur-mode . emacs)
               (ffip-file-mode . emacs)
               (ivy-occur-grep-mode . normal)
               (messages-buffer-mode . normal)
               ))
    (evil-set-initial-state (car p) (cdr p)))

#+END_SRC

* Org-Mode

** Org

#+BEGIN_SRC emacs-lisp :tangle yes

  (with-eval-after-load 'org

    (require 'org-auto-tangle)
    (add-hook 'org-mode-hook 'org-auto-tangle-mode)

    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))
    (setq-default org-enforce-todo-dependencies t)
    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "blue" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "magenta" :weight bold)
                  ("CANCELLED" :foreground "forest green" :weight bold)
                  ("MEETING" :foreground "forest green" :weight bold)
                  ("PHONE" :foreground "forest green" :weight bold))))
    ;; I don't wan't the keywords in my exports by default
    (setq-default org-export-with-todo-keywords nil)

    ;; (setq org-use-fast-tag-selection t)
    ;; (setq org-fast-tag-selection-single-key 'simple)

    (setq org-odt-preferred-output-format "docx") ;ODT转换格式默认为docx
    ;;(setq org-startup-folded nil)               ;默认展开内容
    (setq org-startup-folded t)                   ;默认展开内容
    (setq org-startup-indented t)                 ;默认缩进内容

    (setq org-log-done 'time
          org-hide-leading-stars t
          org-pretty-entities nil                 ;; 下划线不转下标
          ;; org-export-babel-evaluate t
          org-export-with-sub-superscripts nil    ;; 下划线不转下标
          org-export-headline-levels 5
          org-highlight-latex-and-related '(latex) 
          org-latex-tables-booktabs t            ;; 启用booktabs宏包模式, 额外支持插入一些属性设置
          org-image-actual-width 300 
          org-latex-default-figure-position "H"
          org-ascii-text-width 1000)
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    )

  (use-package org-download
    :ensure t
    :after org
    ;; There is something wrong with `hook`, so redefine it with my own :hook
    :init (add-hook 'org-mode-hook (lambda () (require 'org-download)))
    :config
    (setq-default org-download-image-dir "../images")
    (put 'org-download-image-dir 'safe-local-variable (lambda (_) t)))

  (use-package toc-org
    :hook (org-mode . toc-org-mode))

  (use-package valign
    :defer t
    :ensure t
    :hook ((org-mode . valign-mode))
    :custom ((valign-fancy-bar t)))


  ;;; Show org-mode bullets as UTF-8 characters.
  ;;(use-package org-bars
  ;;  :load-path "~/.emacs.d/vendor/org-bars"
  ;;  :defer t
  ;;  :hook (org-mode . org-bars-mode))
  (use-package org-superstar
    :hook
    (org-mode . (lambda () (org-superstar-mode 1))))

#+END_SRC

** Babel

#+BEGIN_SRC emacs-lisp :tangle yes

  (require 'org-tempo)
  
  (dolist
      (my-org-structure-template
       '(("se" . "src emacs-lisp")
         ("sg" . "src go")
         ("sg" . "src erlang")
         ("sr" . "src rust")
         ("son" . "src :eval never-export"))) ;; https://orgmode.org/manual/Evaluating-Code-Blocks.html
    (add-to-list 'org-structure-template-alist my-org-structure-template))


  ;; ---- org代码块相关的设置
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 2)    ;代码块初始缩进范围
  (setq org-confirm-babel-evaluate nil)

  ;; ;; let stop Org from evaluating code blocks to speed exports.
  ;; File wide using PROPERTY
  ;; #+PROPERTY: header-args :eval never-export

  ;; Org heading wide using a local property setting:
  ;; * sample header
  ;;   :PROPERTIES:
  ;;   :header-args:    :eval never-export
  ;;   :END:
  (setq org-babel-default-header-args '((:eval . "never-export")))

  ;; Define a function to tangle a single code block.
  (defun org-babel-tangle-block()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'org-babel-tangle)
      ))

  (defconst load-language-alist
    '((emacs-lisp . t)
      (perl       . t)
      (python     . t)
      (ruby       . t)
      (js         . t)
      (css        . t)
      (sass       . t)
      (C          . t)
      (java       . t)
      (plantuml   . t))
    "Alist of org ob languages.")

  ;; ob-sh renamed to ob-shell since 26.1.
  (cl-pushnew '(shell . t) load-language-alist)

  (use-package ob-go :init (cl-pushnew '(go . t) load-language-alist))
  (use-package ob-rust :init (cl-pushnew '(rust . t) load-language-alist))

  (org-babel-do-load-languages 'org-babel-load-languages load-language-alist)

#+END_SRC

** Plantuml

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package plantuml-mode
    :ensure t
    :magic ("@startuml" . plantuml-mode)
    :config
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-options "-charset UTF-8")
    (setq plantuml-jar-path plantuml-path))
  (setq org-plantuml-jar-path plantuml-path)
  (setq plantuml-default-exec-mode 'jar)

  (use-package plantuml
    :load-path "~/.emacs.d/vendor/plantuml-emacs"
    :config
    (setq plantuml-jar-path plantuml-path
          plantuml-output-type "png"
          plantuml-relative-path "./images/"
          plantuml-theme "plain"
          plantuml-font "somefont"
          plantuml-add-index-number t
          plantuml-log-command t
          plantuml-mindmap-contains-org-content t
          plantuml-org-headline-bold t))

  (defun recompile-plantuml () (add-hook 'after-save-hook (lambda () (call-process "plantuml" nil nil nil (buffer-name)))))
  (add-hook 'org-babel-after-execute-hook (lambda () (when org-inline-image-overlays (org-redisplay-inline-images))))

#+END_SRC

** OrgToLatex

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; 先安装 LaTex 完整版, MacTeX
  ;; https://orgmode.org/worg/org-dependencies.html
  ;; pip3 install pygments
  ;; sudo tlmgr update --self --all
  ;; sudo tlmgr install minted
  ;; sudo tlmgr install ctex environ trimspaces zhnumber cjk

  (require 'ox-latex)
  (setq org-latex-classes
        '(("zxh-latex-class"
           "
      \\documentclass[12pt,a4paper]{article}
      [DEFAULT-PACKAGES]
      [PACKAGES]
      \\setsansfont{Source Han Sans SC}
      \\setromanfont{Source Han Serif SC}
      \\setmonofont[Scale=0.9]{Inziu Iosevka Slab SC}
      \\newfontfamily\\quotefont{Source Han Serif SC}
      \\newfontfamily\\headfootfont{Source Han Sans SC}
      \\AtBeginEnvironment{quote}{\\quotefont\\small}
      \\XeTeXlinebreaklocale ``zh''
      \\XeTeXlinebreakskip = 0pt plus 1pt
      \\linespread{1.0}
      \\hypersetup{
        colorlinks=true,
        linkcolor=[rgb]{0,0.37,0.53},
        citecolor=[rgb]{0,0.47,0.68},
        filecolor=[rgb]{0,0.37,0.53},
        urlcolor=[rgb]{0,0.37,0.53},
        pagebackref=true,
        linktoc=all,}
      \\renewcommand{\\headrulewidth}{0.4pt}
      \\renewcommand{\\footrulewidth}{0.4pt}
      \\pagestyle{fancy}
      \\fancyfoot[C]{} % Clear page number
      \\fancyhead[RE]{\\headfootfont\\small\\leftmark} % 在偶数页的右侧显示章名
      \\fancyhead[LO]{\\headfootfont\\small\\rightmark} % 在奇数页的左侧显示小节名
      \\fancyhead[LE,RO]{\\headfootfont\\small~\\thepage~} % 在偶数页的左侧，奇数页的右侧显示页码
      [EXTRA]
      "
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  ;; [FIXME]
  ;; 原本是不要讓 org 插入 hypersetup（因為 org-mode 這部份設計成沒辦法自訂，或許可以去 report 一下？
  ;; 改成自行插入，但這樣 pdfcreator 沒辦法根據 Emacs 版本插入，pdfkeyword 也會無效...幹。
  (setq org-latex-with-hyperref t)

  ;; Export source code using minted
  (setq org-latex-listings 'minted)

  (setq org-latex-default-packages-alist
        '(("" "nopageno" t)
          ("" "hyperref" t)
          ("" "fontspec" t)
          ("" "etoolbox" t) ;; Quote 部份的字型設定
          ("margin=2cm" "geometry" nil)
          ;; ("AUTO" "inputenc" t)
          ;; ("" "fixltx2e" nil)
          ("dvipdfmx" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "multicol" t)  ; 這是我另外加的，因為常需要多欄位文件版面。
          ("" "amssymb" t)
          ("" "fancyhdr" nil) ;; 页眉页脚
          ("cache=false" "minted" nil) ;; Code color
          "\\tolerance=1000"))

  ;; Use XeLaTeX to export PDF in Org-mode
  ;; (setq org-latex-pdf-process
  ;;       '("xelatex -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "rm -fr %b.out %b.log %b.tex %b.brf %b.bbl"
          ))
  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . "xdg-open %s")
                        ("\\.pdf\\'" . "open -a Skim %s")
                        ("\\.jpg\\'" . "kde-open %s")))

#+END_SRC

** Latex

#+begin_src emacs-lisp :tangle yes

  (use-package cdlatex
    :defer t
    :ensure t
    :config
    (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))

  (use-package auctex :defer t :ensure t)
  (load "auctex.el" nil t t)
  ;;(load "preview-latex.el" nil t t)
  (if (string-equal system-type "windows-nt")
      (require 'tex-mik))


  ;; Ask which tex file is master instead of always assume current file is master file.
  (setq-default TeX-master nil) ; Query for master file.

  (mapc (lambda (mode)
          (add-hook 'LaTeX-mode-hook mode))
        (list 'LaTeX-math-mode
              'turn-on-reftex
              'linum-mode))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (setq TeX-auto-untabify t     ; remove all tabs before saving
                    TeX-engine 'xetex       ; use xelatex default
                    TeX-show-compilation t) ; display compilation windows
              (TeX-global-PDF-mode t)       ; PDF mode enable, not plain
              (setq TeX-save-query nil)
              (imenu-add-menubar-index)
              (define-key LaTeX-mode-map (kbd "TAB") 'TeX-complete-symbol)))

#+end_src

* Programming

#+BEGIN_SRC emacs-lisp :tangle yes

  ;;---------------------------------------------------------
  ;; Golang
  (use-package go-mode)

  ;;---------------------------------------------------------
  ;; Erlang Install
  ;; 0) install openssl-devel
  ;; 1) Resource install
  ;;   wget http://erlang.org/download/otp_src_22.3.tar.gz
  ;;   tar zxvf otp_src_22.3.tar.gz
  ;;   cd otp_src_22.3
  ;;   ./configure --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-java
  ;;   ./configure --with-ssl && sudo make && sudo  make install
  ;;
  ;; 2) MacOS && Unix use
  ;;   brew install erlang@23
  ;;   brew install erlang

  ;; 3) use asdf
  ;;   asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git
  ;;   asdf plugin-add rebar https://github.com/Stratus3D/asdf-rebar.git

  ;;   export KERL_BUILD_DOCS=yes                                                    
  ;;   export KERL_INSTALL_MANPAGES=yes                                              
  ;;   export KERL_CONFIGURE_OPTIONS="--disable-debug --without-javac --without-odbc --without-jinterface --with-ssl=$(brew --prefix openssl)"
  ;;   export CFLAGS="-O2 -g -fno-stack-check -Wno-error=implicit-function-declaration"

  ;;   asdf install rebar 3.20.0
  ;;   which rebar3
  ;;   asdf install erlang 24.3.4

  ;;   asdf global rebar  3.20.0
  ;;   asdf global erlang 24.3.4
  ;;   asdf local  erlang 24.3.4
  ;;
  ;;---------------------------------------------------------
  (let* ((tools-version erlang-lib-tools-version)
         (path-prefix erlang-path-prefix)
         (tools-path
          (concat path-prefix "/lib/tools-" tools-version "/emacs")))
    (when (file-exists-p tools-path)
      (setq load-path (cons tools-path load-path))
      (setq erlang-root-dir (concat path-prefix "/erlang"))
      (setq exec-path (cons (concat path-prefix "/bin") exec-path))
      (require 'erlang-start)
      (defvar inferior-erlang-prompt-timeout t)))

  ;;---------------------------------------------------------
  ;; C/C++ Mode
  (use-package cc-mode
    :ensure nil
    :bind (:map c-mode-base-map
                ("C-c c" . compile))
    :hook (c-mode-common . (lambda () (c-set-style "stroustrup")))
    :init (setq-default c-basic-offset 4)
    :config
    (use-package modern-cpp-font-lock
      :init (modern-c++-font-lock-global-mode t)))

  ;;---------------------------------------------------------
  ;; Python Mode
  ;; Install: pip install pyflakes autopep8
  (use-package python
    :ensure nil
    :hook (inferior-python-mode . (lambda ()
                                    (process-query-on-exit-flag
                                     (get-process "Python"))))
    :init
    ;; Disable readline based native completion
    (setq python-shell-completion-native-enable nil)
    :config
    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems stupidly make the unversioned one point at Python 2.
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))

    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))

    ;; Live Coding in Python
    (use-package live-py-mode))

  ;;;---------------------------------------------------------
  ;; rust
  ;; brew install rust-analyzer
  ;; rustup component add rust-src rustfmt clippy rls rust-analysis
  ;;;---------------------------------------------------------
  ;;(use-package lsp-mode
  ;;:init
  ;;:custom
  ;;(lsp-eldoc-render-all t)
  ;;(lsp-idle-delay 0.6)
  ;;; enable / disable the hints as you prefer:
  ;;(lsp-rust-analyzer-server-display-inlay-hints t)
  ;;(lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  ;;(lsp-rust-analyzer-display-chaining-hints t)
  ;;(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  ;;(lsp-rust-analyzer-display-closure-return-type-hints t)
  ;;(lsp-rust-analyzer-display-parameter-hints nil)
  ;;(lsp-rust-analyzer-display-reborrow-hints nil)
  ;;)
  (use-package rust-mode
    ;;:hook ((rust-mode . my/rust-lsp))
    :config
    (setq rust-format-on-save t)
    (defun my/rust-lsp ()
      (setq-local lsp-completion-enable nil
                  compile-command "cargo build")
      ))

  ;;---------------------------------------------------------
  ;; Other languages
  ;;---------------------------------------------------------
  (use-package sh-script :defer t :config (setq sh-basic-offset 4))
  (use-package lua-mode  :defer t :config (add-hook 'lua-mode-hook #'company-mode))
  (use-package yaml-mode :defer t :config (add-hook 'yaml-mode-hook #'flycheck-mode))
  (use-package flycheck-yamllint
    :defer t
    :init
    (progn (eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))

#+END_SRC

* AutoInsert

#+BEGIN_SRC emacs-lisp :tangle yes

  (load "autoinsert")
  (auto-insert-mode)
  (setq auto-insert t)
  (setq auto-insert-query t)
  (add-hook 'find-file-hooks 'auto-insert)
  (setq auto-insert-alist
        (append '(
                  (("\\.go$" . "golang header")
                   nil
                   "//---------------------------------------------------------------------\n"
                   "// @Copyright (c) 2020-2021 GLD Enterprise, Inc. (https://glodon.com)\n"
                   "// @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
                   "// @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                   "//----------------------------------------------------------------------\n"
                   _
                   ))
                auto-insert-alist))
  (setq auto-insert-alist
        (append '(
                  (("\\.erl$" . "erlang header")
                   nil
                   "%%%-------------------------------------------------------------------\n"
                   "%%% @Copyright (c) 2020-2021 GLD Enterprise, Inc. (https://glodon.com)\n"
                   "%%% @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
                   "%%% @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                   "%%%-------------------------------------------------------------------\n"
                   _
                   ))
                auto-insert-alist))
  (setq auto-insert-alist
        (append '(
                  (("\\.org$" . "org header")
                   nil
                   "#+title: TODO\n"
                   "#+author: 周学浩\n"
                   "#+email: zhouxh-e@glodon.com\n"
                   "#+date:" (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                   "#+OPTIONS: ^:nil\n"
                   "#+OPTIONS: toc:nil\n"
                   "#+LATEX_CLASS: zxh-latex-class\n"
                   "#+LATEX_HEADER: \\hypersetup{colorlinks=true,linkcolor=blue}\n"
                   "#+LATEX_HEADER: \\makeatletter \\def\\@maketitle{\\null \\begin{center} {\\vskip 5em \\Huge \\@title} \\vskip 30em {\\LARGE \\@author} \\vskip 3em {\\LARGE \\@date} \\end{center} \\newpage} \\makeatother\n\n"
                   "* 目录 :TOC_2_org:"
                   _
                   ))
                auto-insert-alist))

#+END_SRC

* Tramp

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Remote SSH
  ;; C-x C-f /remotehost:filename RET (or /method:user@remotehost:filename)
  ;; type C-x C-f /ssh:root@ssb.willschenk.com:/etc/host= it connects over ssh to the remote server and edits that file.
  ;; dired mode also works, so if you want to move around just C-x C-f and select the directory, then you can navigate around as you normally would.
  ;; C-x C-f /sudo::/etc/hosts
  ;; Another fun trick is to edit a file inside of a docker container. Is this what docker is used for? No,
  ;; but it’s sometimes useful if you are debugging a docker file or whatever and need a tigher feedback loop.
  (use-package tramp
    :ensure nil
    :defer t
    :custom
    (setq tramp-use-ssh-controlmaster-options nil)
    (setq tramp-default-method "ssh"))

#+END_SRC

* Font

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; stolen from https://github.com/cabins/.emacs.d/blob/dev/lisp/init-ui.el
  ;; adjust the fonts
  (require 'subr-x)

  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))

  (defun cabins/font-setup ()
    "Font setup."

    (interactive)
    (when (display-graphic-p)
      ;; Default font
      (cl-loop for font in '("Monaco" "Hack" "Consolas" "Source Code Pro" "Menlo" "DejaVu Sans Mono")
               when (font-installed-p font)
               return (set-face-attribute 'default nil :family font))

      ;; Unicode characters
      (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
               when (font-installed-p font)
               return (set-fontset-font t 'unicode font nil 'prepend))

      ;; Emoji
      (cl-loop for font in '("Noto Color Emoji" "Apple Color Emoji")
               when (font-installed-p font)
               return (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend))

      ;; Chinese characters
      (cl-loop for font in '("FZLanTingHeiS-EL-GB" "PingFang SC" "Microsoft Yahei UI" "Microsoft Yahei" "STFangsong")
               when (font-installed-p font)
               return (progn
                                          ;(setq face-font-rescale-alist `((,font . 1.2)))
                        (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family font))))))

  (add-hook 'emacs-startup-hook 'cabins/font-setup)
  (when (daemonp) (add-hook 'after-make-frame-functions (lambda (frame) (with-selected-frame frame (cabins/font-setup)))))

  (set-face-attribute 'default nil :height 140)


#+END_SRC

* Rime

#+BEGIN_SRC emacs-lisp :tangle yes
  
  (use-package rime
    :bind
    (:map rime-active-mode-map
          ("<tab>" . 'rime-inline-ascii)
          :map rime-mode-map
          ("C-`" . 'rime-send-keybinding) 
          ("M-j" . 'rime-force-enable))
    :custom
    (when (x/system-is-mac)
      (setq rime-librime-root "~/.emacs.d/librime/dist")
      (setq rime-share-data-dir "~/Library/Rime")
      (setq rime-emacs-module-header-root emacs-module-header-root))
    (when (x/system-is-linux)
      (when (and (x/system-is-mac) (executable-find "nix"))
        (setq rime-emacs-module-header-root
              (concat (shell-command-to-string "nix eval --raw 'nixpkgs#emacs.outPath'") "/include")
              rime-librime-root
              (shell-command-to-string "nix eval --raw 'nixpkgs#librime.outPath'")
              rime-share-data-dir
              (concat (shell-command-to-string "nix eval --raw 'nixpkgs#brise.outPath'") "/share/rime-data"))))
    :config
    (setq rime-title " ㄓ")
    (setq rime-posframe-properties
          (list :background-color "#333333"
                :foreground-color "#dcdccc"
                :font "PingFang SC"
                :internal-border-width 10))
    ;;;; (setq rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g"))
    (setq default-input-method "rime"
          rime-show-candidate 'posframe
          rime-posframe-style 'vertical)
    (setq rime-disable-predicates '(rime-predicate-evil-mode-p
                                    rime-predicate-space-after-cc-p
                                    rime-predicate-after-alphabet-char-p
                                    rime-predicate-prog-in-code-p
                                    rime-predicate-tex-math-or-command-p
                                    rime-predicate-current-uppercase-letter-p
                                    rime-predicate-after-ascii-char-p)))

#+END_SRC

* Platform

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; macos
  (when (x/system-is-mac)

    ;; Keyboard 
    (setq echo-keystrokes 0.1)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
    ;; (setq mac-command-modifier       'super   ;; s: super(Command/Win)
    ;;       mac-control-modifier       'control ;; C: Ctrl
    ;;       mac-option-modifier        'meta    ;; M: Meta (Option/Alt)
    ;;       )

    ;; Copy/Paste
    (defun copy-from-osx ()
      (shell-command-to-string "pbpaste"))

    (defun paste-to-osx (text &optional push)
      (let ((process-connection-type nil))
        (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
          (process-send-string proc text)
          (process-send-eof proc))))

    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx)

    ;; Move to Trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash/emacs")
    (defun system-move-file-to-trash (file)
      "Use \"trash\" to move FILE to the system trash.
        When using Homebrew, install it using \"brew install trash\"."
      (call-process (executable-find "trash")
                    nil 0 nil
                    file))

    ;; Done
    (message "Wellcome To Mac OS X, Have A Nice Day!!!"))


  ;; linux
  (when (x/system-is-linux)
    (defun yank-to-x-clipboard ()
      (interactive)
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!"))))

#+END_SRC

* Lazycat Plugins

#+BEGIN_SRC emacs-lisp :tangle yes

  ;;(require 'visual-regexp)
  ;;(setq vr/match-separator-use-custom-face t)
  ;;(setq vr/match-separator-string "⇛")
  (require 'posframe)
  (require 'lazycat-toolkit)
  (require 'goto-chg)
  (require 'watch-other-window)
  (require 'thing-edit)
  (require 'color-rg)

  (require 'sort-tab)
  (sort-tab-mode 1)

  (require 'auto-save)
  (auto-save-enable)
  (setq auto-save-silent t)
  (setq auto-save-delete-trailing-whitespace nil)

  (require 'lazycat-theme)
  (setq-default mode-line-format (remove 'mode-line-buffer-identification mode-line-format))
  (lazycat-theme-load-dark)
  ;;(lazycat-theme-load-with-sunrise)

  (require 'awesome-tray)
  (setq awesome-tray-active-modules '("location" "belong" "file-path" "mode-name" "last-command" "battery" "date"))
  (awesome-tray-mode 1)

  ;; ----------------------------------------------------------
  ;; auto mode
  (defun add-to-alist (alist-var elt-cons &optional no-replace)
    "Add to the value of ALIST-VAR an element ELT-CONS if it isn't there yet.
                  If an element with the same car as the car of ELT-CONS is already present,
                  replace it with ELT-CONS unless NO-REPLACE is non-nil; if a matching
                  element is not already present, add ELT-CONS to the front of the alist.
                  The test for presence of the car of ELT-CONS is done with `equal'."
    (let ((existing-element (assoc (car elt-cons) (symbol-value alist-var))))
      (if existing-element
          (or no-replace
              (rplacd existing-element (cdr elt-cons)))
        (set alist-var (cons elt-cons (symbol-value alist-var)))))
    (symbol-value alist-var))

  (dolist (elt-cons '(
                      ("\\.markdown" . markdown-mode)
                      ("\\.md" . markdown-mode)
                      ("\\.stumpwmrc\\'" . lisp-mode)
                      ("\\.[hg]s\\'" . haskell-mode)
                      ("\\.hi\\'" . haskell-mode)
                      ("\\.hs-boot\\'" . haskell-mode)
                      ("\\.chs\\'" . haskell-mode)
                      ("\\.l[hg]s\\'" . literate-haskell-mode)
                      ("\\.inc\\'" . asm-mode)
                      ("\\.max\\'" . maxima-mode)
                      ("\\.org\\'" . org-mode)
                      ("\\.cron\\(tab\\)?\\'" . crontab-mode)
                      ("cron\\(tab\\)?\\." . crontab-mode)
                      ("\\.py$" . python-mode)
                      ("SConstruct". python-mode)
                      ("\\.jl\\'" . lisp-mode)
                      ("\\.asdf\\'" . lisp-mode)
                      ("CMakeLists\\.txt\\'" . cmake-mode)
                      ("\\.cmake\\'" . cmake-mode)
                      ("\\.php\\'" . php-mode)
                      ("\\.vue" . web-mode)
                      ("\\.wxml" . web-mode)
                      ("\\.phtml\\'" . web-mode)
                      ("\\.tpl\\.php\\'" . web-mode)
                      ("\\.as[cp]x\\'" . web-mode)
                      ("\\.erb\\'" . web-mode)
                      ("\\.mustache\\'" . web-mode)
                      ("\\.djhtml\\'" . web-mode)
                      ("\\.html?\\'" . web-mode)
                      ("\\.js.erb\\'" . js-mode)
                      ("\\.css\\'" . css-mode)
                      ("\\.wxss\\'" . css-mode)
                      ("\\.jade" . jade-mode)
                      ("\\.go$" . go-mode)
                      ("\\.rs$" . rust-mode)
                      ("\\.pro$" . qmake-mode)
                      ("\\.js$" . js-mode)
                      ("\\.wxs$" . js-mode)
                      ("\\.jsx$" . web-mode)
                      ("\\.lua$" . lua-mode)
                      ("\\.y$" . bison-mode)
                      ("\\.pdf$" . pdf-view-mode)
                      ("\\.ts$" . typescript-mode)
                      ("\\.tsx$" . typescript-mode)
                      ("\\.cpp$" . c++-mode)
                      ("\\.h$" . c++-mode)
                      ("\\.ll$" . llvm-mode)
                      ("\\.bc$" . hexl-mode)
                      ("\\.nim$" . nim-mode)
                      ("\\.nims$" . nim-mode)
                      ("\\.nimble$" . nim-mode)
                      ("\\.nim.cfg$" . nim-mode)
                      ("\\.exs$" . elixir-mode)
                      ("\\.erl$" . erlang-mode)
                      ("\\.schema$" . erlang-mode)
                      ("rebar\\.config$" . erlang-mode)
                      ("relx\\.config$" . erlang-mode)
                      ("sys\\.config\\.src$" . erlang-mode)
                      ("sys\\.config$" . erlang-mode)
                      ("\\.config\\.src?$" . erlang-mode)
                      ("\\.config\\.script?$" . erlang-mode)
                      ("\\.hrl?$" . erlang-mode)
                      ("\\.app?$" . erlang-mode)
                      ("\\.app.src?$" . erlang-mode)
                      ("\\Emakefile" . erlang-mode)
                      ("\\.json$" . json-mode)
                      ("\\.clj$" . clojure-mode)
                      ("\\.plantuml$" . plantuml-mode)
                      ))
    (add-to-alist 'auto-mode-alist elt-cons))


  ;;---------------------------------------------------------
  ;; Line numbers are not displayed when large files are used.
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'java-mode-hook
                 'asm-mode-hook
                 'haskell-mode-hook
                 'rcirc-mode-hook
                 'erc-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'html-mode-hook
                 'css-mode-hook
                 'tuareg-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'markdown-mode-hook
                 'slime-repl-mode-hook
                 'package-menu-mode-hook
                 'cmake-mode-hook
                 'php-mode-hook
                 'web-mode-hook
                 'sws-mode-hook
                 'jade-mode-hook
                 'vala-mode-hook
                 'rust-mode-hook
                 'ruby-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nxml-mode-hook
                 'nim-mode-hook
                 'typescript-mode-hook
                 'elixir-mode-hook
                 'erlang-mode-hook
                 'clojure-mode-hook
                 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))

  ;;----------------------------------------------------------
  ;; fingertip
  (when (or (string-match "Emacs 30." (emacs-version))
            (string-match "Emacs 31." (emacs-version)))
    (require 'fingertip)
    (message "For Emacs 29+, load fingertip")
    (dolist (hook (list
                   'c-mode-common-hook
                   'c-mode-hook
                   'c++-mode-hook
                   'java-mode-hook
                   'haskell-mode-hook
                   'emacs-lisp-mode-hook
                   'lisp-interaction-mode-hook
                   'lisp-mode-hook
                   'maxima-mode-hook
                   'ielm-mode-hook
                   'sh-mode-hook
                   'makefile-gmake-mode-hook
                   'php-mode-hook
                   'python-mode-hook
                   'js-mode-hook
                   'go-mode-hook
                   'qml-mode-hook
                   'jade-mode-hook
                   'css-mode-hook
                   'ruby-mode-hook
                   'coffee-mode-hook
                   'rust-mode-hook
                   'qmake-mode-hook
                   'lua-mode-hook
                   'swift-mode-hook
                   'web-mode-hook
                   'markdown-mode-hook
                   'llvm-mode-hook
                   'conf-toml-mode-hook
                   'nim-mode-hook
                   'typescript-mode-hook

                   'c-ts-mode-hook
                   'c++-ts-mode-hook
                   'cmake-ts-mode-hook
                   'toml-ts-mode-hook
                   'css-ts-mode-hook
                   'js-ts-mode-hook
                   'json-ts-mode-hook
                   'python-ts-mode-hook
                   'bash-ts-mode-hook
                   'typescript-ts-mode-hook
                   ))
      (add-hook hook #'(lambda () (fingertip-mode 1))))
    )


  ;;----------------------------------------------------------
  ;; https://github.com/manateelazycat/lazycat-emacs
  (require 'lsp-bridge)
  (require 'lsp-bridge-jdtls)

            ;;; Code:

  (setq acm-enable-quick-access t)
  (setq acm-backend-yas-match-by-trigger-keyword t)

  (global-lsp-bridge-mode)

  ;; 打开日志，开发者才需要
  ;; (setq lsp-bridge-enable-log t)

  ;; 融合 `lsp-bridge' `find-function' 以及 `dumb-jump' 的智能跳转
  (defun lsp-bridge-jump ()
    (interactive)
    (cond
     ((eq major-mode 'emacs-lisp-mode)
      (let ((symb (function-called-at-point)))
        (when symb
          (find-function symb))))
     (lsp-bridge-mode
      (lsp-bridge-find-def))
     (t
      (require 'dumb-jump)
      (dumb-jump-go))))

  (defun lsp-bridge-jump-back ()
    (interactive)
    (cond
     (lsp-bridge-mode
      (lsp-bridge-find-def-return))
     (t
      (require 'dumb-jump)
      (dumb-jump-back))))

  (setq lsp-bridge-get-single-lang-server-by-project
        (lambda (project-path filepath)
          ;; If typescript file include deno.land url, then use Deno LSP server.
          (save-excursion
            (when (string-equal (file-name-extension filepath) "ts")
              (dolist (buf (buffer-list))
                (when (string-equal (buffer-file-name buf) filepath)
                  (with-current-buffer buf
                    (goto-char (point-min))
                    (when (search-forward-regexp (regexp-quote "from \"https://deno.land") nil t)
                      (return "deno")))))))))

  ;; session 
  (require 'basic-toolkit)
  (setq desktop-load-locked-desktop t) ; don't popup dialog ask user, load anyway
  (setq desktop-restore-frames nil)    ; don't restore any frame

  (defun emacs-session-restore ()
    "Restore emacs session."
    (interactive)
    (ignore-errors
      ;; Kill other windows.
      (delete-other-windows)
      ;; Kill unused buffers.
      (kill-unused-buffers)
      ;; Restore session.
      (desktop-read "~/.emacs.d/")
      ))

  (defun emacs-session-save (&optional arg)
    "Save emacs session."
    (interactive "p")
    (ignore-errors
      (if (equal arg 4)
          ;; Kill all buffers if with prefix argument.
          (mapc 'kill-buffer (buffer-list))
        ;; Kill unused buffers.
        (kill-unused-buffers)
        ;; Save all buffers before exit.
        (auto-save-buffers))
      ;; Save session.
      (make-directory "~/.emacs.d/" t)
      (desktop-save "~/.emacs.d/")
      ;; Exit emacs.
      (kill-emacs)))
  (emacs-session-restore)

#+END_SRC

* Eaf

#+BEGIN_SRC emacs-lisp :tangle yes

  (require 'eaf)
  (require 'eaf-browser)
  (require 'eaf-git)

#+END_SRC

* Key-Bindings

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; ------------------------------------------------------------------------------------------------
  ;;           X-mode KeyBindings   C-h b/k 找到快捷键: M: comand, S: option, C: Control
  ;; ------------------------------------------------------------------------------------------------
  (define-key dired-mode-map     (kbd "e")   'wdired-change-to-wdired-mode)

  ;;-----------------------
  ;;company-active-map
  (define-key company-active-map (kbd "TAB") 'company-complete-selection)
  (define-key company-active-map (kbd "M-h") 'company-complete-selection)
  (define-key company-active-map (kbd "M-H") 'company-complete-common)
  (define-key company-active-map (kbd "M-w") 'company-show-location)
  (define-key company-active-map (kbd "M-s") 'company-search-candidates)
  (define-key company-active-map (kbd "M-S") 'company-filter-candidates)
  (define-key company-active-map (kbd "M-n") 'company-select-next)
  (define-key company-active-map (kbd "M-p") 'company-select-previous)
  (define-key company-active-map (kbd "M-i") 'yas-expand)

  ;;-----------------------
  ;;my-window-map
  (defun set-control-w-shortcuts ()
    (define-prefix-command 'my-window-map)
    (global-set-key (kbd "C-w") 'my-window-map)
    (define-key my-window-map (kbd "h") 'windmove-left)
    (define-key my-window-map (kbd "j") 'windmove-down)
    (define-key my-window-map (kbd "k") 'windmove-up)
    (define-key my-window-map (kbd "l") 'windmove-right)
    (define-key my-window-map (kbd "v") 'split-window-right)
    (define-key my-window-map (kbd "b") 'split-window-below)
    (define-key my-window-map (kbd "d") 'delete-window)
    (define-key my-window-map (kbd "D") 'delete-other-windows)
    (define-key my-window-map (kbd "B") 'kill-buffer-and-window)
    (define-key my-window-map (kbd "o") 'toggle-one-window))

  (set-control-w-shortcuts)
  (eval-after-load "evil-maps"
    '(progn
       (dolist (map '(evil-motion-state-map
                      evil-insert-state-map
                      evil-emacs-state-map
                      evil-window-map))
         (define-key (eval map) "\C-w" nil)
         (set-control-w-shortcuts))))

  ;;-----------------------
  ;; org-mode-map
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-h") nil)
    (define-key org-mode-map (kbd "C-,") nil))


  ;;-----------------------
  ;; evilmode-map
  (with-eval-after-load 'evil
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (define-key evil-normal-state-map (kbd "C-t") nil)
    (define-key evil-normal-state-map (kbd "C-]") nil)
    (define-key evil-normal-state-map (kbd "/")  'swiper)
    (define-key evil-motion-state-map (kbd "C-6") nil))


  ;; ------------------------------------------------------------------------------------------------
  ;;                 Global KeyBindings:  C-h b/k 找到快捷键bind -> ReMap it
  ;; ------------------------------------------------------------------------------------------------
  (require 'lazy-load)
  ;; --- 卸载按键, 全局按键的卸载
  (lazy-load-unset-keys  
   '("C-x C-f" "C-q" "s-T" "s-W" "s-z" "M-h" "C-x C-c" "s-c" "s-x" "s-v" "C-6" "M-." "M-,"))
  ;; '("C-x C-f" "C-z" "C-q" "s-T" "s-W" "s-z" "M-h" "C-x C-c" "C-\\" "s-c" "s-x" "s-v" "C-6" "M-." "M-,"))

  (global-set-key (kbd "<f5>")    'emacs-session-save) ;退出emacs
  (global-set-key (kbd "C-,")     'goto-last-change)
  (global-set-key (kbd "C-4")     'insert-changelog-date)
  (global-set-key (kbd "C-5")     'insert-standard-date)


  (global-set-key (kbd "M-7")     'sort-tab-select-prev-tab)
  (global-set-key (kbd "M-8 ")    'sort-tab-select-next-tab)
  (global-set-key (kbd "M-s-7")   'sort-tab-select-first-tab)
  (global-set-key (kbd "M-s-8")   'sort-tab-select-last-tab)
  (global-set-key (kbd "C-;")     'sort-tab-close-current-tab)
  (global-set-key (kbd "s-q")     'sort-tab-close-mode-tabs)
  (global-set-key (kbd "s-Q")     'sort-tab-close-all-tabs)

  (global-set-key (kbd "C-x C-f") 'ido-find-file)
  (global-set-key (kbd "C-x b")   'ido-switch-buffer)
  (global-set-key (kbd "C-x i")   'ido-insert-buffer)
  (global-set-key (kbd "C-x I")   'ido-insert-file)

  (global-set-key (kbd "M-n")     'hold-line-scroll-down)
  (global-set-key (kbd "M-p")     'hold-line-scroll-up)
  (global-set-key (kbd "M-]")     'watch-other-window-up)
  (global-set-key (kbd "M-[")     'watch-other-window-down)
  (global-set-key (kbd "M->")     'watch-other-window-up-line)
  (global-set-key (kbd "M-<")     'watch-other-window-down-line)

  (global-set-key (kbd "C-x y")   'dash-at-point)
  (global-set-key (kbd "M-]")     'dumb-jump-go)
  (global-set-key (kbd "M-t")     'dumb-jump-back)

  (global-set-key (kbd "C-/")     'undo-tree-undo)
  (global-set-key (kbd "C-?")     'undo-tree-redo)

  (global-set-key (kbd "C-c SPC") 'avy-goto-char-2)
  (global-set-key (kbd "M-g f")   'avy-goto-line)
  (global-set-key (kbd "M-g w")   'avy-goto-word-1)

  (global-set-key (kbd "C-M-s")   'color-rg-search-input)
  (global-set-key (kbd "C-M-;")   'magit-status)
  (global-set-key (kbd "C-x G")   'git-messenger:popup-message)

  ;; 语法跳转
  (global-set-key (kbd "C-7")     'lsp-bridge-jump-back)
  (global-set-key (kbd "C-8")     'lsp-bridge-jump)
  (global-set-key (kbd "M-,")     'lsp-bridge-code-action) 
  (global-set-key (kbd "M-.")     'lsp-bridge-find-references) 
  (global-set-key (kbd "C-9")     'lsp-bridge-popup-documentation)
  (global-set-key (kbd "C-0")     'lsp-bridge-rename) 
  (global-set-key (kbd "M-s-k")   'lsp-bridge-diagnostic-jump-prev)            ;显示上一个错误 
  (global-set-key (kbd "M-s-l")   'lsp-bridge-diagnostic-ignore)               ;忽略当前的错误
  (global-set-key (kbd "M-s-n")   'lsp-bridge-popup-documentation-scroll-up)   ;向下滚动文档
  (global-set-key (kbd "M-s-p")   'lsp-bridge-popup-documentation-scroll-down) ;向上滚动文档


  (when (or (string-match "Emacs 30." (emacs-version))
            (string-match "Emacs 31." (emacs-version)))
    ;; ### Fingertip ###
    ;; --- 结构化编程
    (lazy-load-unset-keys
     '("M-J" "M-r" "M-s" "M-;" "C-M-f" "C-M-b" "M-)")
     fingertip-mode-map)             ;卸载按键
    (defvar fingertip-key-alist nil)
    (setq fingertip-key-alist
          '(
            ;; 移动
            ("M-n" . fingertip-jump-left)
            ("M-p" . fingertip-jump-right)
            ;; 符号插入
            ("%" . fingertip-match-paren)       ;括号跳转
            ("(" . fingertip-open-round)        ;智能 (
            ("[" . fingertip-open-bracket)      ;智能 [
            ("{" . fingertip-open-curly)        ;智能 {
            (")" . fingertip-close-round)       ;智能 )
            ("]" . fingertip-close-bracket)     ;智能 ]
            ("}" . fingertip-close-curly)       ;智能 }
            ("\"" . fingertip-double-quote)     ;智能 "
            ("'" . fingertip-single-quote)      ;智能 '
            ("=" . fingertip-equal)             ;智能 =
            ("SPC" . fingertip-space)           ;智能 space
            ("RET" . fingertip-newline)         ;智能 newline
            ;; 删除
            ("M-o" . fingertip-backward-delete) ;向后删除
            ("C-d" . fingertip-forward-delete)  ;向前删除
            ("C-k" . fingertip-kill)            ;向前kill
            ;; 包围
            ("M-\"" . fingertip-wrap-double-quote) ;用 " " 包围对象, 或跳出字符串
            ("M-'" . fingertip-wrap-single-quote) ;用 ' ' 包围对象, 或跳出字符串
            ("M-[" . fingertip-wrap-bracket)      ;用 [ ] 包围对象
            ("M-{" . fingertip-wrap-curly)        ;用 { } 包围对象
            ("M-(" . fingertip-wrap-round)        ;用 ( ) 包围对象
            ("M-)" . fingertip-unwrap)            ;去掉包围对象
            ;; 跳出并换行缩进
            ("M-:" . fingertip-jump-out-pair-and-newline) ;跳出括号并换行
            ;; 向父节点跳动
            ("C-j" . fingertip-jump-up)
            ))
    (lazy-load-set-keys fingertip-key-alist fingertip-mode-map)
    )

  ;; (global-set-key (kbd "C-c p f") 'projectile-find-file)
  ;; (global-set-key (kbd "C-c p b") 'projectile-switch-to-buffer)
  ;; (global-set-key (kbd "C-c p p") 'projectile-switch-project)

#+END_SRC
