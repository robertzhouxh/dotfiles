* Introduce
 use it, just clone this repo to whereever your emacs config is (usually =/home/$(USER)/.emacs.d=)
* Header
#+PROPERTY: header-args :results silent
* Custom Var
#+BEGIN_SRC emacs-lisp :tangle yes

  ; /usr/local/lib/erlang/lib/tools-{erlang-version}
  ; /usr/local/opt/erlang@23/lib/erlang/lib/tools-
  (setq erlang-version "3.5.2")
  (setq erlang-ls "/Users/glodon/githubs/erlang_ls/_build/default/bin/erlang_ls")
  (setq plantuml-path "/usr/local/Cellar/plantuml/1.2022.1/libexec/plantuml.jar")
  (setq centaur-proxy "127.0.0.1:8123")          ; HTTP/HTTPS proxy
  (setq centaur-socks-proxy "127.0.0.1:1080")    ; SOCKS proxy
  (setq centaur-server t)                        ; Enable `server-mode' or not: t or nil

#+END_SRC
* Bootstrap
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; 加速
  (setq
   ;; 不要缩放frame.
   frame-inhibit-implied-resize t
   ;; 默认用最简单的模式
   initial-major-mode 'fundamental-mode
   ;; 不要自动启用package
   package-enable-at-startup nil
   package--init-file-ensured t)

   ;; 启动
   (require 'package)
   (setq package-enable-at-startup nil)
   (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                            ("melpa" . "http://elpa.emacs-china.org/melpa/")))
   (setq package-archives '(("gnu"   . "http://mirrors.cloud.tencent.com/elpa/gnu/")
                            ("melpa" . "http://mirrors.cloud.tencent.com/elpa/melpa/")))
   (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                            ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

   (setq package-check-signature nil)
   (package-initialize)

   ;; Automatic package installation
   (mapc
    (lambda (package)
      (if (not (package-installed-p package))
	  (progn
	    (package-refresh-contents)
	    (package-install package))))
    '(use-package diminish bind-key))


   ;; trigger use-package, And force the install of missing packages.
   (eval-when-compile (require 'use-package))
   (require 'diminish)
   (require 'bind-key)

   (setq use-package-always-ensure t)
   (setq custom-file "~/.emacs.d/custom.el")
   (if (file-exists-p custom-file)
       (load custom-file))


   (defun add-subdirs-to-load-path (dir)
     "Recursive add directories to `load-path'."
     (let ((default-directory (file-name-as-directory dir)))
       (add-to-list 'load-path dir)
       (normal-top-level-add-subdirs-to-load-path)))

   (add-subdirs-to-load-path "~/.emacs.d/vendor/")

#+END_SRC
* Generic
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; startup
  (tool-bar-mode -1)                      ;禁用工具栏
  (menu-bar-mode -1)                      ;禁用菜单栏
  (scroll-bar-mode -1)                    ;禁用滚动条

  (if (featurep 'cocoa)
      (progn
	;; 在Mac平台, Emacs不能进入Mac原生的全屏模式,否则会导致 `make-frame' 创建时也集成原生全屏属性后造成白屏和左右滑动现象.
	;; 所以先设置 `ns-use-native-fullscreen' 和 `ns-use-fullscreen-animation' 禁止Emacs使用Mac原生的全屏模式.
	;; 而是采用传统的全屏模式, 传统的全屏模式, 只会在当前工作区全屏,而不是切换到Mac那种单独的全屏工作区,
	;; 这样执行 `make-frame' 先关代码或插件时,就不会因为Mac单独工作区左右滑动产生的bug.
	;;
	;; Mac平台下,不能直接使用 `set-frame-parameter' 和 `fullboth' 来设置全屏,
	;; 那样也会导致Mac窗口管理器直接把Emacs窗口扔到单独的工作区, 从而对 `make-frame' 产生同样的Bug.
	;; 所以, 启动的时候通过 `set-frame-parameter' 和 `maximized' 先设置Emacs为最大化窗口状态, 启动5秒以后再设置成全屏状态,
	;; Mac就不会移动Emacs窗口到单独的工作区, 最终解决Mac平台下原生全屏窗口导致 `make-frame' 左右滑动闪烁的问题.
	(setq ns-use-native-fullscreen nil)
	(setq ns-use-fullscreen-animation nil)

	;; 默认先最大化。
	(set-frame-parameter (selected-frame) 'fullscreen 'maximized)

	(run-at-time "2sec" nil
		     (lambda ()
		       (toggle-frame-fullscreen)
		       ))
	)

    ;; 非Mac平台直接全屏
    (require 'fullscreen)
    (fullscreen))

  ;; Restore emacs session.
  ;(setq initial-buffer-choice t)
  ;(run-with-timer 1 nil #'(lambda () (bury-buffer)))

  ;; 增加长行处理性能
  (setq bidi-inhibit-bpa t)
  (setq-default bidi-paragraph-direction 'left-to-right)

  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (fset 'yes-or-no-p 'y-or-n-p)           ;以 y/n代表 yes/no
  (blink-cursor-mode -1)                  ;指针不闪动
  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq use-dialog-box nil)               ;never pop dialog
  (setq inhibit-startup-screen t)         ;inhibit start screen
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
  (setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq word-wrap-by-category t)             ;按照中文折行
  (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮

  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
  (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙

  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq scroll-step 1
	scroll-conservatively 10000)

  ;; 不显示 *scratch*
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

  ; Don't ask me when close emacs with process is running
  ;;(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
  ;;  "Prevent annoying \"Active processes exist\" query when you quit Emacs."
  ;;  (require 'noflet)
  ;;  (noflet ((process-list ())) ad-do-it))

  ; Don't ask me when kill process buffer
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))

  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq-default scroll-step 1
	    scroll-preserve-screen-position t
	    scroll-up-aggressively 0.01
	    scroll-down-aggressively 0.01
	    redisplay-dont-pause t
	    auto-window-vscroll nil
	    ;; Mouse wheel scroll behavior
	    mouse-wheel-scroll-amount '(1 ((shift) . 1))
	    mouse-wheel-progressive-speed nil
	    mouse-wheel-follow-mouse 't
	    fast-but-imprecise-scrolling nil)

  ;; idle
  (custom-set-variables '(tramp-verbose 0)) ;设置tramp的响应方式, 关闭后不弹出消息
  (setq max-lisp-eval-depth 40000)          ;lisp最大执行深度
  (setq max-specpdl-size 10000)             ;最大容量
  (setq kill-ring-max 1024)                 ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
  (setq mark-ring-max 1024)                 ;设置的mark ring容量
  (setq eval-expression-print-length nil)   ;设置执行表达式的长度没有限制
  (setq eval-expression-print-level nil)    ;设置执行表达式的深度没有限制
  (auto-compression-mode 1)                 ;打开压缩文件时自动解压缩
  (setq read-quoted-char-radix 16)          ;设置 引用字符 的基数
  (setq global-mark-ring-max 1024)          ;设置最大的全局标记容量
  (global-hl-line-mode 1)                   ;高亮当前行
  (setq isearch-allow-scroll t)             ;isearch搜索时是可以滚动屏幕的
  (setq one-key-popup-window nil)           ;禁止自动弹出窗口
  (setq enable-recursive-minibuffers t)     ;minibuffer 递归调用命令
  (setq history-delete-duplicates t)        ;删除minibuffer的重复历史
  (setq minibuffer-message-timeout 1)       ;显示消息超时的时间
  (setq auto-revert-mode 1)                 ;自动更新buffer
  (show-paren-mode t)                       ;显示括号匹配
  (setq show-paren-style 'parentheses)      ;括号匹配显示但不是烦人的跳到另一个括号。
  (setq blink-matching-paren nil)           ;当插入右括号时不显示匹配的左括号
  (setq message-log-max t)                  ;设置message记录全部消息, 而不用截去
  (setq require-final-newline nil)          ;不自动添加换行符到末尾, 有些情况会出现错误
  (setq ediff-window-setup-function (quote ediff-setup-windows-plain)) ;比较窗口设置在同一个frame里
  (setq x-stretch-cursor t)                 ;光标在 TAB 字符上会显示为一个大方块
  (put 'narrow-to-region 'disabled nil)     ;开启变窄区域
  (setq print-escape-newlines t)            ;显示字符窗中的换行符为 \n
  (setq tramp-default-method "ssh")         ;设置传送文件默认的方法
  (setq void-text-area-pointer nil)         ;禁止显示鼠标指针
  (setq byte-compile-warnings
	(quote (
		;; 显示的警告
		free-vars                   ;不在当前范围的引用变量
		unresolved                  ;不知道的函数
		callargs                    ;函数调用的参数和定义的不匹配
		obsolete                    ;荒废的变量和函数
		noruntime                   ;函数没有定义在运行时期
		interactive-only            ;正常不被调用的命令
		make-local ;调用 `make-variable-buffer-local' 可能会不正确的
		mapcar     ;`mapcar' 调用
		;;
		;; 抑制的警告
		(not redefine)              ;重新定义的函数 (比如参数数量改变)
		;(not cl-functions)          ;`CL' 包中的运行时调用的函数
		)))
  (setq echo-keystrokes 0.1)                ;加快快捷键提示的速度


  ;;; ### Auto-fill ###
  ;;; --- 自动换行
  (setq default-fill-columndefault-fill-column 100)          ;默认显示 100列就换行
  (dolist (hook (list
                 'after-text-mode-hook
                 'message-mode-hook
                 ))
    (add-hook hook #'(lambda () (auto-fill-mode 1))))

  ;;设置tab为4个空格的宽度
  (setq default-tab-width 4)
#+END_SRC
* Const
#+BEGIN_SRC emacs-lisp :tangle yes

    (defconst centaur-homepage
      "https://github.com/robertzhouxh/dotfiles"
      "The Github page of my Emacs.")

    (defconst centaur-custom-example-file
      (expand-file-name "custom-example.el" user-emacs-directory)
      "Custom example file of Centaur Emacs.")

    (defconst centaur-custom-post-file
      (expand-file-name "custom-post.el" user-emacs-directory)
      "Custom file after startup.

    Put private configurations to override defaults here.")

    (defconst centaur-custom-post-org-file
      (expand-file-name "custom-post.org" user-emacs-directory)
      "Custom org file after startup.

    Put private configurations to override defaults here.
    Loaded by `org-babel-load-file'.")

    (defconst sys/win32p
      (eq system-type 'windows-nt)
      "Are we running on a WinTel system?")

    (defconst sys/linuxp
      (eq system-type 'gnu/linux)
      "Are we running on a GNU/Linux system?")

    (defconst sys/macp
      (eq system-type 'darwin)
      "Are we running on a Mac system?")

    (defconst sys/mac-x-p
      (and (display-graphic-p) sys/macp)
      "Are we running under X on a Mac system?")

    (defconst sys/mac-ns-p
      (eq window-system 'ns)
      "Are we running on a GNUstep or Macintosh Cocoa display?")

    (defconst sys/mac-cocoa-p
      (featurep 'cocoa)
      "Are we running with Cocoa on a Mac system?")

    (defconst sys/mac-port-p
      (eq window-system 'mac)
      "Are we running a macport build on a Mac system?")

    (defconst sys/linux-x-p
      (and (display-graphic-p) sys/linuxp)
      "Are we running under X on a GNU/Linux system?")

    (defconst sys/cygwinp
      (eq system-type 'cygwin)
      "Are we running on a Cygwin system?")

    (defconst sys/rootp
      (string-equal "root" (getenv "USER"))
      "Are you using ROOT user?")

    (defconst emacs/>=25p
      (>= emacs-major-version 25)
      "Emacs is 25 or above.")

    (defconst emacs/>=26p
      (>= emacs-major-version 26)
      "Emacs is 26 or above.")

    (defconst emacs/>=27p
      (>= emacs-major-version 27)
      "Emacs is 27 or above.")

    (defconst emacs/>=25.3p
      (or emacs/>=26p
	  (and (= emacs-major-version 25) (>= emacs-minor-version 3)))
      "Emacs is 25.3 or above.")

    (defconst emacs/>=25.2p
      (or emacs/>=26p
	  (and (= emacs-major-version 25) (>= emacs-minor-version 2)))
      "Emacs is 25.2 or above.")

    (defconst emacs/>=27p
      (>= emacs-major-version 27)
      "Emacs is 27 or above.")

    (defconst emacs/>=28p
      (>= emacs-major-version 28)
      "Emacs is 28 or above.")

    (defconst emacs/>=29p
      (>= emacs-major-version 29)
      "Emacs is 29 or above.")

  ;; Suppress warnings
    (defvar socks-noproxy)
    (defvar socks-server)
    (defcustom centaur-proxy "127.0.0.1:8123"
      "Set network proxy."
      :group 'centaur
      :type 'string)

#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; https://emacs-china.org/t/org-mode/79
  (defun my-org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
    same directory as the org-buffer and insert a link to this file."
    (interactive)
    (org-display-inline-images)

    (setq filename
	  (concat
	   (make-temp-name
	    (concat (file-name-directory (buffer-file-name))
		    "/imgs/"
		    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
					  ; take screenshot
    (if (eq system-type 'darwin)
	(progn
	  (call-process-shell-command "screencapture" nil nil nil nil " -s " (concat
									      "\"" filename "\"" ))
	  (call-process-shell-command "convert" nil nil nil nil (concat "\"" filename "\" -resize  \"50%\"" ) (concat "\"" filename "\"" ))
	  ))

    (setq relative-dir (concat "./imgs/" (file-name-nondirectory filename)))
    (if (file-exists-p filename)
	(insert (concat "[[file:" relative-dir "]]")))
    (org-display-inline-images)
    )

  (defun x/save-all ()
    "Save all file-visiting buffers without prompting."
    (interactive)
    (save-some-buffers t))

  (defun x/open-init-file ()
    (interactive)
    (find-file user-init-file))

  (defun x/reload-init-file ()
    "Reload init.el file."
    (interactive)
    (load user-init-file)
    (message "Reloaded init.el OK."))

  (defun x/system-is-mac ()
    (interactive)
    (string-equal system-type "darwin"))

  (defun x/system-is-linux ()
    (interactive)
    (string-equal system-type "gnu/linux"))

  (defun hold-line-scroll-up ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-up 1)
      (line-move-to-column tmp)
      (forward-line 1)))

  (defun hold-line-scroll-down ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-down 1)
      (line-move-to-column tmp)
      (forward-line -1)))

  (defun sudo ()
    "Use TRAMP to `sudo' the current buffer"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
	       buffer-file-name))))

  (defun format-function-parameters ()
    "Turn the list of function parameters into multiline."
    (interactive)
    (beginning-of-line)
    (search-forward "(" (line-end-position))
    (newline-and-indent)
    (while (search-forward "," (line-end-position) t)
      (newline-and-indent))
    (end-of-line)
    (c-hungry-delete-forward)
    (insert " ")
    (search-backward ")")
    (newline-and-indent))

  ;; Dos2Unix/Unix2Dos
  (defun dos2unix ()
    "Convert the current buffer to UNIX file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-unix nil))

  (defun unix2dos ()
    "Convert the current buffer to DOS file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-dos nil))

  (defun delete-carrage-returns ()
    "Delete `^M' characters in the buffer.
      Same as `replace-string C-q C-m RET RET'."
    (interactive)
    (save-excursion
      (goto-char 0)
      (while (search-forward "\r" nil :noerror)
	(replace-match ""))))

  (defun save-buffer-as-utf8 (coding-system)
    "Revert a buffer with `CODING-SYSTEM' and save as UTF-8."
    (interactive "zCoding system for visited file (default nil):")
    (revert-buffer-with-coding-system coding-system)
    (set-buffer-file-coding-system 'utf-8)
    (save-buffer))

  (defun save-buffer-gbk-as-utf8 ()
    "Revert a buffer with GBK and save as UTF-8."
    (interactive)
    (save-buffer-as-utf8 'gbk))

  ;;;;;;;;;;;;;;;;;;;;;; Network Proxy ;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Network Proxy
  (defun proxy-http-show ()
    "Show HTTP/HTTPS proxy."
    (interactive)
    (if url-proxy-services
	(message "Current HTTP proxy is `%s'" centaur-proxy)
      (message "No HTTP proxy")))

  (defun proxy-http-enable ()
    "Enable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services
	  `(("http" . ,centaur-proxy)
	    ("https" . ,centaur-proxy)
	    ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
    (proxy-http-show))

  (defun proxy-http-disable ()
    "Disable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services nil)
    (proxy-http-show))

  (defun proxy-http-toggle ()
    "Toggle HTTP/HTTPS proxy."
    (interactive)
    (if (bound-and-true-p url-proxy-services)
	(proxy-http-disable)
      (proxy-http-enable)))

  (defun proxy-socks-show ()
    "Show SOCKS proxy."
    (interactive)
    (when (fboundp 'cadddr)                ; defined 25.2+
      (if (bound-and-true-p socks-noproxy)
	  (message "Current SOCKS%d proxy is %s:%s"
		   (cadddr socks-server) (cadr socks-server) (caddr socks-server))
	(message "No SOCKS proxy"))))

  (defun proxy-socks-enable ()
    "Enable SOCKS proxy."
    (interactive)
    (require 'socks)
    (setq url-gateway-method 'socks
	  socks-noproxy '("localhost"))
    (let* ((proxy (split-string centaur-socks-proxy ":"))
	   (host (car proxy))
	   (port (cadr  proxy)))
      (setq socks-server `("Default server" ,host ,port 5)))
    (setenv "all_proxy" (concat "socks5://" centaur-socks-proxy))
    (proxy-socks-show))

  (defun proxy-socks-disable ()
    "Disable SOCKS proxy."
    (interactive)
    (setq url-gateway-method 'native
	  socks-noproxy nil
	  socks-server nil)
    (setenv "all_proxy" "")
    (proxy-socks-show))

  (defun proxy-socks-toggle ()
    "Toggle SOCKS proxy."
    (interactive)
    (if (bound-and-true-p socks-noproxy)
	(proxy-socks-disable)
      (proxy-socks-enable)))

  (defun org-export-docx ()
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
	  (template-file "/Users/glodon/githubs/dotfiles/.emacs.d/template.docx"))
      (shell-command (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file))
      (message "Convert finish: %s" docx-file)))

  (defun switch-to-messages ()
    "Select buffer *message* in the current window."
    (interactive)
    (switch-to-buffer "*Messages*"))

  ;; -------------------------------------------------------------
  ;; functions for company from lazycat
  ;; -------------------------------------------------------------
  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
	(company-complete-common)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
	(backward-char 1)
	(if (looking-at "\\.") t
	  (backward-char 1)
	  (if (looking-at "::") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
	(minibuffer-complete)
      (if (or (not yas/minor-mode)
	      (null (do-yas-expand)))
	  (if (check-expansion)
	      (company-complete-common)
	    (indent-for-tab-command)))))

(defun +rename-current-file (newname)
  "Rename current visiting file to NEWNAME.
If NEWNAME is a directory, move file to it."
  (interactive
   (progn
     (unless buffer-file-name
       (user-error "No file is visiting"))
     (let ((name (read-file-name "Rename to: " nil buffer-file-name 'confirm)))
       (when (equal (file-truename name)
                    (file-truename buffer-file-name))
         (user-error "Can't rename file to itself"))
       (list name))))
  ;; NEWNAME is a directory
  (when (equal newname (file-name-as-directory newname))
    (setq newname (concat newname (file-name-nondirectory buffer-file-name))))
  (rename-file buffer-file-name newname)
  (set-visited-file-name newname)
  (rename-buffer newname))

(defun +delete-current-file (file)
  "Delete current visiting FILE."
  (interactive
   (list (or buffer-file-name
             (user-error "No file is visiting"))))
  (when (y-or-n-p (format "Really delete '%s'? " file))
    (kill-this-buffer)
    (delete-file file)))

  ;;;###autoload
  (defun +copy-current-file (new-path &optional overwrite-p)
    "Copy current buffer's file to `NEW-PATH'.
  If `OVERWRITE-P', overwrite the destination file without
  confirmation."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "No file is visiting"))
       (list (read-file-name "Copy file to: ")
             current-prefix-arg)))
    (let ((old-path (buffer-file-name))
          (new-path (expand-file-name new-path)))
      (make-directory (file-name-directory new-path) t)
      (copy-file old-path new-path (or overwrite-p 1))))
  
  ;;;###autoload
  (defun +copy-current-filename (file)
    "Copy the full path to the current FILE."
    (interactive
     (list (or buffer-file-name
               (user-error "No file is visiting"))))
    (kill-new file)
    (message "Copying '%s' to clipboard" file))
  
  ;;;###autoload
  (defun +copy-current-buffer-name ()
    "Copy the name of current buffer."
    (interactive)
    (kill-new (buffer-name))
    (message "Copying '%s' to clipboard" (buffer-name)))

#+END_SRC
* Fundamental Plugins
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package use-package-ensure-system-package :ensure t)

  ;; Environment
  (use-package exec-path-from-shell
    :ensure t
    :if (or sys/mac-x-p sys/linux-x-p)
    :config
    (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
    (setq exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))

  (use-package json-reformat)
  (use-package comment-dwim-2)
  (use-package buffer-flip)
  (use-package markdown-mode)
  (use-package dockerfile-mode)
  (use-package json-mode)
  (use-package protobuf-mode)
  (use-package swiper)
  (use-package nginx-mode)
  (use-package async :init (async-bytecomp-package-mode 1))
  (use-package projectile :diminish :config (projectile-global-mode))
  (use-package flycheck :diminish :config (global-flycheck-mode 1))
  (use-package restclient :config (setq restclient-inhibit-cookies t))
  (use-package key-chord :config (progn (key-chord-mode 1)))
  (use-package all-the-icons :if (display-graphic-p))
  (use-package so-long
    :ensure nil ;; emacs27+ new feature
    :hook (after-init . global-so-long-mode))


  (use-package which-key
    :diminish which-key-mode
    :hook (after-init . which-key-mode)
    :config
    (progn
      (which-key-mode)
      (which-key-setup-side-window-right)))

  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package volatile-highlights
    :ensure t
    :diminish
    :hook
    (after-init . volatile-highlights-mode)
    :custom-face
    (vhl/default-face ((nil (:foreground "#FF3333" :background "#FFCDCD")))))

  (use-package ivy
    :diminish ivy-mode
    :ensure t
    :preface (eval-when-compile (declare-function ivy-mode nil))
    :init (setq ivy-use-virtual-buffers t)
    :config (ivy-mode t))

  (use-package counsel
    :after ivy
    :diminish counsel-mode
    :init
    (add-to-list 'ivy-ignore-buffers "^#")
    (add-to-list 'ivy-ignore-buffers "^\\*irc\\-")
    )
  (use-package counsel-projectile
    :after (counsel projectile)
    :diminish counsel-projectile-mode
    :preface
    (eval-when-compile
      (declare-function counsel-projectile-mode nil))
    :commands
    (counsel-projectile-rg
     counsel-projectile-find-file
     counsel-projectile-switch-project
     counsel-projectile-switch-to-buffer)
    :config
    (counsel-projectile-mode t))

  ;; Automatically reload files was modified by external program
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))

#+END_SRC
* Quick Search And Move
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy)
  (use-package undo-tree
    :ensure t
    :commands (global-undo-tree-mode
               undo
               undo-tree-redo)
    :init (setq undo-tree-visualizer-timestamps t
                undo-tree-visualizer-diff t
                undo-tree-auto-save-history nil
                undo-tree-history-directory-alist `(("." . ,(expand-file-name "ebackup/" emacs-d))))
    :diminish undo-tree-mode)

  (use-package ag
    :defer t
    :config
    (progn
      (setq ag-highlight-search t)
      (bind-key "n" 'compilation-next-error ag-mode-map)
      (bind-key "p" 'compilation-previous-error ag-mode-map)
      (bind-key "N" 'compilation-next-file ag-mode-map)
      (bind-key "P" 'compilation-previous-file ag-mode-map)))

  (use-package dumb-jump
    :diminish dumb-jump-mode
    :config
    (setq dumb-jump-aggressive nil)
    (setq dumb-jump-selector 'ivy)
    (setq dumb-jump-prefer-searcher 'ag))

  ;; Hiding structured data
  (use-package hideshow
    :ensure t
    :hook (prog-mode . hs-minor-mode)
    :config
    (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

    (defface hideshow-border-face
      '((((background light))
         :background "rosy brown" :extend t)
        (t
         :background "sandy brown" :extend t))
      "Face used for hideshow fringe."
      :group 'hideshow)

    (define-fringe-bitmap 'hideshow-folded-fringe
      (vector #b00000000
              #b00000000
              #b00000000
              #b11000011
              #b11100111
              #b01111110
              #b00111100
              #b00011000))

    (defun hideshow-folded-overlay-fn (ov)
      "Display a folded region indicator with the number of folded lines."
      (when (eq 'code (overlay-get ov 'hs))
        (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
               (info (format " (%d)..." nlines)))
          ;; fringe indicator
          (overlay-put ov 'before-string (propertize " "
                                                     'display '(left-fringe hideshow-folded-fringe
                                                                            hideshow-border-face)))
          ;; folding indicator
          (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))
    :custom
    (hs-set-up-overlay #'hideshow-folded-overlay-fn))

#+END_SRC
* Company && Yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package posframe :ensure t)
  (use-package expand-region :bind ("C-=" . er/expand-region))
  (use-package company-restclient)
  (use-package company-nginx
    :after (nginx-mode)
    :hook((nginx-mode . company-nginx-keywords)))

  (use-package yasnippet
    :ensure
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode))

  ;; 模板生成工具，写代码时随手生成一个模板。强烈推荐使用
  ;; 使用方法： https://github.com/abo-abo/auto-yasnippet#usage
  (use-package auto-yasnippet :config (setq aya-persist-snippets-dir (concat user-emacs-directory "my/snippets")))
  (use-package yasnippet :config (yas-global-mode 1))
  (use-package yasnippet-snippets :after (yasnippet))

  ;(use-package company
  ;  :commands company-mode imalison:company
  ;  :bind
  ;  (:map company-mode-map
  ;	  ("<tab>". tab-indent-or-complete)
  ;	  ("TAB". tab-indent-or-complete))
  ;  :config
  ;  (progn
  ;    (emit-prefix-selector imalison:company
  ;	company-complete
  ;	company-yasnippet)
  ;    (setq company-idle-delay .25)
  ;    (global-company-mode)
  ;    (diminish 'company-mode))
  ;  :init
  ;  (add-hook 'prog-mode-hook (lambda () (company-mode t))))
  (use-package company
    :ensure t
    :diminish
    :bind
    (:map company-mode-map
	  ("<tab>". tab-indent-or-complete)
	  ("TAB". tab-indent-or-complete))
    :config
    (progn (setq company-idle-delay 0.5)
	   (setq company-show-numbers t)))

  ;;Run M-x company-tabnine-install-binary to install the TabNine binary for your system.
  (use-package company-tabnine
    :defer t 
    :ensure t 
    :config (add-to-list 'company-backends #'company-tabnine))
#+END_SRC
* Lazycat Plugins
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'watch-other-window)
  (require 'thing-edit)

  (require 'auto-save)
  (auto-save-enable)
  (setq auto-save-silent t)
  (setq auto-save-delete-trailing-whitespace nil)

  (use-package color-rg
    :load-path (lambda () (expand-file-name "vendor/color-rg/" user-emacs-directory))
    :commands (color-rg-search-input color-rg-search-project color-rg-search-symbol-in-project)
    :if (executable-find "rg")
    :bind ("C-M-s" . color-rg-search-input))

  (use-package youdao-dictionary
    :commands youdao-dictionary-play-voice-of-current-word
    :init
    (setq url-automatic-caching t
	  youdao-dictionary-use-chinese-word-segmentation t) ; 中文分词

    (defun my-youdao-search-at-point ()
      "Search word at point and display result with `posframe', `pos-tip', or buffer."
      (interactive)
      (if (display-graphic-p)
	  (youdao-dictionary-search-at-point-posframe)
	(youdao-dictionary-search-at-point))))

  ;; auto mode
  ;; -----------------------------------------------------------------------------------------------
  (defun add-to-alist (alist-var elt-cons &optional no-replace)
    "Add to the value of ALIST-VAR an element ELT-CONS if it isn't there yet.
    If an element with the same car as the car of ELT-CONS is already present,
    replace it with ELT-CONS unless NO-REPLACE is non-nil; if a matching
    element is not already present, add ELT-CONS to the front of the alist.
    The test for presence of the car of ELT-CONS is done with `equal'."
    (let ((existing-element (assoc (car elt-cons) (symbol-value alist-var))))
      (if existing-element
	  (or no-replace
	      (rplacd existing-element (cdr elt-cons)))
	(set alist-var (cons elt-cons (symbol-value alist-var)))))
    (symbol-value alist-var))

  (dolist (elt-cons '(
		      ("\\.markdown" . markdown-mode)
		      ("\\.md" . markdown-mode)
		      ("\\.stumpwmrc\\'" . lisp-mode)
		      ("\\.[hg]s\\'" . haskell-mode)
		      ("\\.hi\\'" . haskell-mode)
		      ("\\.hs-boot\\'" . haskell-mode)
		      ("\\.chs\\'" . haskell-mode)
		      ("\\.l[hg]s\\'" . literate-haskell-mode)
		      ("\\.inc\\'" . asm-mode)
		      ("\\.max\\'" . maxima-mode)
		      ("\\.org\\'" . org-mode)
		      ("\\.cron\\(tab\\)?\\'" . crontab-mode)
		      ("cron\\(tab\\)?\\." . crontab-mode)
		      ("\\.py$" . python-mode)
		      ("SConstruct". python-mode)
		      ("\\.jl\\'" . lisp-mode)
		      ("\\.asdf\\'" . lisp-mode)
		      ("CMakeLists\\.txt\\'" . cmake-mode)
		      ("\\.cmake\\'" . cmake-mode)
		      ("\\.php\\'" . php-mode)
		      ("\\.vue" . web-mode)
		      ("\\.wxml" . web-mode)
		      ("\\.phtml\\'" . web-mode)
		      ("\\.tpl\\.php\\'" . web-mode)
		      ("\\.as[cp]x\\'" . web-mode)
		      ("\\.erb\\'" . web-mode)
		      ("\\.mustache\\'" . web-mode)
		      ("\\.djhtml\\'" . web-mode)
		      ("\\.html?\\'" . web-mode)
		      ("\\.js.erb\\'" . js-mode)
		      ("\\.css\\'" . css-mode)
		      ("\\.wxss\\'" . css-mode)
		      ("\\.jade" . jade-mode)
		      ("\\.go$" . go-mode)
		      ("\\.rs$" . rust-mode)
		      ("\\.pro$" . qmake-mode)
		      ("\\.js$" . js-mode)
		      ("\\.wxs$" . js-mode)
		      ("\\.jsx$" . web-mode)
		      ("\\.lua$" . lua-mode)
		      ("\\.y$" . bison-mode)
		      ("\\.pdf$" . pdf-view-mode)
		      ("\\.ts$" . typescript-mode)
		      ("\\.tsx$" . typescript-mode)
		      ("\\.cpp$" . c++-mode)
		      ("\\.h$" . c++-mode)
		      ("\\.ll$" . llvm-mode)
		      ("\\.bc$" . hexl-mode)
		      ("\\.nim$" . nim-mode)
		      ("\\.nims$" . nim-mode)
		      ("\\.nimble$" . nim-mode)
		      ("\\.nim.cfg$" . nim-mode)
		      ("\\.exs$" . elixir-mode)
		      ("\\.erl$" . erlang-mode)
		      ("rebar\\.config$" . erlang-mode)
		      ("relx\\.config$" . erlang-mode)
		      ("sys\\.config\\.src$" . erlang-mode)
		      ("sys\\.config$" . erlang-mode)
		      ("\\.config\\.src?$" . erlang-mode)
		      ("\\.config\\.script?$" . erlang-mode)
		      ("\\.hrl?$" . erlang-mode)
		      ("\\.app?$" . erlang-mode)
		      ("\\.app.src?$" . erlang-mode)
		      ("\\Emakefile" . erlang-mode)
		      ("\\.json$" . json-mode)
		      ("\\.clj$" . clojure-mode)
		      ))
    (add-to-alist 'auto-mode-alist elt-cons))


  ;; -----------------------------------------------------------------------------------------------
  ;; Line numbers are not displayed when large files are used.
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
		 'c-mode-common-hook
		 'c-mode-hook
		 'emacs-lisp-mode-hook
		 'lisp-interaction-mode-hook
		 'lisp-mode-hook
		 'java-mode-hook
		 'asm-mode-hook
		 'haskell-mode-hook
		 'rcirc-mode-hook
		 'erc-mode-hook
		 'sh-mode-hook
		 'makefile-gmake-mode-hook
		 'python-mode-hook
		 'js-mode-hook
		 'html-mode-hook
		 'css-mode-hook
		 'tuareg-mode-hook
		 'go-mode-hook
		 'qml-mode-hook
		 'markdown-mode-hook
		 'slime-repl-mode-hook
		 'package-menu-mode-hook
		 'cmake-mode-hook
		 'php-mode-hook
		 'web-mode-hook
		 'sws-mode-hook
		 'jade-mode-hook
		 'vala-mode-hook
		 'rust-mode-hook
		 'ruby-mode-hook
		 'qmake-mode-hook
		 'lua-mode-hook
		 'swift-mode-hook
		 'llvm-mode-hook
		 'conf-toml-mode-hook
		 'nxml-mode-hook
		 'nim-mode-hook
		 'typescript-mode-hook
		 'elixir-mode-hook
		 'clojure-mode-hook
		 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))

  ;; -----------------------------------------------------------------------------------------------
  ;; https://github.com/manateelazycat/lazycat-emacs/blob/master/site-lisp/config/init-lsp-bridge.el
  (require 'lsp-bridge)
  (require 'lsp-bridge-jdtls)
  (global-lsp-bridge-mode)

  ;; 融合 `lsp-bridge' `find-function' 以及 `dumb-jump' 的智能跳转
  (defun lsp-bridge-jump ()
    (interactive)
    (cond
     ((eq major-mode 'emacs-lisp-mode)
      (let ((symb (function-called-at-point)))
	(when symb
	  (find-function symb))))
     (lsp-bridge-mode
      (lsp-bridge-find-def))
     (t
      (require 'dumb-jump)
      (dumb-jump-go))))

  (defun lsp-bridge-jump-back ()
    (interactive)
    (cond
     (lsp-bridge-mode
      (lsp-bridge-find-def-return))
     (t
      (require 'dumb-jump)
      (dumb-jump-back))))

  (setq lsp-bridge-get-single-lang-server-by-project
	(lambda (project-path filepath)
	  ;; If typescript first line include deno.land, then use Deno LSP server.
	  (save-excursion
	    (when (string-equal (file-name-extension filepath) "ts")
	      (dolist (buf (buffer-list))
		(when (string-equal (buffer-file-name buf) filepath)
		  (with-current-buffer buf
		    (goto-char (point-min))
		    (when (string-match-p (regexp-quote "from \"https://deno.land") (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
		      (return "deno")))))))))

  ;; 打开日志，开发者才需要
  ;; (setq lsp-bridge-enable-log t)

#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp :tangle yes
  ;https://www.emacswiki.org/emacs/download/dired+.el
  (use-package dired
  :ensure nil
  :hook (dired-after-readin . dired-directory-sort)
  :config
  (require 'dired-x)

  (setq dired-dwim-target t
        ;; Humanize file size
        dired-listing-switches "-alh")
  ;; Sort directories ahead of files
  (defun dired-directory-sort ()
    "Dired sort hook to list directories first."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2) ;; beyond dir. header
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
    (and (featurep 'xemacs)
         (fboundp 'dired-insert-set-properties)
         (dired-insert-set-properties (point-min) (point-max)))
    (set-buffer-modified-p nil)))

#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package highlight-parentheses
    :ensure t
    :init
    (setq hl-paren-colors '("DarkOrange" "DeepSkyBlue" "DarkRed")) 
    :config
    (global-highlight-parentheses-mode t))

  (require 'lazycat-theme)
  (setq-default mode-line-format (remove 'mode-line-buffer-identification mode-line-format))
  ;;(load-theme 'modus-vivendi)
  ;;(load-theme 'modus-operandi)
  ;; (lazycat-theme-load-light)
  (lazycat-theme-load-dark)
  ;; (lazycat-theme-load-with-sunrise)

  (use-package awesome-tray
    :load-path "~/.emacs.d/vendor/awesome-tray"
    :init
    (require 'awesome-tray)
    (defface awesome-tray-module-rime-face
      '((((background light))
         :foreground "#008080" :bold t)
        (t
         :foreground "#00ced1" :bold t))
      "Rime ㄓ state face."
      :group 'awesome-tray)
    (defvar awesome-tray-rime-status-last-time 0)
    (defvar awesome-tray-rime-status-cache "")
    (defun awesome-tray-module-rime-info () (rime-lighter))
    (add-to-list 'awesome-tray-module-alist
                 '("rime" . (awesome-tray-module-rime-info awesome-tray-module-rime-face)))

    (awesome-tray-mode 1)
    :custom
    ;;(awesome-tray-active-modules '("location" "belong" "file-path" "mode-name" "last-command" "battery" "date"))
    ;;(awesome-tray-active-modules '("awesome-tab" "mode-name" "file-path" "buffer-name" "git" "rime" "location" "battery" "date"))
    (awesome-tray-active-modules '("location" "git" "file-path" "mode-name" "last-command" "battery" "date"))
    :config
    (add-hook 'circadian-after-load-theme-hook
              #'(lambda (_)
                  (awesome-tray-mode 1))))

  (use-package awesome-tab
    :load-path "~/.emacs.d/vendor/awesome-tab"
    :config
    (awesome-tab-mode t))

  (require 'all-the-icons)
  (use-package dashboard
    :ensure t
    :init
    ;; Format: "(icon title help action face prefix suffix)"
    (setq dashboard-navigator-buttons `(((,(if (fboundp 'all-the-icons-octicon) (all-the-icons-octicon "mark-github"      :height 1.0 :v-adjust  0.0) "★")
                                          "GitHub" "Browse" (lambda (&rest _) (browse-url homepage-url)))
                                         (,(if (fboundp 'all-the-icons-octicon) (all-the-icons-octicon "heart"            :height 1.1 :v-adjust  0.0) "♥")
                                          "Stars" "Show stars" (lambda (&rest _) (browse-url stars-url)))
                                         (,(if (fboundp 'all-the-icons-material) (all-the-icons-material "report_problem" :height 1.1 :v-adjust -0.2) "⚑")
                                          "Issue" "Report issue" (lambda (&rest _) (browse-url issue-url)) warning)
                                         (,(if (fboundp 'all-the-icons-material) (all-the-icons-material "update"         :height 1.1 :v-adjust -0.2) "♺")
                                          "Update" "Update packages synchronously" (lambda (&rest _) (package-update-all nil)) success))))

    :hook ((after-init . dashboard-setup-startup-hook)
           (dashboard-mode . (lambda ()
                               (setq-local global-hl-line-mode nil))))
    :config
    (defconst homepage-url "https://github.com/robertzhouxh/dotfiles")
    (defconst stars-url (concat homepage-url "/stargazers"))
    (defconst issue-url (concat homepage-url "/issues/new"))
    :custom
    (dashboard-startup-banner 'logo)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-set-navigator t)
    (dashboard-banner-logo-title "Welcome to ZXH-Emacs Dashboard")
    (dashboard-items '((recents   . 10)
                       (projects  . 5)
                       (bookmarks . 5))))
#+END_SRC

* Performance
#+BEGIN_SRC emacs-lisp :tangle yes
;; -------------------------------------------------------------
;; Performance
;; Disable garbage collection when entering commands.
(defun max-gc-limit ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun reset-gc-limit ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'max-gc-limit)
(add-hook 'minibuffer-exit-hook #'reset-gc-limit)

;; Improve the performance of rendering long lines.
(setq-default bidi-display-reordering nil)
;;; Track Emacs commands frequency
(use-package keyfreq
  :ensure t
  :config (keyfreq-mode 1) (keyfreq-autosave-mode 1))

#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    ;; :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :config
    (magit-auto-revert-mode t)
    (magit-save-repository-buffers t)   
    (defun magit-display-buffer-same-window (buffer)
      "Display BUFFER in the selected window like God intended."
      (display-buffer buffer '(display-buffer-same-window)))
    (setq magit-display-buffer-function 'magit-display-buffer-same-window))

  (defun my/magit-display-buffer (buffer)
    (if (and git-commit-mode
	     (with-current-buffer buffer
	       (derived-mode-p 'magit-diff-mode)))
	(display-buffer buffer '((display-buffer-pop-up-window
				  display-buffer-use-some-window
				  display-buffer-below-selected)
				 (inhibit-same-window . t)))
      (magit-display-buffer-traditional buffer)))

  (setq magit-display-buffer-function #'my/magit-display-buffer)

  (use-package git-messenger
    ;; :bind ("C-x G" . git-messenger:popup-message)
    :config (setq git-messenger:show-detail t git-messenger:use-magit-popup t))
  (use-package blamer
    :ensure t
    :defer 20
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
		     :background nil
		     :height 140
		     :italic t))))

  (use-package git-gutter
    :diminish
    :ensure t
    :custom
    (git-gutter:modified-sign "~")
    (git-gutter:added-sign    "+")
    (git-gutter:deleted-sign  "-")
    :custom-face
    (git-gutter:modified ((t (:background "#f1fa8c"))))
    (git-gutter:added    ((t (:background "#50fa7b"))))
    (git-gutter:deleted  ((t (:background "#ff79c6"))))
    :config
    (global-git-gutter-mode +1))
#+END_SRC
* Evil-Mode
#+BEGIN_SRC emacs-lisp :tangle yes
    ;;; C-y => paste the things to minibuffer, then use consel-rg
  (defun x/config-evil-leader ()
    "Configure evil leader mode."
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      ","  'avy-goto-char-2
      ":"  'eval-expression

      "/"  'counsel-rg

      "A"  'align-regexp

      ;; buffer & bookmark
      "bb" 'switch-to-buffer
      "bB" 'switch-to-buffer-other-window
      "bc" 'clone-indirect-buffer
      "bC" 'clone-indirect-buffer-other-window
      "by" '+copy-current-buffer-name
      "bv" 'revert-buffer
      "bx" 'scratch-buffer
      "bz" 'bury-buffer
      "b[" 'previous-buffer
      "b]" 'next-buffer
      ;; --------------
      "bm" 'bookmark-set
      "bM" 'bookmark-set-no-overwrite
      "bi" 'bookmark-insert
      "br" 'bookmark-rename
      "bd" 'bookmark-delete
      "bw" 'bookmark-write
      "bj" 'bookmark-jump
      "bJ" 'bookmark-jump-other-window
      "bl" 'bookmark-bmenu-list
      "bs" 'bookmark-save

      ;; code
      "cd" 'delete-trailing-whitespace
      "cc" 'comment-dwim
      "cl" 'toggle-truncate-lines
      ;;"cC" 'compile
      ;;"cR" 'recompile
      ;;"ck" 'kill-compilation
      ;;"cx" 'quickrun

      ;; dired
      "dj" 'dired-jump
      "dJ" 'dired-jump-other-window


      ;; file
      "fa" 'x/save-all
      "fu" 'sudo
      "ff" 'find-file
      "fF" 'find-file-other-frame
      "f/" 'find-file-other-window
      "fs" 'my-org-screenshot 
      "fc" '(lambda () (interactive) (find-file "./docker-compose.yml"))
      "fC" '+copy-current-file
      "fD" '+delete-current-file
      "fd" '(lambda () (interactive) (find-file "./Dockerfile"))
      "fy" '+copy-current-filename
      "fR" '+rename-current-file
      "fr" 'recentf-open-files
      "fl" 'find-file-literally
      "fe" '(lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory)))
      "fr" '(lambda () (interactive) (load-file (expand-file-name "init.el" user-emacs-directory)))
      "fx" '(lambda () (interactive) (find-file (expand-file-name "~/.exports")))
      "fh" '(lambda () (interactive) (find-file (expand-file-name "~/")))
      "fp" 'format-function-parameters

      ;; magit
      "gs" 'magit-status
      "gb" 'magit-branch-checkout
      "gp" 'magit-pull
      "gB" 'global-blamer-mode
      "gt" 'magit-blame-toggle
      "G"  'aborn/simple-git-commit-push

      ;; project && proxy
      ;;"p"  'projectile-command-map
      "pf" 'counsel-projectile-find-file
      "pp" 'counsel-projectile-switch-project
      "pb" 'counsel-projectile-switch-to-buffer
      "pk" 'projectile-kill-buffers
      "pr" 'projectile-recentf
      "ps" 'proxy-socks-toggle
      "ph" 'proxy-http-toggle

      ;; search
      "sj" 'evil-show-jumps
      "sm" 'evil-show-marks
      "sr" 'evil-show-registers
      "sI" 'imenu
      "si" 'color-rg-search-input
      "ss" 'color-rg-search-symbol-in-project
      "sp" 'color-rg-search-project
      "sl" 'counsel-projectile-rg

      "tj" 'awesome-tab-backward-tab
      "tk" 'awesome-tab-forward-tab
      "th" 'awesome-tab-backward-group
      "tl" 'awesome-tab-forward-group
      "tg" 'awesome-tab-counsel-switch-group

      ;; window && frame
      ;;"w" 'evil-window-map
      "wf" 'other-frame
      "wo" 'other-window
      "wd" 'kill-buffer-and-window
      "wD" 'delete-other-windows
      "wu" '+transient-tab-bar-history
      "w-" 'split-window-vertically
      "w/" 'split-window-horizontally

      ;; open external App
      "oY" 'youdao-dictionary-search-from-input

      ;; fold
      "zA" 'evil-close-folds
      "za" 'evil-open-folds
      "zo" 'evil-open-fold
      "zO" 'evil-open-fold-rec
      "zc" 'evil-close-fold
      "zC" 'evil-close-fold-rec
      "zt" 'evil-toggle-fold

      )

    ;; from https://emacs-china.org/t/magit-add-commit-push/22457
    (defun aborn/simple-git-commit-push ()
      "Simple commit current git project and push to its upstream."
      ;; (interactive "sCommit Message: ")
      (interactive)
      (when (and buffer-file-name
                 (buffer-modified-p))
        (save-buffer))                   ;; save it first if modified.
      (magit-diff-unstaged)
      (when (yes-or-no-p "Do you really want to commit everything?")
        (magit-stage-modified)
        ;; (magit-mode-bury-buffer)
        (magit-diff-staged)
        (setq msg (read-string "Commit Message: "))
        (when (= 0 (length msg))
          (setq msg (format-time-string "commit by magit in emacs@%Y-%m-%d %H:%M:%S"
                                        (current-time))))
        (message "commit message is %s" msg)
        ;;(magit-commit (list "-m" msg))
        (magit-call-git "commit" "-m" msg)
        (magit-push-current-to-upstream nil)
        (message "now do async push to %s" (magit-get "remote" "origin" "url")))
      (magit-mode-bury-buffer))

    (defun magit-blame-toggle ()
      "Toggle magit-blame-mode on and off interactively."
      (interactive)
      (if (and (boundp 'magit-blame-mode) magit-blame-mode)
          (magit-blame-quit)
        (call-interactively 'magit-blame)))
    )

  (use-package evil
    :ensure t
    :init
    (progn
      (setq evil-disable-insert-state-bindings t)
      (setq evil-want-Y-yank-to-eol t)
      ;; before evil-mode
      (setq evil-want-C-i-jump nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)

      (evil-mode t)

      (setq evil-want-fine-undo t)
      (setq evil-move-cursor-back nil)
      (setq evil-esc-delay 0)
      )
    :hook (after-init . evil-mode)
    :config
    (progn
      (use-package evil-visualstar
        :bind (:map evil-visual-state-map
                    ("*" . evil-visualstar/begin-search-forward)
                    ("#" . evil-visualstar/begin-search-backward)))
      (use-package evil-leader
        :init
        (progn
          (global-evil-leader-mode)
          (setq evil-leader/in-all-states 1)
          (x/config-evil-leader)))
      (use-package evil-surround
        :ensure t
        :config
        (progn
          (global-evil-surround-mode)))
      (use-package evil-escape
        :ensure t
        :config
        (progn
          (evil-escape-mode)
          (setq-default evil-escape-key-sequence "tn")))))
#+END_SRC
* Org-Mode
  #+BEGIN_SRC emacs-lisp :tangle yes
  ;; --------------------------------------------------------------
  ;; org -> latex -> pdf
  ;; --------------------------------------------------------------
  ;; latex supporting deps
  ;; https://orgmode.org/worg/org-dependencies.html
  ;; brew cask install basictex --verbose # verbose flag so I can see what is happening.
  ;; which pdflatex
  ;; export PATH=$PATH:/Library/TeX/texbin
  ;; pip install pygments
  ;; sudo tlmgr install minted
  ;; sudo tlmgr update --self --all
  ;; sudo tlmgr install ctex environ trimspaces zhnumber cjk
  ;; --------------------------------------------------------------
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
  ; 参考: https://a358003542.github.io/articles/emacs-orgmode-learning-notes.html
  ; 参考: https://emacs-china.org/t/spacemacs-org-mode-pdf/1577
  (use-package org-download
    :ensure t
    :after org
    ;; There is something wrong with `hook`, so redefine it with my own :hook
    :init (add-hook 'org-mode-hook (lambda () (require 'org-download)))
    :config
    (setq-default org-download-image-dir "../images")
    (put 'org-download-image-dir 'safe-local-variable (lambda (_) t)))

  (use-package toc-org
    :after org
    :ensure t
    :hook
    (org-mode . toc-org-enable))

  (use-package org-bars
    :ensure nil
    :load-path "~/.emacs.d/vendor/org-bars"
    :defer t
    :hook (org-mode . org-bars-mode))

  (use-package valign
    :defer t
    :ensure t
    :hook ((org-mode . valign-mode))
    :custom ((valign-fancy-bar t)))

  (use-package plantuml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-options "-charset UTF-8")
    (setq plantuml-jar-path plantuml-path))
  (setq org-plantuml-jar-path plantuml-path)
  (setq plantuml-default-exec-mode 'jar)
  (use-package plantuml-mode :magic ("@startuml" . plantuml-mode))
  (defun recompile-plantuml () (add-hook 'after-save-hook (lambda () (call-process "plantuml" nil nil nil (buffer-name)))))
  (add-hook 'org-babel-after-execute-hook (lambda () (when org-inline-image-overlays (org-redisplay-inline-images))))

  ;; latex 设置
  (require 'ox-latex)

  ;; Babel
  (setq org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t)

  ;; Display
  (setq org-log-done 'time)
  (setq org-hide-leading-stars t)
  (setq org-startup-folded t)                   ; t, 'overview, 'content, 'showall.
  (setq org-pretty-entities nil)                ; 下划线不转下标
  (setq org-export-babel-evaluate t)
  (setq org-export-with-sub-superscripts nil)   ; 下划线不转下标
  (setq org-export-headline-levels 5)           ; 5级结构
  (setq org-highlight-latex-and-related '(latex)) ; 高亮latex代码
  (setq org-file-apps '(("pdf" . "open -a Skim %s")))

  ;; 表格
  ; 长表格  longtable环境：   #+ATTR_LATEX: :environment longtable :align x{0.2\linewidth}x{0.2\linewidth}
  ; 普通表格tabular环境： #+ATTR_LATEX: :align p{0.18\linewidth}|p{0.72\linewidth}
  (setq org-latex-tables-booktabs t)            ; 启用booktabs宏包模式, 额外支持插入一些属性设置

  ;; 图片
  ;; always resize inline images to 300 pixels, or use scale 0.8  in src plantuml
  (setq org-image-actual-width 200) 
  ;; if there is a #+ATTR_*: :width 200, resize to 200, otherwise resize to 400
                                          ;(setq org-image-actual-width '(400)) 
  ;; if there is a #+ATTR_*: :width 200, resize to 200, otherwise don’t resize
                                          ;(setq org-image-actual-width nil) 
  ;; Never resize and use original width (the default)
                                          ;(setq org-image-actual-width t) 
  (setq org-latex-image-default-option "keepaspectratio,max width=0.95\\linewidth")
  ;(setq org-latex-image-default-width "")
  (setq org-latex-default-figure-position "H")
#+END_SRC
** init-org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; from  https://github.com/zhcosin/dotemacs/blob/master/lisp/init-orgmode.el
  (add-hook 'org-mode-hook 
	    (lambda () (setq truncate-lines nil))) 

  ;; 开启Org-mode文本内语法高亮
  ;(require 'org)
  ;(require 'ox-latex)
  ;(setq org-src-fontify-natively t)

  ;; 在 org 允许文件中执行代码块
  (use-package ob-http)
  (require 'ob-go)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (http . t)
     (awk . t)
     (R . t)
     (org . t)
     (js . t)
     (sql . t)
     (go . t)
     (python . t)
     (shell . t)
     (latex . t)
     (plantuml . t)))

  ;; 设置 org 导出文本文件时的单行文本最大宽度.
  (setq org-ascii-text-width 1000)

  ;; 设置 org 导出为 html 时公式的 mathjax 处理参数
  (setq org-html-mathjax-options
	'((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
	  (scale "100")
	  (align "center")
	  (indent "2em")
	  (mathml nil)))

  (setq org-html-mathjax-template
	"<script type=\"text/javascript\" src=\"%PATH\"></script>")


  ;; for export latex
  (add-to-list 'org-latex-classes
	       '("ctexart"
		 "\\documentclass[UTF8,a4paper]{ctexart}"
		 ;;"\\documentclass[fontset=none,UTF8,a4paper,zihao=-4]{ctexart}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
		 )
	       )


  (add-to-list 'org-latex-classes
	       '("ctexrep"
		 "\\documentclass[UTF8,a4paper]{ctexrep}"
		 ("\\part{%s}" . "\\part*{%s}")
		 ("\\chapter{%s}" . "\\chapter*{%s}")
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 )
	       )

  (add-to-list 'org-latex-classes
	       '("ctexbook"
		 "\\documentclass[UTF8,a4paper]{ctexbook}"
		 ;;("\\part{%s}" . "\\part*{%s}")
		 ("\\chapter{%s}" . "\\chapter*{%s}")
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 )
	       )

  (add-to-list 'org-latex-classes
	       '("beamer"
		 "\\documentclass{beamer}
		   \\usepackage[fontset=none,UTF8,a4paper,zihao=-4]{ctex}"
		 org-beamer-sectioning)
	       )


  (setq org-latex-default-class "ctexart")
  (setq org-latex-compiler "xelatex")
  (setq org-latex-pdf-process
  '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  "rm -fr %b.out %b.log %b.tex %b.brf %b.bbl"
   ))

  ;(setq org-latex-pdf-process
  ;  '("xelatex -interaction nonstopmode %f"
  ;    "bibtex %b"
  ;    "xelatex -interaction nonstopmode %f"
  ;    "xelatex -interaction nonstopmode %f"
  ;    "rm -fr %b.out %b.log %b.tex %b.brf %b.bbl"
  ;    ))
  ;(setq org-latex-pdf-process
  ;  '("xelatex -interaction nonstopmode -output-directory %o %f"
  ;    "xelatex -interaction nonstopmode -output-directory %o %f"
  ;    "xelatex -interaction nonstopmode -output-directory %o %f"))

  ;; for math.
  (defun zhcosin/insert-inline-formulas()
    (interactive)
    (insert "\\(  \\)")
    (backward-char 3))

  (define-key org-mode-map (kbd "M-$") 'zhcosin/insert-inline-formulas)
#+END_SRC
** init-auctex

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auctex :defer t :ensure t)

  (load "auctex.el" nil t t)
  ;(load "preview-latex.el" nil t t)
  (if (string-equal system-type "windows-nt")
          (require 'tex-mik))


  ;; Ask which tex file is master instead of always assume current file is master file.
  (setq-default TeX-master nil) ; Query for master file.

  (mapc (lambda (mode)
        (add-hook 'LaTeX-mode-hook mode))
        (list 'LaTeX-math-mode
              'turn-on-reftex
              'linum-mode))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (setq TeX-auto-untabify t     ; remove all tabs before saving
                    TeX-engine 'xetex       ; use xelatex default
                    TeX-show-compilation t) ; display compilation windows
              (TeX-global-PDF-mode t)       ; PDF mode enable, not plain
              (setq TeX-save-query nil)
              (imenu-add-menubar-index)
                (define-key LaTeX-mode-map (kbd "TAB") 'TeX-complete-symbol)))
#+END_SRC

** init-cdlatex

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cdlatex
    :ensure t
    :config
    (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))
#+END_SRC

** init-org2pdf

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; org-latex-packages-alist 第一个元素是要加载宏包的选项，第二个参数是要加载宏包的名字，第三个选项设置为t或者nil，即要加载或者不加载。
  ;;org-mode export to latex, refer: https://emacs-china.org/t/spacemacs-org-mode-pdf/1577
    (require 'ox-latex)
    (setq org-export-latex-listings t)
    ;;org-mode source code setup in exporting to latex
    (add-to-list 'org-latex-listings '("" "listings"))
    (add-to-list 'org-latex-listings '("" "color"))

    (add-to-list 'org-latex-packages-alist
		 '("" "xcolor" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "listings" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "fontspec" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "indentfirst" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "xunicode" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "geometry"))
    (add-to-list 'org-latex-packages-alist
		 '("" "float"))
    (add-to-list 'org-latex-packages-alist
		 '("" "longtable"))
    (add-to-list 'org-latex-packages-alist
		 '("" "tikz"))
    (add-to-list 'org-latex-packages-alist
		 '("" "fancyhdr"))
    (add-to-list 'org-latex-packages-alist
		 '("" "textcomp"))
    (add-to-list 'org-latex-packages-alist
		 '("" "amsmath"))
    (add-to-list 'org-latex-packages-alist
		 '("" "amsthm"))
    (add-to-list 'org-latex-packages-alist
		 '("" "tabularx" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "booktabs" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "grffile" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "wrapfig" t))
    (add-to-list 'org-latex-packages-alist
		 '("normalem" "ulem" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "amssymb" t))
    (add-to-list 'org-latex-packages-alist
		 '("" "capt-of" t))
    (add-to-list 'org-latex-packages-alist
		 '("figuresright" "rotating" t))
    (add-to-list 'org-latex-packages-alist
		 '("Lenny" "fncychap" t))

    (add-to-list 'org-latex-classes
		 '("zhcosin-org-book"
		   "\\documentclass{ctexbook}
  \\usepackage{titlesec}
  \\usepackage{hyperref}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  \\newtheorem{theorem}{定理}[section]
  %\\setCJKmainfont{WenQuanYi Micro Hei} % 设置缺省中文字体
  %\\setCJKsansfont{WenQuanYi Micro Hei}
  %\\setCJKmonofont{WenQuanYi Micro Hei Mono}
  %\\setmainfont{DejaVu Sans} % 英文衬线字体
  %\\setsansfont{DejaVu Serif} % 英文无衬线字体
  %\\setmonofont{DejaVu Sans Mono}
  %\\setmainfont{WenQuanYi Micro Hei} % 设置缺省中文字体
  %\\setsansfont{WenQuanYi Micro Hei}
  %\\setmonofont{WenQuanYi Micro Hei Mono}
  %如果没有它，会有一些 tex 特殊字符无法正常使用，比如连字符。
  \\defaultfontfeatures{Mapping=tex-text}
  % 中文断行
  \\XeTeXlinebreaklocale \"zh\"
  \\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt
  % 代码设置
  \\lstset{numbers=left,
  numberstyle= \\tiny,
  keywordstyle= \\color{ blue!70},commentstyle=\\color{red!50!green!50!blue!50},
  frame=shadowbox,
  breaklines=true,
  rulesepcolor= \\color{ red!20!green!20!blue!20}
  }
  [EXTRA]
  "
		   ("\\chapter{%s}" . "\\chapter*{%s}")
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
		 '("zhcosin-org-article"
		   "\\documentclass{ctexart}
  \\usepackage{titlesec}
  \\usepackage{hyperref}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  \\newtheorem{theorem}{定理}[section]
  \\parindent 2em
  %\\setCJKmainfont{WenQuanYi Micro Hei} % 设置缺省中文字体
  %\\setCJKsansfont{WenQuanYi Micro Hei}
  %\\setCJKmonofont{WenQuanYi Micro Hei Mono}
  %\\setmainfont{DejaVu Sans} % 英文衬线字体
  %\\setsansfont{DejaVu Serif} % 英文无衬线字体
  %\\setmonofont{DejaVu Sans Mono}
  %\\setmainfont{WenQuanYi Micro Hei} % 设置缺省中文字体
  %\\setsansfont{WenQuanYi Micro Hei}
  %\\setmonofont{WenQuanYi Micro Hei Mono}
  %如果没有它，会有一些 tex 特殊字符无法正常使用，比如连字符。
  \\defaultfontfeatures{Mapping=tex-text}
  % 中文断行
  \\XeTeXlinebreaklocale \"zh\"
  \\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt
  % 代码设置
  \\lstset{numbers=left,
  numberstyle= \\tiny,
  keywordstyle= \\color{ blue!70},commentstyle=\\color{red!50!green!50!blue!50},
  frame=shadowbox,
  breaklines=true,
  rulesepcolor= \\color{ red!20!green!20!blue!20}
  }
  [EXTRA]
  "
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
		 '("zhcosin-org-beamer"
		   "\\documentclass{beamer}
  \\usepackage[slantfont, boldfont]{xeCJK}
  % beamer set
  \\usepackage[none]{hyphenat}
  \\usepackage[abs]{overpic}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  \\newtheorem{theorem}{定理}[section]
  \\setCJKmainfont{WenQuanYi Micro Hei} % 设置缺省中文字体
  \\setCJKsansfont{WenQuanYi Micro Hei}
  \\setCJKmonofont{WenQuanYi Micro Hei Mono}
  \\setmainfont{DejaVu Sans} % 英文衬线字体
  \\setsansfont{DejaVu Serif} % 英文无衬线字体
  \\setmonofont{DejaVu Sans Mono}
  %\\setmainfont{WenQuanYi Micro Hei} % 设置缺省中文字体
  %\\setsansfont{WenQuanYi Micro Hei}
  %\\setmonofont{WenQuanYi Micro Hei Mono}
  %如果没有它，会有一些 tex 特殊字符无法正常使用，比如连字符。
  \\defaultfontfeatures{Mapping=tex-text}
  % 中文断行
  \\XeTeXlinebreaklocale \"zh\"
  \\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt
  % 代码设置
  \\lstset{numbers=left,
  numberstyle= \\tiny,
  keywordstyle= \\color{ blue!70},commentstyle=\\color{red!50!green!50!blue!50},
  frame=shadowbox,
  breaklines=true,
  rulesepcolor= \\color{ red!20!green!20!blue!20}
  }
  [EXTRA]
  "
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+END_SRC

* Programming
#+BEGIN_SRC emacs-lisp :tangle yes

  ;;---------------------------------------------------------
  ;; Golang
  ;;---------------------------------------------------------
  (use-package go-mode
    :functions (go-packages-gopkgs go-update-tools)
    :bind (:map go-mode-map
		("C-c R" . go-remove-unused-imports)
		("<f1>" . godoc-at-point))
    :config
    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-envs '("GOPATH" "GO111MODULE" "GOPROXY")))

    ;; Install or update tools
    (defvar go--tools '("golang.org/x/tools/cmd/goimports"
			"github.com/go-delve/delve/cmd/dlv"
			"github.com/josharian/impl"
			"github.com/cweill/gotests/..."
			"github.com/fatih/gomodifytags"
			"github.com/davidrjenni/reftools/cmd/fillstruct")
      "All necessary go tools.")

    ;; Do not use the -u flag for gopls, as it will update the dependencies to incompatible versions
    ;; https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation
    (defvar go--tools-no-update '("golang.org/x/tools/gopls@latest")
      "All necessary go tools without update the dependencies.")

    (defun go-update-tools ()
      "Install or update go tools."
      (interactive)
      (unless (executable-find "go")
	(user-error "Unable to find `go' in `exec-path'!"))

      (message "Installing go tools...")
      (let ((proc-name "go-tools")
	    (proc-buffer "*Go Tools*"))
	(dolist (pkg go--tools-no-update)
	  (set-process-sentinel
	   (start-process proc-name proc-buffer "go" "get" "-v" pkg)
	   (lambda (proc _)
	     (let ((status (process-exit-status proc)))
	       (if (= 0 status)
		   (message "Installed %s" pkg)
		 (message "Failed to install %s: %d" pkg status))))))

	(dolist (pkg go--tools)
	  (set-process-sentinel
	   (start-process proc-name proc-buffer "go" "get" "-u" "-v" pkg)
	   (lambda (proc _)
	     (let ((status (process-exit-status proc)))
	       (if (= 0 status)
		   (message "Installed %s" pkg)
		 (message "Failed to install %s: %d" pkg status))))))))

    ;; Try to install go tools if `gopls' is not found
    (unless (executable-find "gopls")
      (go-update-tools))

    (use-package go-fill-struct)
    (use-package go-impl)

    ;; Install: See https://github.com/golangci/golangci-lint#install
    (use-package flycheck-golangci-lint
      :if (executable-find "golangci-lint")
      :after flycheck
      :defines flycheck-disabled-checkers
      :hook (go-mode . (lambda ()
			 "Enable golangci-lint."
			 (setq flycheck-disabled-checkers '(go-gofmt
							    go-golint
							    go-vet
							    go-build
							    go-test
							    go-errcheck))
			 (flycheck-golangci-lint-setup))))

    (use-package go-tag
      :bind (:map go-mode-map
		  ("C-c t t" . go-tag-add)
		  ("C-c t T" . go-tag-remove))
      :init (setq go-tag-args (list "-transform" "camelcase")))

    (use-package go-gen-test
      :bind (:map go-mode-map
		  ("C-c t g" . go-gen-test-dwim)))

    (use-package gotest
      :bind (:map go-mode-map
		  ("C-c t a" . go-test-current-project)
		  ("C-c t m" . go-test-current-file)
		  ("C-c t ." . go-test-current-test)
		  ("C-c t x" . go-run))))

  ;;---------------------------------------------------------
  ;; Erlang
  ;;---------------------------------------------------------
  ;;---------------------------------------------------------
  ;; wget http://erlang.org/download/otp_src_22.3.tar.gz
  ;; tar zxvf otp_src_22.3.tar.gz
  ;; cd otp_src_22.3
  ;; ./configure --with-ssl && make && make install
  ;;---------------------------------------------------------------
  ; (use-package erlang)

  ;;; "/usr/local/opt/erlang@22/lib/tools-" for mac
  (let* ((emacs-version erlang-version)
	 (tools-path
	  (concat "/usr/local/lib/erlang/lib/tools-" emacs-version "/emacs")))
	  ;; (concat "/usr/local/opt/erlang@23/lib/erlang/lib/tools-" emacs-version "/emacs")))
    (when (file-exists-p tools-path)
      (setq load-path (cons tools-path load-path))
      (setq erlang-root-dir "/usr/local/lib/erlang")
      (setq exec-path (cons "/usr/local/lib/erlang/bin" exec-path))
      (require 'erlang-start)
      (defvar inferior-erlang-prompt-timeout t)))
  (setq erlang-man-root-dir "/usr/local/opt/erlang/lib/erlang/man") 

  (defun get-erl-man ()
    (interactive)
    (let* ((man-path "/usr/local/opt/erlang/lib/erlang/man")
	   (man-args (format "-M %s %s" man-path (current-word))))
      (man man-args)))

  (defun erlang-insert-binary ()
    (interactive)
    (insert "<<\"\">>")
    (backward-char 3)
    )
  (defun org-insert-header ()
    (interactive)
    (insert "<<\"\">>")
    (backward-char 3)
    )

  ;;---------------------------------------------------------
  ;; C/C++ Mode
  ;;---------------------------------------------------------
  (use-package cc-mode
    :ensure nil
    :bind (:map c-mode-base-map
		("C-c c" . compile))
    :hook (c-mode-common . (lambda () (c-set-style "stroustrup")))
    :init (setq-default c-basic-offset 4)
    :config
    (use-package modern-cpp-font-lock
      :diminish
      :init (modern-c++-font-lock-global-mode t)))

  ;;---------------------------------------------------------
  ;; Python Mode
  ;; Install: pip install pyflakes autopep8
  ;;---------------------------------------------------------
  (use-package python
    :ensure nil
    :hook (inferior-python-mode . (lambda ()
				    (process-query-on-exit-flag
				     (get-process "Python"))))
    :init
    ;; Disable readline based native completion
    (setq python-shell-completion-native-enable nil)
    :config
    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems stupidly make the unversioned one point at Python 2.
    (when (and (executable-find "python3")
	       (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))

    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))

    ;; Live Coding in Python
    (use-package live-py-mode))

  ;;---------------------------------------------------------
  ;; rust
  ;;---------------------------------------------------------

  (use-package rust-mode
    :config
    (setq rust-format-on-save t)
    )

  ;;---------------------------------------------------------
  ;; Other languages
  ;;---------------------------------------------------------
  (use-package sh-script :defer t :config (setq sh-basic-offset 4))
  (use-package lua-mode  :defer t :config (add-hook 'lua-mode-hook #'company-mode))
  (use-package yaml-mode :defer t :config (add-hook 'yaml-mode-hook #'flycheck-mode))
  (use-package flycheck-yamllint
    :defer t
    :init
    (progn (eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))

  ;;---------------------------------------------------------
  ;; Dash
  ;;---------------------------------------------------------
  (use-package dash-at-point :ensure t)


  ;; https://robert.kra.hn/posts/rust-emacs-setup/
  ;; DEBUGGING
  ;; brew install cmake llvm
  ;; git clone https://github.com/lldb-tools/lldb-mi
  ;; mkdir -p lldb-mi/build
  ;; cd lldb-mi/build
  ;; cmake ..
  ;; cmake --build .
  ;; ln -s $PWD/src/lldb-mi /usr/local/bin/lldb-mi
  (when (executable-find "lldb-mi")
    (use-package dap-mode
      :ensure
      :config
      (dap-ui-mode)
      (dap-ui-controls-mode 1)

      (require 'dap-lldb)
      (require 'dap-gdb-lldb)
      ;; installs .extension/vscode
      (dap-gdb-lldb-setup)
      (dap-register-debug-template
       "Rust::LLDB Run Configuration"
       (list :type "lldb"
	     :request "launch"
	     :name "LLDB::Run"
	     :gdbpath "rust-lldb"
	     ;; uncomment if lldb-mi is not in PATH
	     ;; :lldbmipath "path/to/lldb-mi"
	     ))))

#+END_SRC
* AutoInsert
  #+BEGIN_SRC emacs-lisp :tangle yes
    (load "autoinsert")
    (auto-insert-mode)
    (setq auto-insert t)
    (setq auto-insert-query t)
    (add-hook 'find-file-hooks 'auto-insert)
    (setq auto-insert-alist
	  (append '(
		    (("\\.go$" . "golang header")
		     nil
		     "//---------------------------------------------------------------------\n"
		     "// @Copyright (c) 2020-2021 GLD Enterprise, Inc. (https://glodon.com)\n"
		     "// @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
		     "// @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
		     "//----------------------------------------------------------------------\n"
		     _
		     ))
		  auto-insert-alist))
    (setq auto-insert-alist
	  (append '(
		    (("\\.erl$" . "erlang header")
		     nil
		     "%%%-------------------------------------------------------------------\n"
		     "%%% @Copyright (c) 2020-2021 GLD Enterprise, Inc. (https://glodon.com)\n"
		     "%%% @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
		     "%%% @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
		     "%%%-------------------------------------------------------------------\n"
		     _
		     ))
		  auto-insert-alist))
    (setq auto-insert-alist
	  (append '(
		    (("\\.org$" . "org header")
		     nil
		     "#+title: TODO\n"
		     "#+author: 周学浩\n"
		     "#+email: zhouxh-e@glodon.com\n"
		     "#+date:" (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
		     "#+OPTIONS: ^:nil\n"
		     "#+OPTIONS: toc:nil\n"
		     "#+LATEX_CLASS: zhcosin-org-article\n"
		     "#+LATEX_HEADER: \\hypersetup{colorlinks=true,linkcolor=blue}\n"
		     "#+LATEX_HEADER: \\makeatletter \\def\\@maketitle{\\null \\begin{center} {\\vskip 5em \\Huge \\@title} \\vskip 30em {\\LARGE \\@author} \\vskip 3em {\\LARGE \\@date} \\end{center} \\newpage} \\makeatother\n\n"
		     "* 目录 :TOC_2_org:"
		     _
		     ))
		  auto-insert-alist))

#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; -----------------------------------------------------------------------------------------------------
  ;; REFER: https://emacstalk.github.io/post/019/
  ;; https://willschenk.com/articles/2020/tramp_tricks/
  ;; -----------------------------------------------------------------------------------------------------

  ;; Remote SSH
  ;; C-x C-f /remotehost:filename RET (or /method:user@remotehost:filename)
  ;; type C-x C-f /ssh:root@ssb.willschenk.com:/etc/host= it connects over ssh to the remote server and edits that file.
  ;; dired mode also works, so if you want to move around just C-x C-f and select the directory, then you can navigate around as you normally would.
  ;; C-x C-f /sudo::/etc/hosts
  ;; Another fun trick is to edit a file inside of a docker container. Is this what docker is used for? No,
  ;; but it’s sometimes useful if you are debugging a docker file or whatever and need a tigher feedback loop.
  (use-package tramp
    :ensure nil
    :defer t
    :custom
    (setq tramp-default-method "ssh"))

#+END_SRC
* Font
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; stolen from https://github.com/cabins/.emacs.d/blob/dev/lisp/init-ui.el
  ;; adjust the fonts
  (require 'subr-x)

  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))

  (defun cabins/font-setup ()
    "Font setup."

    (interactive)
    (when (display-graphic-p)
      ;; Default font
      (cl-loop for font in '("Consolas" "Monaco" "Hack" "Source Code Pro" "Menlo" "DejaVu Sans Mono")
	       when (font-installed-p font)
	       return (set-face-attribute 'default nil :family font))

      ;; Unicode characters
      (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
	       when (font-installed-p font)
	       return (set-fontset-font t 'unicode font nil 'prepend))

      ;; Emoji
      (cl-loop for font in '("Noto Color Emoji" "Apple Color Emoji")
	       when (font-installed-p font)
	       return (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend))

      ;; Chinese characters
      (cl-loop for font in '("FZLanTingHeiS-EL-GB" "PingFang SC" "Microsoft Yahei UI" "Microsoft Yahei" "STFangsong")
	       when (font-installed-p font)
	       return (progn
			;(setq face-font-rescale-alist `((,font . 1.2)))
			(set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family font))))))

  (add-hook 'emacs-startup-hook 'cabins/font-setup)
  (when (daemonp) (add-hook 'after-make-frame-functions (lambda (frame) (with-selected-frame frame (cabins/font-setup)))))

  (set-face-attribute 'default nil :height 140)


#+END_SRC
* Rime
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package posframe :ensure t)

    ;使用 toggle-input-method 来激活，默认快捷键为 C-\

    (use-package rime
      :ensure t
      :custom
      (rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
      (default-input-method "rime")
      :config
      (setq rime-user-data-dir "~/Library/Rime/")
      (setq rime-show-candidate 'posframe)
      (setq rime-posframe-style 'vertical) ;horizontal,simple
      (setq rime-disable-predicates
	    '(rime-predicate-evil-mode-p
		  rime-predicate-after-alphabet-char-p
		  rime-predicate-prog-in-code-p))
      (setq rime-inline-ascii-trigger 'shift-l)
      (define-key rime-active-mode-map (kbd "M-j") 'rime-inline-ascii)
      (define-key rime-mode-map (kbd "C-`") 'rime-send-keybinding)
      (setq mode-line-mule-info '((:eval (rime-lighter))))
      (setq rime-posframe-properties
	    (list :background-color "#333333"
		  :foreground-color "#dcdccc"
		  ;;:font "WenQuanYi Micro Hei Mono-14"
		  :font "Sarasa Mono SC Nerd"
		  :internal-border-width 10))
      )
  #+END_SRC
* Platform
#+BEGIN_SRC emacs-lisp :tangle yes

  (defun peng-use-mac-original-keyboard ()
    "这样使用苹果原生的键盘比较符和我的习惯"
    (interactive)
    (setq mac-command-modifier 'control)
    (setq mac-right-command-modifier 'meta)
    (setq mac-right-option-modifier 'control)
    (setq mac-control-modifier 'control)
    (setq mac-right-control-modifier 'control)
    )

  (when (x/system-is-mac)
    (setq mac-command-modifier 'meta
	  mac-option-modifier 'none)

    (defun copy-from-osx ()
      (shell-command-to-string "pbpaste"))
    (defun paste-to-osx (text &optional push)
      (let ((process-connection-type nil))
	(let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	  (process-send-string proc text)
	  (process-send-eof proc))))
    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx)

    ;; Trash for safe
    (defun move-file-to-trash (file)
      "Use `trash' to move FILE to the system trash.
      When using Homebrew, install it using \"brew install trash\"."
      (call-process (executable-find "trash")
		    nil 0 nil
		    file))
    (setq trash-directory "~/.Trash/emacs")
    (setq delete-by-moving-to-trash t)
    (defun system-move-file-to-trash (file)
      "Use \"trash\" to move FILE to the system trash.
	When using Homebrew, install it using \"brew install trash\"."
      (call-process (executable-find "trash")
		    nil 0 nil
		    file))
    (message "Wellcome To Mac OS X, Have A Nice Day!!!"))

  (when (x/system-is-linux)
    (defun yank-to-x-clipboard ()
      (interactive)
      (if (region-active-p)
	  (progn
	    (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
	    (message "Yanked region to clipboard!")
	    (deactivate-mark))
	(message "No region active; can't yank to clipboard!"))))

#+END_SRC
* Key-maps

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; {{ specify major mode uses Evil (vim) NORMAL state or EMACS original state.
  ;; You may delete this setup to use Evil NORMAL state always.
  (dolist (p '((minibuffer-inactive-mode . emacs)
	       (calendar-mode . emacs)
	       (special-mode . emacs)
	       (grep-mode . emacs)
	       (Info-mode . emacs)
	       (term-mode . emacs)
	       (sdcv-mode . emacs)
	       (anaconda-nav-mode . emacs)
	       (log-edit-mode . emacs)
	       (vc-log-edit-mode . emacs)
	       (magit-log-edit-mode . emacs)
	       (erc-mode . emacs)
	       (neotree-mode . emacs)
	       (w3m-mode . emacs)
	       (gud-mode . emacs)
	       (help-mode . emacs)
	       (eshell-mode . emacs)
	       (shell-mode . emacs)
	       (xref--xref-buffer-mode . emacs)
	       (dashboard-mode . normal)
	       (color-rg-mode . emacs)
	       (fundamental-mode . normal)
	       (woman-mode . emacs)
	       (sr-mode . emacs)
	       (profiler-report-mode . emacs)
	       (dired-mode . normal)
	       (compilation-mode . emacs)
	       (speedbar-mode . emacs)
	       (ivy-occur-mode . emacs)
	       (ffip-file-mode . emacs)
	       (ivy-occur-grep-mode . normal)
	       (messages-buffer-mode . normal)
	       ))
    (evil-set-initial-state (car p) (cdr p)))


  ;; evil
  (define-key evil-normal-state-map           [escape] 'keyboard-quit)
  (define-key evil-visual-state-map           [escape] 'keyboard-quit)
  (define-key minibuffer-local-map            [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map         [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map    [escape] 'minibuffer-keyboard-quit)
  (define-key evil-normal-state-map "\C-a" 'evil-beginning-of-line)
  (define-key evil-insert-state-map "\C-a" 'evil-beginning-of-line)
  (define-key evil-visual-state-map "\C-a" 'evil-beginning-of-line)
  (define-key evil-motion-state-map "\C-a" 'evil-begin-of-line)
  (define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-insert-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-visual-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-motion-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-normal-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-normal-state-map "\C-b" 'evil-backward-char)
  (define-key evil-insert-state-map "\C-b" 'evil-backward-char)
  (define-key evil-visual-state-map "\C-b" 'evil-backward-char)
  (define-key evil-normal-state-map "\C-n" 'evil-next-line)
  (define-key evil-insert-state-map "\C-n" 'evil-next-line)
  (define-key evil-visual-state-map "\C-n" 'evil-next-line)
  (define-key evil-normal-state-map "\C-p" 'evil-previous-line)
  (define-key evil-insert-state-map "\C-p" 'evil-previous-line)
  (define-key evil-visual-state-map "\C-p" 'evil-previous-line)
  (define-key evil-normal-state-map "\C-w" 'evil-delete)
  (define-key evil-insert-state-map "\C-w" 'evil-delete)
  (define-key evil-visual-state-map "\C-w" 'evil-delete)
  (define-key evil-normal-state-map "\C-y" 'yank)
  (define-key evil-insert-state-map "\C-y" 'yank)
  (define-key evil-visual-state-map "\C-y" 'yank)
  (define-key evil-normal-state-map "\C-k" 'kill-line)
  (define-key evil-insert-state-map "\C-k" 'kill-line)
  (define-key evil-visual-state-map "\C-k" 'kill-line)
  (defun evil-escape-or-quit (&optional prompt)
    (interactive)
    (cond
     ((or (evil-normal-state-p) (evil-insert-state-p) (evil-visual-state-p)
	  (evil-replace-state-p) (evil-visual-state-p)) [escape])
     (t (kbd "C-g"))))
  (define-key key-translation-map     (kbd "C-q") #'evil-escape-or-quit)
  (define-key evil-operator-state-map (kbd "C-q") #'evil-escape-or-quit)
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)


  (define-key dired-mode-map           (kbd "e")   'wdired-change-to-wdired-mode)
  (define-key evil-normal-state-map    (kbd "/")   'swiper)
  (define-key evil-normal-state-map    (kbd "_")   'projectile-dired)
  (define-key evil-normal-state-map    (kbd "-")   'dired-jump)
  (define-key evil-normal-state-map    (kbd "C-s") 'save-buffer)
  (define-key company-active-map       (kbd "C-n") 'company-select-next)
  (define-key company-active-map       (kbd "C-p") 'company-select-previous)
  (define-key evil-insert-state-map    (kbd "C-g") 'evil-normal-state)
  (define-key rust-mode-map            (kbd "M-1") 'rust-run)


  ;; C-h b 找到快捷键bind function---remap
  (with-eval-after-load 'evil
    (define-key evil-motion-state-map (kbd "C-]") nil)
    (define-key evil-motion-state-map (kbd "C-t") nil)
    (define-key evil-motion-state-map (kbd "C-6") nil)

    (define-key evil-motion-state-map "\C-]"  'lsp-bridge-jump)
    (define-key evil-motion-state-map "g\C-]" 'lsp-bridge-jump)

    (define-key evil-normal-state-map "\C-t"  'lsp-bridge-jump-back)
    (define-key evil-motion-state-map "g\C-t" 'lsp-bridge-jump-back)

    (with-eval-after-load 'company

      (define-key company-active-map (kbd "<return>") nil)
      (define-key company-active-map (kbd "<tab>") nil)
      (define-key company-active-map (kbd "RET") nil)
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-m") nil)
      (define-key company-active-map (kbd "TAB") 'company-complete-selection)
      (define-key company-active-map (kbd "M-h") 'company-complete-selection)
      (define-key company-active-map (kbd "M-H") 'company-complete-common)
      (define-key company-active-map (kbd "M-w") 'company-show-location)
      (define-key company-active-map (kbd "M-s") 'company-search-candidates)
      (define-key company-active-map (kbd "M-S") 'company-filter-candidates)
      (define-key company-active-map (kbd "M-n") 'company-select-next)
      (define-key company-active-map (kbd "M-p") 'company-select-previous)
      (define-key company-active-map (kbd "M-i") 'yas-expand)


      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil)
      (evil-define-key nil company-active-map (kbd "C-n") #'company-select-next)
      (evil-define-key nil company-active-map (kbd "C-p") #'company-select-previous))
    )

  ;;see here: http://xahlee.info/emacs/emacs/keyboard_shortcuts_examples.html

  (key-chord-define-global "bn" 'buffer-flip-forward)
  (key-chord-define-global "bp" 'buffer-flip-backward)
  (key-chord-define-global "bf" 'buffer-flip)
  (key-chord-define-global "bo" 'buffer-flip-other-window)
  (key-chord-define-global "ba" 'buffer-flip-abort)
  (key-chord-define-global "jk" 'evil-normal-state)
  (key-chord-define-global "jb" 'ibuffer)
  (key-chord-define-global "g]"  #'xref-find-definitions)
  (key-chord-define-global "gj"  #'xref-find-references)
  (key-chord-define-global "gb"  #'xref-pop-marker-stack)
  (key-chord-define-global "j0" 'delete-window)
  (key-chord-define-global "j1" 'delete-other-windows)
  (key-chord-define-global "jz" 'magit-status)
  (key-chord-define-global "kb" 'gh/kill-current-buffer)

  ;; (global-set-key (kbd "s-x g") 'color-rg-search-symbol)
  ;; (global-set-key (kbd "s-x h") 'color-rg-search-input)
  ;; (global-set-key (kbd "s-x j") 'color-rg-search-symbol-in-project)
  ;; (global-set-key (kbd "s-x k") 'color-rg-search-input-in-project)
  ;; (global-set-key (kbd "s-x ,") 'color-rg-search-symbol-in-current-file)
  ;; (global-set-key (kbd "s-x .") 'color-rg-search-input-in-current-file)

  (global-set-key (kbd "C-x y") 'dash-at-point)
  (global-set-key (kbd "M-]")   'dumb-jump-go)
  (global-set-key (kbd "M-t")   'dumb-jump-back)

  (global-set-key (kbd "M-n")   'hold-line-scroll-down)
  (global-set-key (kbd "M-p")   'hold-line-scroll-up)

  ;; (global-set-key (kbd "M-o")   'watch-other-window-up)
  ;; (global-set-key (kbd "M-p")   'watch-other-window-down)
  ;; (global-set-key (kbd "M-p")   'watch-other-window-up-line)
  ;; (global-set-key (kbd "M-p")   'watch-other-window-down-line)

  (global-set-key (kbd "C-/")   'undo-tree-undo)
  (global-set-key (kbd "C-?")   'undo-tree-redo)

  (global-set-key (kbd "C-c p f")   'projectile-find-file)
  (global-set-key (kbd "C-c p b")   'projectile-switch-to-buffer)
  (global-set-key (kbd "C-c p p")   'projectile-switch-project)

  (global-set-key (kbd "C-c SPC") 'avy-goto-char-2)
  (global-set-key (kbd "M-g f")   'avy-goto-line)
  (global-set-key (kbd "M-g w")   'avy-goto-word-1)

  (global-set-key (kbd "C-M-s") 'color-rg-search-input)
  (global-set-key (kbd "C-M-;") 'magit-status)
  (global-set-key (kbd "C-x G") 'git-messenger:popup-message)

  (global-set-key (kbd "C-6")   'lsp-bridge-popup-documentation)
  (global-set-key (kbd "C-9")   'lsp-bridge-find-references) 
  (global-set-key (kbd "C-0")   'lsp-bridge-rename) 
  (global-set-key (kbd "M-s-k") 'lsp-bridge-diagnostic-jump-prev)            ;显示上一个错误 
  (global-set-key (kbd "M-s-l") 'lsp-bridge-diagnostic-ignore)               ;忽略当前的错误
  (global-set-key (kbd "M-s-n") 'lsp-bridge-popup-documentation-scroll-up)   ;向下滚动文档
  (global-set-key (kbd "M-s-p") 'lsp-bridge-popup-documentation-scroll-down) ;向上滚动文档


#+END_SRC
