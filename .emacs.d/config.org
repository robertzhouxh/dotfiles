:PROPERTIES: header-args:emacs-lisp :tangle
:ID:       E7980AE6-D0E5-4796-83D5-2A0F81400FC2
:END:
#+title: 我的 Emacs 配置
#+date: 2023-02-10 15:21:00 
#+auto_tangle: t

* Custom Vars and Const

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq erlang-path-prefix (file-truename "~/.asdf/installs/erlang/24.3.4"))
  (setq erlang-lib-tools-version "3.5.2")
  (setq plantuml-path "/opt/homebrew/Cellar/plantuml/1.2023.2/libexec/plantuml.jar")
  (setq http-proxy "127.0.0.1:8123")     ; HTTP/HTTPS proxy
  (setq socks-proxy "127.0.0.1:1080")    ; SOCKS proxy
  (setq epg-gpg-program "gpg2")

  (defvar zxh-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/")
  (defvar zxh-emacs-rime-share-data-dir (concat (getenv "HOME") "/Library/Rime"))
  ;;(defvar zxh-emacs-rime-share-data-dir (file-truename "~/Library/Rime"))
  (defvar zxh-emacs-root-dir (file-truename "~/.emacs.d"))
  (defvar zxh-emacs-vendor-dir (concat zxh-emacs-root-dir "/vendor"))

#+END_SRC

* Bootstrap use-package

#+BEGIN_SRC emacs-lisp :tangle yes

  (require 'package)
  (setq package-archives '(("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")
                           ))

  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)          ; To prevent initializing twice
    (package-initialize))

  ;; set use-package-verbose to t for interpreted .emacs,
  ;; and to nil for byte-compiled .emacs.elc.
  (eval-and-compile
    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))

  ;; Install use-package if not installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))

  (defun add-subdirs-to-load-path (search-dir)
    (interactive)
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; 过滤出不必要的目录，提升Emacs启动速度
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; 不是目录的文件都移除
                     (not (file-directory-p (concat dir subdir)))
                     ;; 父目录、 语言相关和版本控制目录都移除
                     (member subdir '("." ".." 
                                      "dist" "node_modules" "__pycache__" 
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github")))) 
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升Emacs启动速度
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))
          
            ;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾
            ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动
            (add-to-list 'load-path subdir-path t))
        
          ;; 继续递归搜索子目录
          (add-subdirs-to-load-path subdir-path)))))

  (add-subdirs-to-load-path zxh-emacs-vendor-dir)

#+END_SRC

* Generic

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; 加速
  (setq
   ;; 不要缩放frame.
   frame-inhibit-implied-resize t
   ;; 默认用最简单的模式
   initial-major-mode 'fundamental-mode
   package--init-file-ensured t)
  (setq custom-file "~/.emacs.d/custom.el")

  (if (file-exists-p custom-file)
      (load custom-file))

  (tool-bar-mode -1)                      ;禁用工具栏
  (menu-bar-mode -1)                      ;禁用菜单栏
  (scroll-bar-mode -1)                    ;禁用滚动条

  ;; 增加长行处理性能
  (setq bidi-inhibit-bpa t)
  (setq-default bidi-paragraph-direction 'left-to-right)

  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (fset 'yes-or-no-p 'y-or-n-p)           ;以 y/n代表 yes/no
  (blink-cursor-mode -1)                  ;指针不闪动
  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq use-dialog-box nil)               ;never pop dialog
  (setq inhibit-startup-screen t)         ;inhibit start screen
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
  (setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq word-wrap-by-category t)             ;按照中文折行
  (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮

  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
  (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙

  (setq completion-auto-select nil)       ;避免默认自动选择

  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq scroll-step 1
        scroll-conservatively 10000)

  ;; 不显示 *scratch*
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

  ;; Don't ask me when kill process buffer
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))

  ;; Don't ask me when kill process buffer
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
  ;; --------------------------------------------------------------------------------
  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq-default scroll-step 1
                scroll-preserve-screen-position t
                scroll-up-aggressively 0.01
                scroll-down-aggressively 0.01
                redisplay-dont-pause t
                auto-window-vscroll nil
                ;; Mouse wheel scroll behavior
                mouse-wheel-scroll-amount '(1 ((shift) . 1))
                mouse-wheel-progressive-speed nil
                mouse-wheel-follow-mouse 't
                fast-but-imprecise-scrolling nil)

  ;; idle
  (custom-set-variables '(tramp-verbose 0)) ;设置tramp的响应方式, 关闭后不弹出消息
  (setq max-lisp-eval-depth 40000)          ;lisp最大执行深度
  (setq max-specpdl-size 10000)             ;最大容量
  (setq kill-ring-max 1024)                 ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
  (setq mark-ring-max 1024)                 ;设置的mark ring容量
  (setq eval-expression-print-length nil)   ;设置执行表达式的长度没有限制
  (setq eval-expression-print-level nil)    ;设置执行表达式的深度没有限制
  (auto-compression-mode 1)                 ;打开压缩文件时自动解压缩
  (setq read-quoted-char-radix 16)          ;设置 引用字符 的基数
  (setq global-mark-ring-max 1024)          ;设置最大的全局标记容量
  (global-hl-line-mode 1)                   ;高亮当前行
  (setq isearch-allow-scroll t)             ;isearch搜索时是可以滚动屏幕的
  (setq one-key-popup-window nil)           ;禁止自动弹出窗口
  (setq enable-recursive-minibuffers t)     ;minibuffer 递归调用命令
  (setq history-delete-duplicates t)        ;删除minibuffer的重复历史
  (setq minibuffer-message-timeout 1)       ;显示消息超时的时间
  (setq auto-revert-mode 1)                 ;自动更新buffer
  (show-paren-mode t)                       ;显示括号匹配
  (setq show-paren-style 'parentheses)      ;括号匹配显示但不是烦人的跳到另一个括号。
  (setq blink-matching-paren nil)           ;当插入右括号时不显示匹配的左括号
  (setq message-log-max t)                  ;设置message记录全部消息, 而不用截去
  (setq require-final-newline nil)          ;不自动添加换行符到末尾, 有些情况会出现错误
  (setq ediff-window-setup-function (quote ediff-setup-windows-plain)) ;比较窗口设置在同一个frame里
  (setq x-stretch-cursor t)                 ;光标在 TAB 字符上会显示为一个大方块
  (put 'narrow-to-region 'disabled nil)     ;开启变窄区域
  (setq print-escape-newlines t)            ;显示字符窗中的换行符为 \n
  (setq tramp-default-method "ssh")         ;设置传送文件默认的方法
  (setq void-text-area-pointer nil)         ;禁止显示鼠标指针
  (setq echo-keystrokes 0.1)                ;加快快捷键提示的速度


    ;;; ### Auto-fill ###
    ;;; --- 自动换行
  (setq default-fill-columndefault-fill-column 100)          ;默认显示 100列就换行
  (dolist (hook (list
                 'after-text-mode-hook
                 'message-mode-hook
                 ))
    (add-hook hook #'(lambda () (auto-fill-mode 1))))

  ;;设置tab为4个空格的宽度
  (setq default-tab-width 4)
  ;; Code
  (prefer-coding-system 'utf-8)
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  (setenv "LC_CTYPE" "en_US.UTF-8")
  ;; Encoding
  ;; UTF-8 as the default coding system
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))

  ;; Explicitly set the prefered coding systems to avoid annoying prompt
  ;; from emacs (especially on Microsoft Windows)
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)

  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)

#+END_SRC

* Functions&Const

#+BEGIN_SRC emacs-lisp :tangle yes

  (defconst sys/win32p (eq system-type 'windows-nt) "Are we running on a WinTel system?")
  (defconst sys/linuxp (eq system-type 'gnu/linux) "Are we running on a GNU/Linux?")
  (defconst sys/linux-x-p (and (display-graphic-p) sys/linuxp) "X on GNU/Linux?")
  (defconst sys/macp (eq system-type 'darwin) "running on a Mac system?")
  (defconst sys/mac-x-p (and (display-graphic-p) sys/macp) "X on a Mac system?")
  (defconst sys/mac-cocoa-p (featurep 'cocoa) "with Cocoa on a Mac system?")
  (defconst sys/mac-port-p (eq window-system 'mac) "macport build on a Mac system?")
  (defconst sys/cygwinp (eq system-type 'cygwin) "Are we running on a Cygwin system?")
  (defconst sys/rootp (string-equal "root" (getenv "USER")) "Are you using ROOT user?")
  (defconst emacs/>=27p
    (>= emacs-major-version 27)
    "Emacs is 27 or above.")
  
  (defconst emacs/>=28p
    (>= emacs-major-version 28)
    "Emacs is 28 or above.")
  
  (defconst emacs/>=29p
    (>= emacs-major-version 29)
    "Emacs is 29 or above.")

  (defvar socks-noproxy)
  (defvar socks-server)
  (defcustom http-proxy "127.0.0.1:8123" "Set network proxy." :group 'centaur :type 'string)

  ;; from lazycat emacs config
  (defun org-export-docx ()
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
          (template-file (concat (file-name-as-directory zxh-emacs-root-dir)
                                 "template.docx")))
      (message (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file)) 
      (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                             (buffer-file-name)
                             docx-file
                             template-file
                             ))
      (message "Convert finish: %s" docx-file)))


  ;; --------------------------------------------
  ;; 辅助函数
  ;; --------------------------------------------
  (defun x/system-is-mac () (interactive) (string-equal system-type "darwin"))

  (defun x/system-is-linux () (interactive) (string-equal system-type "gnu/linux"))

  (defun format-function-parameters ()
    "Turn the list of function parameters into multiline."
    (interactive)
    (beginning-of-line)
    (search-forward "(" (line-end-position))
    (newline-and-indent)
    (while (search-forward "," (line-end-position) t)
      (newline-and-indent))
    (end-of-line)
    (c-hungry-delete-forward)
    (insert " ")
    (search-backward ")")
    (newline-and-indent))

  (defun my-org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
            same directory as the org-buffer and insert a link to this file."
    (interactive)
    (org-display-inline-images)

    (setq filename
          (concat
           (make-temp-name
            (concat (file-name-directory (buffer-file-name))
                    "/imgs/"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
                                          ; take screenshot
    (if (eq system-type 'darwin)
        (progn
          (call-process-shell-command "screencapture" nil nil nil nil " -s " (concat
                                                                              "\"" filename "\"" ))
          (call-process-shell-command "convert" nil nil nil nil (concat "\"" filename "\" -resize  \"50%\"" ) (concat "\"" filename "\"" ))
          ))

    (setq relative-dir (concat "./imgs/" (file-name-nondirectory filename)))
    (if (file-exists-p filename)
        (insert (concat "[[file:" relative-dir "]]")))
    (org-display-inline-images))

  ;; --------------------------------------------
  ;; proxy 操作辅助函数
  ;; --------------------------------------------
  (defun proxy-http-show ()
    "Show HTTP/HTTPS proxy."
    (interactive)
    (if url-proxy-services
        (message "Current HTTP proxy is `%s'" http-proxy)
      (message "No HTTP proxy")))

  (defun proxy-http-enable ()
    "Enable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services
          `(("http" . ,http-proxy)
            ("https" . ,http-proxy)
            ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
    (proxy-http-show))

  (defun proxy-http-disable ()
    "Disable HTTP/HTTPS proxy."
    (interactive)
    (setq url-proxy-services nil)
    (proxy-http-show))

  (defun proxy-http-toggle ()
    "Toggle HTTP/HTTPS proxy."
    (interactive)
    (if (bound-and-true-p url-proxy-services)
        (proxy-http-disable)
      (proxy-http-enable)))

  (defun proxy-socks-show ()
    "Show SOCKS proxy."
    (interactive)
    (when (fboundp 'cadddr)                ; defined 25.2+
      (if (bound-and-true-p socks-noproxy)
          (message "Current SOCKS%d proxy is %s:%s"
                   (cadddr socks-server) (cadr socks-server) (caddr socks-server))
        (message "No SOCKS proxy"))))

  (defun proxy-socks-enable ()
    "Enable SOCKS proxy."
    (interactive)
    (require 'socks)
    (setq url-gateway-method 'socks
          socks-noproxy '("localhost"))
    (let* ((proxy (split-string socks-proxy ":"))
           (host (car proxy))
           (port (cadr  proxy)))
      (setq socks-server `("Default server" ,host ,port 5)))
    (setenv "all_proxy" (concat "socks5://" socks-proxy))
    (proxy-socks-show))

  (defun proxy-socks-disable ()
    "Disable SOCKS proxy."
    (interactive)
    (setq url-gateway-method 'native
          socks-noproxy nil
          socks-server nil)
    (setenv "all_proxy" "")
    (proxy-socks-show))

  (defun proxy-socks-toggle ()
    "Toggle SOCKS proxy."
    (interactive)
    (if (bound-and-true-p socks-noproxy)
        (proxy-socks-disable)
      (proxy-socks-enable)))


  ;; --------------------------------------------
  ;; FIle 操作与编码辅助函数
  ;; --------------------------------------------
  (defun x/save-all ()
    "Save all file-visiting buffers without prompting."
    (interactive)
    (save-some-buffers t))

  (defun x/open-init-file ()
    (interactive)
    (find-file user-init-file))

  (defun x/reload-init-file ()
    "Reload init.el file."
    (interactive)
    (load user-init-file)
    (message "Reloaded init.el OK."))

  (defun sudo ()
    "Use TRAMP to `sudo' the current buffer"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
               buffer-file-name))))
  (defun dos2unix ()
    "Convert the current buffer to UNIX file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-unix nil))

  (defun unix2dos ()
    "Convert the current buffer to DOS file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-dos nil))

  (defun delete-trailing-M()
    "Delete `^M' characters in the buffer.
              Same as `replace-string C-q C-m RET RET'."
    (interactive)
    (save-excursion
      (goto-char 0)
      (while (search-forward "\r" nil :noerror)
        (replace-match ""))))

  (defun save-buffer-as-utf8 (coding-system)
    "Revert a buffer with `CODING-SYSTEM' and save as UTF-8."
    (interactive "zCoding system for visited file (default nil):")
    (revert-buffer-with-coding-system coding-system)
    (set-buffer-file-coding-system 'utf-8)
    (save-buffer))

  (defun save-buffer-gbk-as-utf8 ()
    "Revert a buffer with GBK and save as UTF-8."
    (interactive)

    (save-buffer-as-utf8 'gbk))


  ;; --------------------------------------------
  ;; buffer 操作辅助函数
  ;; --------------------------------------------
  (defun switch-to-messages ()
    "Select buffer *message* in the current window."
    (interactive)
    (switch-to-buffer "*Messages*"))

  (defun switch-to-dashboard ()
    "Select buffer *message* in the current window."
    (interactive)
    (switch-to-buffer "*Dashboard*"))

  (defun hold-line-scroll-up ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-up 1)
      (line-move-to-column tmp)
      (forward-line 1)))

  (defun hold-line-scroll-down ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-down 1)
      (line-move-to-column tmp)
      (forward-line -1)))


  ;; -------------------------------------------
  ;; Company 辅助函数
  ;; -------------------------------------------
  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))


  ;; --------------------------------------------
  ;; 文件操作辅助函数
  ;; --------------------------------------------
  (defun +rename-current-file (newname)
    "Rename current visiting file to NEWNAME.
        If NEWNAME is a directory, move file to it."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "No file is visiting"))
       (let ((name (read-file-name "Rename to: " nil buffer-file-name 'confirm)))
         (when (equal (file-truename name)
                      (file-truename buffer-file-name))
           (user-error "Can't rename file to itself"))
         (list name))))
    ;; NEWNAME is a directory
    (when (equal newname (file-name-as-directory newname))
      (setq newname (concat newname (file-name-nondirectory buffer-file-name))))
    (rename-file buffer-file-name newname)
    (set-visited-file-name newname)
    (rename-buffer newname))

  (defun +delete-current-file (file)
    "Delete current visiting FILE."
    (interactive
     (list (or buffer-file-name
               (user-error "No file is visiting"))))
    (when (y-or-n-p (format "Really delete '%s'? " file))
      (kill-this-buffer)
      (delete-file file)))

  (defun +copy-current-file (new-path &optional overwrite-p)
    "Copy current buffer's file to `NEW-PATH'.
          If `OVERWRITE-P', overwrite the destination file without
          confirmation."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "No file is visiting"))
       (list (read-file-name "Copy file to: ")
             current-prefix-arg)))
    (let ((old-path (buffer-file-name))
          (new-path (expand-file-name new-path)))
      (make-directory (file-name-directory new-path) t)
      (copy-file old-path new-path (or overwrite-p 1))))

  (defun +copy-current-filename (file)
    "Copy the full path to the current FILE."
    (interactive
     (list (or buffer-file-name
               (user-error "No file is visiting"))))
    (kill-new file)
    (message "Copying '%s' to clipboard" file))

  (defun +copy-current-buffer-name ()
    "Copy the name of current buffer."
    (interactive)
    (kill-new (buffer-name))
    (message "Copying '%s' to clipboard" (buffer-name)))


  ;; --------------------------------------------
  ;; Window 操作辅助函数
  ;; --------------------------------------------
  (defvar toggle-one-window-window-configuration nil
    "The window configuration use for `toggle-one-window'.")

  (defun toggle-one-window ()
    "Toggle between window layout and one window."
    (interactive)
    (if (equal (length (cl-remove-if #'window-dedicated-p (window-list))) 1)
        (if toggle-one-window-window-configuration
            (progn
              (set-window-configuration toggle-one-window-window-configuration)
              (setq toggle-one-window-window-configuration nil))
          (message "No other windows exist."))
      (setq toggle-one-window-window-configuration (current-window-configuration))
      (delete-other-windows)))

  (defun set-control-w-shortcuts ()
    (define-prefix-command 'my-window-map)
    (global-set-key (kbd "C-w") 'my-window-map)
    (define-key my-window-map (kbd "h") 'windmove-left)
    (define-key my-window-map (kbd "j") 'windmove-down)
    (define-key my-window-map (kbd "k") 'windmove-up)
    (define-key my-window-map (kbd "l") 'windmove-right)
    (define-key my-window-map (kbd "v") 'split-window-right)
    (define-key my-window-map (kbd "b") 'split-window-below)
    (define-key my-window-map (kbd "d") 'delete-window)
    (define-key my-window-map (kbd "D") 'delete-other-windows)
    (define-key my-window-map (kbd "B") 'kill-buffer-and-window)
    (define-key my-window-map (kbd "o") 'toggle-one-window))

#+END_SRC

* Fundamental Plugins

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package use-package-ensure-system-package)
  (use-package protobuf-mode)
  (use-package markdown-mode)
  (use-package dockerfile-mode)
  (use-package nginx-mode)
  (use-package json-mode)
  (use-package json-reformat)
  (use-package comment-dwim-2)
  (use-package buffer-flip)
  (use-package dash-at-point)
  (use-package async :init (async-bytecomp-package-mode 1))
  (use-package projectile :config (projectile-global-mode))
  (use-package flycheck :config (global-flycheck-mode 1))
  (use-package restclient :config (setq restclient-inhibit-cookies t))

  (use-package autorevert :ensure nil :hook (after-init . global-auto-revert-mode))
  (use-package so-long :ensure nil :hook (after-init . global-so-long-mode)) ;; emacs27+ new feature
  (use-package highlight-parentheses :init (setq hl-paren-colors '("DarkOrange" "DeepSkyBlue" "DarkRed")))
  (use-package rainbow-delimiters :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  (use-package exec-path-from-shell :if (or sys/mac-x-p sys/linux-x-p) :config (exec-path-from-shell-initialize))
  (use-package which-key
    :hook (after-init . which-key-mode)
    :config
    (progn
      (which-key-mode)
      (which-key-setup-side-window-right)))

  (use-package all-the-icons
    :ensure t
    :when (display-graphic-p)
    :commands all-the-icons-install-fonts
    )

  ;; 其他原生接口的前端 
  (use-package ivy
    :init (setq ivy-use-virtual-buffers t
                ivy-count-format "%d/%d ")
    :config (ivy-mode t))
  ;; 取代原生的一些常用指令
  (use-package counsel :after ivy :config (counsel-mode))
  ;; 取代原生的 I-search
  (use-package swiper :after ivy)
  (use-package counsel-projectile
    :after (counsel projectile)
    :preface
    (eval-when-compile
      (declare-function counsel-projectile-mode nil))
    :commands
    (counsel-projectile-rg
     counsel-projectile-find-file
     counsel-projectile-switch-project
     counsel-projectile-switch-to-buffer)
    :config
    (counsel-projectile-mode t))

#+END_SRC

* Indent Tab

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (defun adjust-languages-indent (n)
    (setq-local c-basic-offset n)

    (setq-local coffee-tab-width n)
    (setq-local javascript-indent-level n)
    (setq-local js-indent-level n)
    (setq-local js2-basic-offset n)

    (setq-local web-mode-attr-indent-offset n)
    (setq-local web-mode-attr-value-indent-offset n)
    (setq-local web-mode-code-indent-offset n)
    (setq-local web-mode-css-indent-offset n)
    (setq-local web-mode-markup-indent-offset n)
    (setq-local web-mode-sql-indent-offset n)

    (setq-local css-indent-offset n)

    (setq-local typescript-indent-level n))

  (dolist (hook (list
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'asm-mode-hook
                 'sh-mode-hook
                 'haskell-cabal-mode-hook
                 'ruby-mode-hook
                 'qml-mode-hook
                 'scss-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 4)
                       )))

  (dolist (hook (list
                 'web-mode-hook
                 'js-mode-hook
                 'typescript-mode-hook
                 ))
    (add-hook hook #'(lambda ()
                       (setq indent-tabs-mode nil)
                       (adjust-languages-indent 2)
                       )))

#+END_SRC

* Quick Search And Move

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package avy)
  (use-package vundo
   :defer t
   :load-path "~/.emacs.d/vendor/vundo"
   :commands (vundo)
   :config
   ;; Take less on-screen space.
   (setq vundo-compact-display t)
   (custom-set-faces
    '(vundo-node ((t (:foreground "#808080"))))
    '(vundo-stem ((t (:foreground "#808080"))))
    '(vundo-highlight ((t (:foreground "#FFFF00")))))
   ;; Use `HJKL` VIM-like motion
   (define-key vundo-mode-map (kbd "l") #'vundo-forward)
   (define-key vundo-mode-map (kbd "h") #'vundo-backward)
   (define-key vundo-mode-map (kbd "j") #'vundo-next)
   (define-key vundo-mode-map (kbd "k") #'vundo-previous)
   (define-key vundo-mode-map (kbd "a") #'vundo-stem-root)
   (define-key vundo-mode-map (kbd "e") #'vundo-stem-end)
   (define-key vundo-mode-map (kbd "q") #'vundo-quit)
   (define-key vundo-mode-map (kbd "C-g") #'vundo-quit)
   (define-key vundo-mode-map (kbd "RET") #'vundo-confirm))

  (use-package ag
    :config
    (progn
      (setq ag-highlight-search t)
      (bind-key "n" 'compilation-next-error ag-mode-map)
      (bind-key "p" 'compilation-previous-error ag-mode-map)
      (bind-key "N" 'compilation-next-file ag-mode-map)
      (bind-key "P" 'compilation-previous-file ag-mode-map)))

  (use-package dumb-jump
    :config
    (setq dumb-jump-aggressive nil)
    (setq dumb-jump-selector 'ivy)
    (setq dumb-jump-prefer-searcher 'ag))

  ;; Hiding structured data
  (use-package hideshow
    :hook (prog-mode . hs-minor-mode)
    :config
    (defconst hideshow-folded-face '((t (:inherit 'font-lock-comment-face :box t))))

    (defface hideshow-border-face
      '((((background light))
         :background "rosy brown" :extend t)
        (t
         :background "sandy brown" :extend t))
      "Face used for hideshow fringe."
      :group 'hideshow)

    (define-fringe-bitmap 'hideshow-folded-fringe
      (vector #b00000000
              #b00000000
              #b00000000
              #b11000011
              #b11100111
              #b01111110
              #b00111100
              #b00011000))

    (defun hideshow-folded-overlay-fn (ov)
      "Display a folded region indicator with the number of folded lines."
      (when (eq 'code (overlay-get ov 'hs))
        (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
               (info (format " (%d)..." nlines)))
          ;; fringe indicator
          (overlay-put ov 'before-string (propertize " "
                                                     'display '(left-fringe hideshow-folded-fringe
                                                                            hideshow-border-face)))
          ;; folding indicator
          (overlay-put ov 'display (propertize info 'face hideshow-folded-face)))))
    :custom
    (hs-set-up-overlay #'hideshow-folded-overlay-fn))

#+END_SRC

* Company && Yasnippet

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;(use-package expand-region :bind ("C-=" . er/expand-region))
  (use-package yasnippet
    :bind
    ("C-c y s" . yas-insert-snippet)
    ("C-c y v" . yas-visit-snippet-file)
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-global-mode 1))

  ;; 使用 lsp-bridge 时， 请先关闭其他补全插件， 比如 lsp-mode, eglot, company, corfu 等等， lsp-bridge 提供从补全后端、 补全前端到多后端融合的全套解决方案。
  ;; (use-package company-restclient)
  ;; (use-package company-nginx :after (nginx-mode) :hook((nginx-mode . company-nginx-keywords)))
  ;; ;;Run M-x company-tabnine-install-binary to install the TabNine binary for your system.
  ;; (use-package company-tabnine :config (add-to-list 'company-backends #'company-tabnine))
  ;; (use-package company
  ;;   :bind
  ;;   (:map company-mode-map
  ;;         ("<tab>". tab-indent-or-complete)
  ;;         ("TAB". tab-indent-or-complete))
  ;;   :config
  ;;   (progn (setq company-idle-delay 0.5)
  ;;          (setq company-show-numbers t)))

  (use-package youdao-dictionary
    :commands youdao-dictionary-play-voice-of-current-word
    :init
    (setq url-automatic-caching t
          youdao-dictionary-use-chinese-word-segmentation t) ; 中文分词
    (defun my-youdao-search-at-point ()
      "Search word at point and display result with `posframe', `pos-tip', or buffer."
      (interactive)
      (if (display-graphic-p)
          (youdao-dictionary-search-at-point-posframe)
        (youdao-dictionary-search-at-point))))

#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp :tangle no

  ;; Directory operations
  (use-package dired
    :ensure nil
    :bind (:map dired-mode-map
           ("C-c C-p" . wdired-change-to-wdired-mode))
    :config
    ;; Always delete and copy recursively
    (setq dired-recursive-deletes 'always
          dired-recursive-copies 'always)
    (when sys/macp
      ;; Suppress the warning: `ls does not support --dired'.
      (setq dired-use-ls-dired nil)

      (when (executable-find "gls")
        ;; Use GNU ls as `gls' from `coreutils' if available.
        (setq insert-directory-program "gls")))

    (when (or (and sys/macp (executable-find "gls"))
              (and (or sys/linuxp sys/cygwinp) (executable-find "ls")))
      ;; Using `insert-directory-program'
      (setq ls-lisp-use-insert-directory-program t)
      ;; Show directory first
      (setq dired-listing-switches "-alh --group-directories-first"))

    ;; Show git info in dired
    (use-package dired-git-info
      :bind (:map dired-mode-map
             (")" . dired-git-info-mode)))

    ;; Allow rsync from dired buffers
    (use-package dired-rsync
      :bind (:map dired-mode-map
             ("C-c C-r" . dired-rsync)))

    ;; Colorful dired
    (use-package diredfl
      :ensure nil
      :hook (dired-mode . diredfl-mode))

    ;; Extra Dired functionality
    (use-package dired-aux :ensure nil)
    (use-package dired-x
      :ensure nil
      :demand t
      :config
      (let ((cmd (cond (sys/mac-x-p "open")
                       (sys/linux-x-p "xdg-open")
                       (sys/win32p "start")
                       (t ""))))
        (setq dired-guess-shell-alist-user
              `(("\\.pdf\\'" ,cmd)
                ("\\.docx\\'" ,cmd)
                ("\\.\\(?:djvu\\|eps\\)\\'" ,cmd)
                ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" ,cmd)
                ("\\.\\(?:xcf\\)\\'" ,cmd)
                ("\\.csv\\'" ,cmd)
                ("\\.tex\\'" ,cmd)
                ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
                ("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
                ("\\.html?\\'" ,cmd)
                ("\\.md\\'" ,cmd))))

      (setq dired-omit-files
            (concat dired-omit-files
                    "\\|^.DS_Store$\\|^.projectile$\\|^.git*\\|^.svn$\\|^.vscode$\\|\\.js\\.meta$\\|\\.meta$\\|\\.elc$\\|^.emacs.*"))))


    ;; use one window to open new buffer in dired-mode
    (put 'dired-find-alternate-file 'disabled nil)

#+END_SRC

* Performance

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Disable garbage collection when entering commands.
  (defun max-gc-limit ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun reset-gc-limit ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'max-gc-limit)
  (add-hook 'minibuffer-exit-hook #'reset-gc-limit)

  ;; Improve the performance of rendering long lines.
  (setq-default bidi-display-reordering nil)

  ;;; Track Emacs commands frequency
  (use-package keyfreq
    :ensure t
    :config (keyfreq-mode 1) (keyfreq-autosave-mode 1))

#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package vc
    :ensure nil
    :custom
    ;; 打开链接文件时，不进行追问
    (vc-follow-symlinks t)
    (vc-allow-async-revert t)
    (vc-handled-backends '(Git)))

  (use-package diff-hl
    :ensure t
    :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
           (magit-pre-refresh  . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :init
    (global-diff-hl-mode t)
    :config
    ;; When Emacs runs in terminal, show the indicators in margin instead.
    (unless (display-graphic-p)
      (diff-hl-margin-mode)))

  ;; (use-package magit
  ;;   :ensure t
  ;;   :hook (git-commit-mode . flyspell-mode)
  ;;   :bind (("C-x g"   . magit-status)
  ;;          ("C-x M-g" . magit-dispatch)
  ;;          ("C-c M-g" . magit-file-dispatch))
  ;;   :custom
  ;;   (magit-diff-refine-hunk t)
  ;;   (magit-ediff-dwim-show-on-hunks t))
  ;; (use-package magit-delta
  ;;   :ensure t
  ;;   :hook (magit-mode . magit-delta-mode)
  ;;   :config
  ;;   (setq magit-delta-hide-plus-minus-markers nil)
  ;;   )

#+END_SRC

* Evil-Mode

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun x/config-evil-leader ()
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      ","  'avy-goto-char-2
      ":"  'eval-expression

      "A"  'align-regexp

      ;; buffer & bookmark
      "bb" 'switch-to-buffer
      "bo" 'switch-to-buffer-other-window
      "bn" '+copy-current-buffer-name
      "bv" 'revert-buffer
      "bz" 'bury-buffer         ;隐藏当前buffer
      "bZ" 'unbury-buffer         ;反隐藏当前buffer

      "bK" 'kill-other-window-buffer ;;;关闭其他窗口的buffer

      ;; --------------
      "bm" 'bookmark-set
      "bM" 'bookmark-set-no-overwrite
      "bi" 'bookmark-insert
      "br" 'bookmark-rename
      "bd" 'bookmark-delete
      "bw" 'bookmark-write
      "bj" 'bookmark-jump
      "bJ" 'bookmark-jump-other-window
      "bl" 'bookmark-bmenu-list
      "bs" 'bookmark-save

      ;; code
      "cc" 'comment-dwim
      "cd" 'delete-trailing-whitespace
      "cl" 'toggle-truncate-lines
      "cm" 'delete-trailing-M

      ;; dired
      "dj" 'dired-jump
      "dJ" 'dired-jump-other-window

      ;; external Apps
      "eY" 'youdao-dictionary-search-from-input
      "ep" 'plantuml–parse-headlines
      "ej" 'plantuml-display-json-open
      "ey" 'plantuml-display-yaml-open
      "em" 'plantuml-org-to-mindmap-open
      "ew" 'plantuml-org-to-wbs-open
      "ea" 'plantuml-auto-convert-open
      "es" 'my-org-screenshot 
      "eo" 'org-export-docx

      ;; file
      "fa" 'x/save-all
      "fu" 'sudo
      "ff" 'find-file
      "fF" 'find-file-other-frame
      "f/" 'find-file-other-window
      "fC" '+copy-current-file
      "fD" '+delete-current-file
      "fy" '+copy-current-filename
      "fR" '+rename-current-file
      "fr" 'recentf-open-files
      "fl" 'find-file-literally
      "f-" 'text-scale-decrease        ;减小字体大小
      "f=" 'text-scale-increase        ;增加字体大小
      "fe" '(lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory)))
      "fr" '(lambda () (interactive) (load-file (expand-file-name "init.el" user-emacs-directory)))

      ;; magit
      "gs" 'magit-status
      "gb" 'magit-branch-checkout
      "gp" 'magit-pull
      "gB" 'global-blamer-mode
      "gt" 'magit-blame-toggle
      "G"  'aborn/simple-git-commit-push

      ;; project && proxy
      "pf" 'counsel-projectile-find-file
      "pp" 'counsel-projectile-switch-project
      "pb" 'counsel-projectile-switch-to-buffer
      "pk" 'projectile-kill-buffers
      "ps" 'proxy-socks-toggle
      "ph" 'proxy-http-toggle

      ;; search
      "sI" 'imenu
      "s/" 'counsel-rg
      "sj" 'evil-show-jumps
      "sm" 'evil-show-marks
      "sr" 'evil-show-registers
      "si" 'color-rg-search-input
      "ss" 'color-rg-search-symbol-in-project
      "sp" 'color-rg-search-project
      "sl" 'counsel-projectile-rg

      ;; window && frame
      "ww" 'other-window
      "wf" 'other-frame

      ;; fold
      "zA" 'evil-close-folds
      "za" 'evil-open-folds
      "zo" 'evil-open-fold
      "zO" 'evil-open-fold-rec
      "zc" 'evil-close-fold
      "zC" 'evil-close-fold-rec
      "zt" 'evil-toggle-fold

      )
    )

  ;;; UNDO
  ;; Vim style undo not needed for emacs 28
  (use-package undo-fu)

  ;;; Vim Bindings
  (use-package evil
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-u-scroll t)
    (setq evil-esc-delay 0)
    :config
    (evil-mode 1))

  (use-package evil-leader
    :init
    (progn
      (global-evil-leader-mode)
      (setq evil-leader/in-all-states 1)
      (x/config-evil-leader)))

  (use-package evil-collection
    :disabled
    :after evil
    :config
    (evil-collection-init))

  ;; {{ specify major mode uses Evil (vim) NORMAL state or EMACS original state.
  ;; You may delete this setup to use Evil NORMAL state always.
  (dolist (p '((minibuffer-inactive-mode . emacs)
               (eaf-mode . emacs)
               (calendar-mode . emacs)
               (special-mode . emacs)
               (grep-mode . emacs)
               (Info-mode . emacs)
               (term-mode . emacs)
               (sdcv-mode . emacs)
               (anaconda-nav-mode . emacs)
               (log-edit-mode . emacs)
               (vc-log-edit-mode . emacs)
               (magit-log-edit-mode . emacs)
               (magit-status-mode . emacs)
               (erc-mode . emacs)
               (neotree-mode . emacs)
               (w3m-mode . emacs)
               (gud-mode . emacs)
               (help-mode . emacs)
               (eshell-mode . emacs)
               (shell-mode . emacs)
               (xref--xref-buffer-mode . emacs)
               (dashboard-mode . normal)
               (color-rg-mode . emacs)
               (fundamental-mode . normal)
               (woman-mode . emacs)
               (sr-mode . emacs)
               (profiler-report-mode . emacs)
               ;;(dired-mode . normal)
               (dired-mode . emacs)
               (compilation-mode . emacs)
               (speedbar-mode . emacs)
               (ivy-occur-mode . emacs)
               (ffip-file-mode . emacs)
               (ivy-occur-grep-mode . normal)
               (messages-buffer-mode . normal)
               ))
    (evil-set-initial-state (car p) (cdr p)))

  ;;-----------------------
  (eval-after-load "evil-maps"
    '(progn
       (dolist (map '(evil-motion-state-map
                      evil-insert-state-map
                      evil-emacs-state-map
                      evil-window-map))
         (define-key (eval map) "\C-]" nil)
         (define-key (eval map) "\C-t" nil)
         (define-key (eval map) "\C-w" nil)
         (define-key (eval map) "\M-]" nil)
         (set-control-w-shortcuts))))

  ;; evilmode-map
  (with-eval-after-load 'evil
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (define-key evil-normal-state-map (kbd "C-t") nil)
    (define-key evil-normal-state-map (kbd "C-]") nil)
    (define-key evil-normal-state-map (kbd "/")  'swiper)
    (define-key evil-motion-state-map (kbd "C-6") nil))

#+END_SRC

* Org-Mode
** Org

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package org
    :ensure nil
    :mode ("\\.org\\'" . org-mode)
    :hook ((org-mode . visual-line-mode)
           (org-mode . my/org-prettify-symbols))
    :commands (org-find-exact-headline-in-buffer org-set-tags)
    :custom-face
    ;; 设置Org mode标题以及每级标题行的大小
    (org-document-title ((t (:height 1.75 :weight bold))))
    (org-level-1 ((t (:height 1.2 :weight bold))))
    (org-level-2 ((t (:height 1.15 :weight bold))))
    (org-level-3 ((t (:height 1.1 :weight bold))))
    (org-level-4 ((t (:height 1.05 :weight bold))))
    (org-level-5 ((t (:height 1.0 :weight bold))))
    (org-level-6 ((t (:height 1.0 :weight bold))))
    (org-level-7 ((t (:height 1.0 :weight bold))))
    (org-level-8 ((t (:height 1.0 :weight bold))))
    (org-level-9 ((t (:height 1.0 :weight bold))))
    ;; 设置代码块用上下边线包裹
    (org-block-begin-line ((t (:underline t :background unspecified))))
    (org-block-end-line ((t (:overline t :underline nil :background unspecified))))
    :config
    ;; ================================
    ;; 在org mode里美化字符串
    ;; ================================
    (defun my/org-prettify-symbols ()
      (setq prettify-symbols-alist
            (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                    '(
                      ;; ("[ ]"              . 9744)         ; ☐
                      ;; ("[X]"              . 9745)         ; ☑
                      ;; ("[-]"              . 8863)         ; ⊟
                      ("#+begin_src"      . 9998)         ; ✎
                      ("#+end_src"        . 9633)         ; □
                      ("#+begin_example"  . 129083)       ; 🠻
                      ("#+end_example"    . 129081)       ; 🠹
                      ("#+results:"       . 9776)         ; ☰
                      ("#+attr_latex:"    . "🄛")
                      ("#+attr_html:"     . "🄗")
                      ("#+attr_org:"      . "🄞")
                      ("#+name:"          . "🄝")         ; 127261
                      ("#+caption:"       . "🄒")         ; 127250
                      ("#+date:"          . "📅")         ; 128197
                      ("#+author:"        . "💁")         ; 128100
                      ("#+setupfile:"     . 128221)       ; 📝
                      ("#+email:"         . 128231)       ; 📧
                      ("#+startup:"       . 10034)        ; ✲
                      ("#+options:"       . 9965)         ; ⛭
                      ("#+title:"         . 10162)        ; ➲
                      ("#+subtitle:"      . 11146)        ; ⮊
                      ("#+downloaded:"    . 8650)         ; ⇊
                      ("#+language:"      . 128441)       ; 🖹
                      ("#+begin_quote"    . 187)          ; »
                      ("#+end_quote"      . 171)          ; «
                      ("#+begin_results"  . 8943)         ; ⋯
                      ("#+end_results"    . 8943)         ; ⋯
                      )))
      (setq prettify-symbols-unprettify-at-point t)
      (prettify-symbols-mode 1))

    ;; 提升latex预览的图片清晰度
    (plist-put org-format-latex-options :scale 1.8)

    ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格
    (setq org-blank-before-new-entry '((heading . t)
                                       (plain-list-item . auto)
                                       ))

    ;; ======================================
    ;; 设置打开Org links的程序
    ;; ======================================
    (defun my-func/open-and-play-gif-image (file &optional link)
      "Open and play GIF image `FILE' in Emacs buffer.
  Optional for Org-mode file: `LINK'."
      (let ((gif-image (create-image file))
            (tmp-buf (get-buffer-create "*Org-mode GIF image animation*")))
        (switch-to-buffer tmp-buf)
        (erase-buffer)
        (insert-image gif-image)
        (image-animate gif-image nil t)
        (local-set-key (kbd "q") 'bury-buffer)
        ))
    (setq org-file-apps '(("\\.png\\'"     . default)
                          (auto-mode       . emacs)
                          (directory       . emacs)
                          ("\\.mm\\'"      . default)
                          ("\\.x?html?\\'" . default)
                          ("\\.pdf\\'"     . emacs)
                          ("\\.md\\'"      . emacs)
                          ("\\.gif\\'"     . my-func/open-and-play-gif-image)
                          ("\\.xlsx\\'"    . default)
                          ("\\.svg\\'"     . default)
                          ("\\.pptx\\'"    . default)
                          ("\\.docx\\'"    . default)))

    :custom
    ;; 设置Org mode的目录
    (org-directory "~/org")
    ;; 设置笔记的默认存储位置
    (org-default-notes-file (expand-file-name "capture.org" org-directory))
    ;; 启用一些子模块
    (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))
    ;; 在按M-RET时，是否根据光标所在的位置分行，这里设置为是
    ;; (org-M-RET-may-split-line '((default . nil)))
    ;; 一些Org mode自带的美化设置
    ;; 标题行美化
    (org-fontify-whole-heading-line t)
    ;; 设置标题行折叠符号
    (org-ellipsis " ▾")
    ;; 在活动区域内的所有标题栏执行某些命令
    (org-loop-over-headlines-in-active-region t)
    ;; TODO标签美化
    (org-fontify-todo-headline t)
    ;; DONE标签美化
    (org-fontify-done-headline t)
    ;; 引用块美化
    (org-fontify-quote-and-verse-blocks t)
    ;; 隐藏宏标记
    (org-hide-macro-markers t)
    ;; 隐藏强调标签
    (org-hide-emphasis-markers t)
    ;; 高亮latex语法
    (org-highlight-latex-and-related '(native script entities))
    ;; 以UTF-8显示
    (org-pretty-entities t)
    ;; 是否隐藏标题栏的前置星号，这里我们通过org-modern来隐藏
    ;; (org-hide-leading-stars t)
    ;; 当启用缩进模式时自动隐藏前置星号
    (org-indent-mode-turns-on-hiding-stars t)
    ;; 自动启用缩进
    (org-startup-indented nil)
    ;; 根据标题栏自动缩进文本
    (org-adapt-indentation nil)
    ;; 自动显示图片
    (org-startup-with-inline-images t)
    ;; 默认以Overview的模式展示标题行
    (org-startup-folded 'overview)
    ;; 允许字母列表
    (org-list-allow-alphabetical t)
    ;; 列表的下一级设置
    (org-list-demote-modify-bullet '(
                                     ("-"  . "+")
                                     ("+"  . "1.")
                                     ("1." . "a.")
                                     ))
    ;; 编辑时检查是否在折叠的不可见区域
    (org-fold-catch-invisible-edits 'smart)
    ;; 在当前位置插入新标题行还是在当前标题行后插入，这里设置为当前位置
    (org-insert-heading-respect-content nil)
    ;; 设置图片的最大宽度，如果有imagemagick支持将会改变图片实际宽度
    ;; 四种设置方法：(1080), 1080, t, nil
    ;(org-image-actual-width nil)
    ;(org-image-actual-width 1080)
    (org-image-actual-width 640)


    ;; imenu的最大深度，默认为2
    (org-imenu-depth 4)
    ;; 回车要不要触发链接，这里设置不触发
    (org-return-follows-link nil)
    ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹
    (org-use-sub-superscripts '{})
    ;; 复制粘贴标题行的时候删除id
    (org-clone-delete-id t)
    ;; 粘贴时调整标题行的级别
    (org-yank-adjusted-subtrees t)

    ;; TOOD的关键词设置，可以设置不同的组
    (org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "WIP(i!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
                         (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
    ;; TODO关键词的样式设置
    (org-todo-keyword-faces '(("TODO"       :foreground "#7c7c75" :weight bold)
                              ("HOLD"       :foreground "#feb24c" :weight bold)
                              ("WIP"        :foreground "#0098dd" :weight bold)
                              ("WAIT"       :foreground "#9f7efe" :weight bold)
                              ("DONE"       :foreground "#50a14f" :weight bold)
                              ("CANCELLED"  :foreground "#ff6480" :weight bold)
                              ("REPORT"     :foreground "magenta" :weight bold)
                              ("BUG"        :foreground "red"     :weight bold)
                              ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
                              ("FIXED"      :foreground "green"   :weight bold)))
    ;; 当标题行状态变化时标签同步发生的变化
    ;; Moving a task to CANCELLED adds a CANCELLED tag
    ;; Moving a task to WAIT adds a WAIT tag
    ;; Moving a task to HOLD adds WAIT and HOLD tags
    ;; Moving a task to a done state removes WAIT and HOLD tags
    ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags
    ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags
    (org-todo-state-tags-triggers
     (quote (("CANCELLED" ("CANCELLED" . t))
             ("WAIT" ("WAIT" . t))
             ("HOLD" ("WAIT") ("HOLD" . t))
             (done ("WAIT") ("HOLD"))
             ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
             ("DONE" ("WAIT") ("CANCELLED") ("HOLD")))))
    ;; 使用专家模式选择标题栏状态
    (org-use-fast-todo-selection 'expert)
    ;; 父子标题栏状态有依赖
    (org-enforce-todo-dependencies t)
    ;; 标题栏和任务复选框有依赖
    (org-enforce-todo-checkbox-dependencies t)
    ;; 优先级样式设置
    (org-priority-faces '((?A :foreground "red")
                          (?B :foreground "orange")
                          (?C :foreground "yellow")))
    ;; 标题行全局属性设置
    (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                             ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                             ("RISK_ALL" . "Low Medium High")
                             ("STYLE_ALL" . "habit")))
    ;; Org columns的默认格式
    (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
    ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]
    (org-closed-keep-when-no-todo t)
    ;; DONE时加上时间戳
    (org-log-done 'time)
    ;; 重复执行时加上时间戳
    (org-log-repeat 'time)
    ;; Deadline修改时加上一条记录
    (org-log-redeadline 'note)
    ;; Schedule修改时加上一条记录
    (org-log-reschedule 'note)
    ;; 以抽屉的方式记录
    (org-log-into-drawer t)
    ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉
    (org-log-state-notes-insert-after-drawers nil)

    ;; refile使用缓存
    (org-refile-use-cache t)
    ;; refile的目的地，这里设置的是agenda文件的所有标题
    (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))
    ;; 将文件名加入到路径
    (org-refile-use-outline-path 'file)
    ;; 是否按步骤refile
    (org-outline-path-complete-in-steps nil)
    ;; 允许创建新的标题行，但需要确认
    (org-refile-allow-creating-parent-nodes 'confirm)

    ;; 设置标签的默认位置，默认是第77列右对齐
    ;; (org-tags-column -77)
    ;; 自动对齐标签
    (org-auto-align-tags t)
    ;; 标签不继承
    (org-use-tag-inheritance nil)
    ;; 在日程视图的标签不继承
    (org-agenda-use-tag-inheritance nil)
    ;; 标签快速选择
    (org-use-fast-tag-selection t)
    ;; 标签选择不需要回车确认
    (org-fast-tag-selection-single-key t)
    ;; 定义了有序属性的标题行也加上 OREDERD 标签
    (org-track-ordered-property-with-tag t)
    ;; 始终存在的的标签
    (org-tag-persistent-alist '(("read"     . ?r)
                                ("mail"     . ?m)
                                ("emacs"    . ?e)
                                ("study"    . ?s)
                                ("work"     . ?w)))
    ;; 预定义好的标签
    (org-tag-alist '((:startgroup)
                     ("crypt"    . ?c)
                     ("linux"    . ?l)
                     ("apple"    . ?a)
                     ("noexport" . ?n)
                     ("ignore"   . ?i)
                     ("toc"      . ?t)
                     (:endgroup)))

    ;; 归档设置
    (org-archive-location "%s_archive::datetree/")
    )



  (use-package org-appear
    :ensure t
    :hook (org-mode . org-appear-mode)
    :config
    (setq org-appear-autolinks t)
    (setq org-appear-autosubmarkers t)
    (setq org-appear-autoentities t)
    (setq org-appear-autokeywords t)
    (setq org-appear-inside-latex t)
    )

  (use-package org-auto-tangle
    :ensure t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t)
    )

  (use-package org-capture
    :ensure nil
    :bind ("\e\e c" . (lambda () (interactive) (org-capture)))
    :hook ((org-capture-mode . (lambda ()
                                 (setq-local org-complete-tags-always-offer-all-agenda-tags t)))
           (org-capture-mode . delete-other-windows))
    :custom
    (org-capture-use-agenda-date nil)
    ;; define common template
    (org-capture-templates `(("t" "Tasks" entry (file+headline "tasks.org" "Reminders")
                              "* TODO %i%?"
                              :empty-lines-after 1
                              :prepend t)
                             ("n" "Notes" entry (file+headline "capture.org" "Notes")
                              "* %? %^g\n%i\n"
                              :empty-lines-after 1)
                             ;; For EWW
                             ("b" "Bookmarks" entry (file+headline "capture.org" "Bookmarks")
                              "* %:description\n\n%a%?"
                              :empty-lines 1
                              :immediate-finish t)
                             ("d" "Diary")
                             ("dt" "Today's TODO list" entry (file+olp+datetree "diary.org")
                              "* Today's TODO list [/]\n%T\n\n** TODO %?"
                              :empty-lines 1
                              :jump-to-captured t)
                             ("do" "Other stuff" entry (file+olp+datetree "diary.org")
                              "* %?\n%T\n\n%i"
                              :empty-lines 1
                              :jump-to-captured t)
                             ))
    )


  (use-package org-src
    :ensure nil
    :hook (org-babel-after-execute . org-redisplay-inline-images)
    :bind (("s-l" . show-line-number-in-src-block)
           :map org-src-mode-map
           ("C-c C-c" . org-edit-src-exit))
    :init
    ;; 设置代码块的默认头参数
    (setq org-babel-default-header-args
          '(
            (:eval    . "never-export")     ; 导出时不执行代码块
            (:session . "none")
            (:results . "replace")          ; 执行结果替换
            (:exports . "both")             ; 导出代码和结果
            (:cache   . "no")
            (:noweb   . "no")
            (:hlines  . "no")
            (:wrap    . "results")          ; 结果通过#+begin_results包裹
            (:tangle  . "no")               ; 不写入文件
            ))
    :config
    ;; ==================================
    ;; 如果出现代码运行结果为乱码，可以参考：
    ;; https://github.com/nnicandro/emacs-jupyter/issues/366
    ;; ==================================
    (defun display-ansi-colors ()
      (ansi-color-apply-on-region (point-min) (point-max)))
    (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)

    ;; ==============================================
    ;; 通过overlay在代码块里显示行号，s-l显示，任意键关闭
    ;; ==============================================
    (defvar number-line-overlays '()
      "List of overlays for line numbers.")

    (defun show-line-number-in-src-block ()
      (interactive)
      (save-excursion
        (let* ((src-block (org-element-context))
               (nlines (- (length
                           (s-split
                            "\n"
                            (org-element-property :value src-block)))
                          1)))
          (goto-char (org-element-property :begin src-block))
          (re-search-forward (regexp-quote (org-element-property :value src-block)))
          (goto-char (match-beginning 0))

          (cl-loop for i from 1 to nlines
                   do
                   (beginning-of-line)
                   (let (ov)
                     (setq ov (make-overlay (point) (point)))
                     (overlay-put ov 'before-string (format "%3s | " (number-to-string i)))
                     (add-to-list 'number-line-overlays ov))
                   (next-line))))

      ;; now read a char to clear them
      (read-key "Press a key to clear numbers.")
      (mapc 'delete-overlay number-line-overlays)
      (setq number-line-overlays '()))

    ;; =================================================
    ;; 执行结果后，如果结果所在的文件夹不存在将自动创建
    ;; =================================================
    (defun check-directory-exists-before-src-execution (orig-fun
                                                        &optional arg
                                                        info
                                                        params)
      (when (and (assq ':file (cadr (cdr (org-babel-get-src-block-info))))
                 (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2")))
        (let ((foldername (file-name-directory (alist-get :file (nth 2 (org-babel-get-src-block-info))))))
          (if (not (file-exists-p foldername))
              (mkdir foldername)))))
    (advice-add 'org-babel-execute-src-block :before #'check-directory-exists-before-src-execution)

    ;; =================================================
    ;; 自动给结果的图片加上相关属性
    ;; =================================================
    (setq original-image-width-before-del "400") ; 设置图片的默认宽度为400
    (setq original-caption-before-del "")        ; 设置默认的图示文本为空

    (defun insert-attr-decls ()
      "insert string before babel execution results"
      (insert (concat "\n#+CAPTION:"
                      original-caption-before-del
                      "\n#+ATTR_ORG: :width "
                      original-image-width-before-del
                      "\n#+ATTR_LATEX: :width "
                      (if (>= (/ (string-to-number original-image-width-before-del) 800.0) 1)
                          "1.0"
                        (number-to-string (/ (string-to-number original-image-width-before-del) 800.0)))
                      "\\linewidth :float nil"
                      "\n#+ATTR_HTML: :width "
                      original-image-width-before-del
                      )))

    (defun insert-attr-decls-at (s)
      "insert string right after specific string"
      (let ((case-fold-search t))
        (if (search-forward s nil t)
            (progn
              ;; (search-backward s nil t)
              (insert-attr-decls)))))

    (defun insert-attr-decls-at-results (orig-fun
                                         &optional arg
                                         info
                                         param)
      "insert extra image attributes after babel execution"
      (interactive)
      (progn
        (when (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2"))
          (setq original-image-width-before-del (number-to-string (if-let* ((babel-width (alist-get :width (nth 2 (org-babel-get-src-block-info))))) babel-width (string-to-number original-image-width-before-del))))
          (save-excursion
            ;; `#+begin_results' for :wrap results, `#+RESULTS:' for non :wrap results
            (insert-attr-decls-at "#+begin_results")))
        (org-redisplay-inline-images)))
    (advice-add 'org-babel-execute-src-block :after #'insert-attr-decls-at-results)

    ;; 再次执行时需要将旧的图片相关参数行删除，并从中头参数中获得宽度参数，参考
    ;; https://emacs.stackexchange.com/questions/57710/how-to-set-image-size-in-result-of-src-block-in-org-mode
    (defun get-attributes-from-src-block-result (&rest args)
      "get information via last babel execution"
      (let ((location (org-babel-where-is-src-block-result))
            ;; 主要获取的是图示文字和宽度信息，下面这个正则就是为了捕获这两个信息
            (attr-regexp "[:blank:]*#\\+\\(ATTR_ORG: :width \\([0-9]\\{3\\}\\)\\|CAPTION:\\(.*\\)\\)"))
        (setq original-caption-before-del "") ; 重置为空
        (when location
          (save-excursion
            (goto-char location)
            (when (looking-at (concat org-babel-result-regexp ".*$"))
              (next-line 2)               ; 因为有个begin_result的抽屉，所以往下2行
              ;; 通过正则表达式来捕获需要的信息
              (while (looking-at attr-regexp)
                (when (match-string 2)
                  (setq original-image-width-before-del (match-string 2)))
                (when (match-string 3)
                  (setq original-caption-before-del (match-string 3)))
                (next-line)               ; 因为设置了:wrap，所以这里不需要删除这一行
                )
              )))))
    (advice-add 'org-babel-execute-src-block :before #'get-attributes-from-src-block-result)

    :custom
    ;; 代码块语法高亮
    (org-src-fontify-natively t)
    ;; 使用编程语言的TAB绑定设置
    (org-src-tab-acts-natively t)
    ;; 保留代码块前面的空格
    (org-src-preserve-indentation t)
    ;; 代码块编辑窗口的打开方式：当前窗口+代码块编辑窗口
    (org-src-window-setup 'reorganize-frame)
    ;; 执行前是否需要确认
    (org-confirm-babel-evaluate nil)
    ;; 代码块默认前置多少空格
    (org-edit-src-content-indentation 0)
    ;; 代码块的语言模式设置，设置之后才能正确语法高亮
    (org-src-lang-modes '(("C"            . c)
                          ("C++"          . c++)
                          ("bash"         . sh)
                          ("cpp"          . c++)
                          ("elisp"        . emacs-lisp)
                          ("python"       . python)
                          ("shell"        . sh)
                          ("mysql"        . sql)
                          ))
    ;; 在这个阶段，只需要加载默认支持的语言
    (org-babel-load-languages '((python          . t)
                                (awk             . t)
                                (C               . t)
                                (calc            . t)
                                (emacs-lisp      . t)
                                (eshell          . t)
                                (shell           . t)
                                (sql             . t)
                                (css             . t)
                                ))
    )


  (use-package ox
    :ensure nil
    :custom
    (org-export-with-toc t)
    (org-export-with-tags 'not-in-toc)
    (org-export-with-drawers nil)
    (org-export-with-priority t)
    (org-export-with-footnotes t)
    (org-export-with-smart-quotes t)
    (org-export-with-section-numbers t)
    (org-export-with-sub-superscripts '{})
    ;; `org-export-use-babel' set to nil will cause all source block header arguments to be ignored This means that code blocks with the argument :exports none or :exports results will end up in the export.
    ;; See:
    ;; https://stackoverflow.com/questions/29952543/how-do-i-prevent-org-mode-from-executing-all-of-the-babel-source-blocks
    (org-export-use-babel t)
    (org-export-headline-levels 9)
    (org-export-coding-system 'utf-8)
    (org-export-with-broken-links 'mark)
    (org-export-default-language "zh-CN") ; 默认是en
    ;; (org-ascii-text-width 72)
    )

  ;; export extra
  ;;(use-package ox-extra
  ;;  :ensure nil
  ;;  :config
  ;;  (ox-extras-activate '(ignore-headlines))
  ;;  )

  (use-package toc-org :ensure t :hook (org-mode . toc-org-mode))

  (use-package org-download
   :ensure t
   :after org
   ;; There is something wrong with `hook`, so redefine it with my own :hook
   :init (add-hook 'org-mode-hook (lambda () (require 'org-download)))
   :config
   (setq-default org-download-image-dir "../images")
   (put 'org-download-image-dir 'safe-local-variable (lambda (_) t)))

  ;;(use-package valign
  ;;  :defer t
  ;;  :ensure t
  ;;  :hook ((org-mode . valign-mode))
  ;;  :custom ((valign-fancy-bar t)))

#+END_SRC

** Plantuml

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package plantuml-mode
    :ensure t
    :mode ("\\.plantuml\\'" . plantuml-mode)
    :init
    ;; enable plantuml babel support
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((plantuml . t))))
    :config
    (setq org-plantuml-exec-mode 'plantuml)
    (setq org-plantuml-executable-path "plantuml")
    (setq plantuml-executable-path "plantuml")
    (setq plantuml-default-exec-mode 'executable)
    ;; set default babel header arguments
    (setq org-babel-default-header-args:plantuml
          '((:exports . "results")
            (:results . "file")
            ))
    )
#+END_SRC

** OrgToLatex

#+BEGIN_SRC emacs-lisp :tangle yes
;; from: https://github.com/wowhxj/emacs-from-scratch/blob/master/lisp/init-org.el
;; 先安装 LaTex 完整版, MacTeX
;; https://orgmode.org/worg/org-dependencies.html
;; pip3 install pygments
;; sudo tlmgr update --self --all
;; sudo tlmgr install minted
;; sudo tlmgr install ctex environ trimspaces zhnumber cjk

(setq org-latex-classes
      '(("zxh-latex-class"
         "
    \\documentclass[12pt,a4paper]{article}
    [DEFAULT-PACKAGES]
    [PACKAGES]
    \\setsansfont{PingFang SC}
    \\setromanfont{PingFang SC}
    \\setmonofont[Scale=0.9]{PingFang SC}
    \\newfontfamily\\quotefont{PingFang SC}
    \\newfontfamily\\headfootfont{PingFang SC}
    \\AtBeginEnvironment{quote}{\\quotefont\\small}
    \\XeTeXlinebreaklocale ``zh''
    \\XeTeXlinebreakskip = 0pt plus 1pt
    \\linespread{1.0}
    \\hypersetup{
      colorlinks=true,
      linkcolor=[rgb]{0,0.37,0.53},
      citecolor=[rgb]{0,0.47,0.68},
      filecolor=[rgb]{0,0.37,0.53},
      urlcolor=[rgb]{0,0.37,0.53},
      pagebackref=true,
      linktoc=all,}
    \\renewcommand{\\headrulewidth}{0.4pt}
    \\renewcommand{\\footrulewidth}{0.4pt}
    \\pagestyle{fancy}
    \\fancyfoot[C]{} % Clear page number
    \\fancyhead[RE]{\\headfootfont\\small\\leftmark} % 在偶数页的右侧显示章名
    \\fancyhead[LO]{\\headfootfont\\small\\rightmark} % 在奇数页的左侧显示小节名
    \\fancyhead[LE,RO]{\\headfootfont\\small~\\thepage~} % 在偶数页的左侧，奇数页的右侧显示页码
    [EXTRA]
    "
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
         ("\\paragraph{%s}" . "\\paragraph*{%s}")
         ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

;; [FIXME]
;; 原本是不要讓 org 插入 hypersetup（因為 org-mode 這部份設計成沒辦法自訂，或許可以去 report 一下？
;; 改成自行插入，但這樣 pdfcreator 沒辦法根據 Emacs 版本插入，pdfkeyword 也會無效...幹。
(setq org-latex-with-hyperref t)

;; Export source code using minted
(setq org-latex-listings 'minted)

(setq org-latex-default-packages-alist
      '(("" "nopageno" t)
        ("" "hyperref" t)
        ("" "fontspec" t)
        ("" "etoolbox" t) ;; Quote 部份的字型設定
        ("margin=2cm" "geometry" nil)
        ;; ("AUTO" "inputenc" t)
        ;; ("" "fixltx2e" nil)
        ("dvipdfmx" "graphicx" t)
        ("" "longtable" nil)
        ("" "float" nil)
        ("" "wrapfig" nil)
        ("" "rotating" nil)
        ("normalem" "ulem" t)
        ("" "amsmath" t)
        ("" "textcomp" t)
        ("" "marvosym" t)
        ("" "wasysym" t)
        ("" "multicol" t)  ; 這是我另外加的，因為常需要多欄位文件版面。
        ("" "amssymb" t)
        ("" "fancyhdr" nil) ;; 页眉页脚
        ("cache=false" "minted" nil) ;; Code color
        "\\tolerance=1000"))

(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "rm -fr %b.out %b.log %b.tex %b.brf %b.bbl"
        ))

#+END_SRC

** Latex

#+begin_src emacs-lisp :tangle yes

  (use-package cdlatex
    :defer t
    :ensure t
    :config
    (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))

  ;;(use-package auctex 
  ;;  :load-path "~/.emacs.d/vendor/auctex"
  ;;  :defer t
  ;;  :config
  ;;  (load "auctex.el" nil t t)
  ;;  (load "preview-latex.el" nil t t))
  (if (string-equal system-type "windows-nt") (require 'tex-mik))

  ;; Ask which tex file is master instead of always assume current file is master file.
  (setq-default TeX-master nil) ; Query for master file.

  (mapc (lambda (mode)
          (add-hook 'LaTeX-mode-hook mode))
        (list 'LaTeX-math-mode
              'turn-on-reftex
              'linum-mode))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (setq TeX-auto-untabify t     ; remove all tabs before saving
                    TeX-engine 'xetex       ; use xelatex default
                    TeX-show-compilation t) ; display compilation windows
              (TeX-global-PDF-mode t)       ; PDF mode enable, not plain
              (setq TeX-save-query nil)
              (imenu-add-menubar-index)
              (define-key LaTeX-mode-map (kbd "TAB") 'TeX-complete-symbol)))

#+end_src

* Programming

#+BEGIN_SRC emacs-lisp :tangle yes

  ;;---------------------------------------------------------
  ;; Golang
  (use-package go-mode)

  ;;---------------------------------------------------------
  ;; Erlang 
  (let* ((tools-version erlang-lib-tools-version)
         (path-prefix erlang-path-prefix)
         (tools-path
          (concat path-prefix "/lib/tools-" tools-version "/emacs")))
    (when (file-exists-p tools-path)
      (setq load-path (cons tools-path load-path))
      (setq erlang-root-dir (concat path-prefix "/erlang"))
      (setq exec-path (cons (concat path-prefix "/bin") exec-path))
      (require 'erlang-start)
      (defvar inferior-erlang-prompt-timeout t)))

  ;;---------------------------------------------------------
  ;; C/C++
  (use-package cc-mode
    :ensure nil
    :bind (:map c-mode-base-map
                ("C-c c" . compile))
    :hook (c-mode-common . (lambda () (c-set-style "stroustrup")))
    :init (setq-default c-basic-offset 4)
    :config
    (use-package modern-cpp-font-lock
      :init (modern-c++-font-lock-global-mode t)))

  ;;---------------------------------------------------------
  ;; Python 
  ;; Install: pip install pyflakes autopep8
  (use-package python
    :ensure nil
    :hook (inferior-python-mode . (lambda ()
                                    (process-query-on-exit-flag
                                     (get-process "Python"))))
    :init
    ;; Disable readline based native completion
    (setq python-shell-completion-native-enable nil)
    :config
    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems stupidly make the unversioned one point at Python 2.
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))

    ;; Env vars
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))

    ;; Live Coding in Python
    (use-package live-py-mode))

  ;;;---------------------------------------------------------
  ;; rust
  ;; brew install rust-analyzer
  ;; rustup component add rust-src rustfmt clippy rls rust-analysis
  ;;;---------------------------------------------------------
  ;;(use-package lsp-mode
  ;;:init
  ;;:custom
  ;;(lsp-eldoc-render-all t)
  ;;(lsp-idle-delay 0.6)
  ;;; enable / disable the hints as you prefer:
  ;;(lsp-rust-analyzer-server-display-inlay-hints t)
  ;;(lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  ;;(lsp-rust-analyzer-display-chaining-hints t)
  ;;(lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  ;;(lsp-rust-analyzer-display-closure-return-type-hints t)
  ;;(lsp-rust-analyzer-display-parameter-hints nil)
  ;;(lsp-rust-analyzer-display-reborrow-hints nil)
  ;;)
  (use-package rust-mode
    ;;:hook ((rust-mode . my/rust-lsp))
    :config
    (setq rust-format-on-save t)
    (defun my/rust-lsp ()
      (setq-local lsp-completion-enable nil
                  compile-command "cargo build")
      ))

  ;;---------------------------------------------------------
  ;; Other languages
  ;;---------------------------------------------------------
  (use-package sh-script :defer t :config (setq sh-basic-offset 4))
  (use-package lua-mode  :defer t :config (add-hook 'lua-mode-hook #'company-mode))
  (use-package yaml-mode :ensure t)

#+END_SRC

* AutoInsert

#+BEGIN_SRC emacs-lisp :tangle yes

  (load "autoinsert")
  (auto-insert-mode)
  (setq auto-insert t)
  (setq auto-insert-query t)
  (add-hook 'find-file-hooks 'auto-insert)
  (setq auto-insert-alist
        (append '(
                  (("\\.go$" . "golang header")
                   nil
                   "//---------------------------------------------------------------------\n"
                   "// @Copyright (c) 2023-2024 GLD Enterprise, Inc. (https://glodon.com)\n"
                   "// @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
                   "// @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                   "//----------------------------------------------------------------------\n"
                   _
                   ))
                auto-insert-alist))
  (setq auto-insert-alist
        (append '(
                  (("\\.erl$" . "erlang header")
                   nil
                   "%%%-------------------------------------------------------------------\n"
                   "%%% @Copyright (c) 2023-2024 GLD Enterprise, Inc. (https://glodon.com)\n"
                   "%%% @Author: robertzhouxh <robertzhouxh@gmail.com>\n"
                   "%%% @Date   Created: " (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                   "%%%-------------------------------------------------------------------\n"
                   _
                   ))
                auto-insert-alist))
  (setq auto-insert-alist
        (append '(
                  (("\\.org$" . "org header")
                   nil
                   "#+title: TODO\n"
                   "#+author: 周学浩\n"
                   "#+email: zhouxh-e@glodon.com\n"
                   "#+date:" (format-time-string "%Y-%m-%d %H:%M:%S")"\n"
                   "#+OPTIONS: ^:nil\n"
                   "#+OPTIONS: toc:2\n"
                   "#+LATEX_CLASS: zxh-latex-class\n"
                   "#+LATEX_HEADER: \\hypersetup{colorlinks=true,linkcolor=blue}\n"
                   "#+LATEX_HEADER: \\makeatletter \\def\\@maketitle{\\null \\begin{center} {\\vskip 5em \\Huge \\@title} \\vskip 30em {\\LARGE \\@author} \\vskip 3em {\\LARGE \\@date} \\end{center} \\newpage} \\makeatother\n\n"
                   "* 目录 :TOC_2_org:"
                   _
                   ))
                auto-insert-alist))
#+END_SRC

* Tramp

Tramp 是 Emacs 中用来编辑远端文件的模块，全称为『Transparent Remote (file) Access, Multiple Protocol

+ 打开远程主机上的文件: C-x C-f  /method:user@remotehost:filename)
  eg: C-x C-f /ssh:root@ssb.willschenk.com:/etc/host

+ 借助于 ssh 的 config 文件，简化打开文件的命令
  eg:

   - /ssh:devhost:/etc/hosts 
   - /-:devhost:/etc/hosts

   # ~/.ssh/config
   Host devhost
   HostName 192.168.31.92
   User vagrant
   IdentityFile ~/Documents/configs/vagrant-pk
   ControlMaster auto
   ControlPath ~/.ssh/master-%C
   ControlPersist 1h
  
   
+ 也可以通过配置 directory-abbrev-alist 进一步简化：
   eg:

   - (setq directory-abbrev-alist '(("^/dev" . "/-:dev:/etc")))
   - c-x c-f /dev TAB 会自动打开 /-:dev:/etc
  
+ sudo 打开文件
   eg:

   - /sudo::/etc/host RET
   - /ssh:you@remotehost|sudo::/etc/host RET
   
+ 多级跳跃 multiple hops
  eg:

  - C-x C-f /ssh:jumperUser@bastion|ssh:admin@production:/path RET
  - 先用 jumper 用户登录堡垒机 bastion, 之后在堡垒机上以 admin 用户登录 production 打开 /path 
   
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package tramp
    :ensure nil
    :custom
    (tramp-use-ssh-controlmaster-options nil) ; Don't override SSH config.
    (tramp-default-method "ssh")              ; ssh / sshx=‘ssh -t -t host -l user /bin/sh’ to open a connection with a “standard” login shell.”
    :config
    ;; (tramp-set-completion-function "sshx"
    (tramp-set-completion-function "ssh"
                                   '((tramp-parse-sconfig "/etc/ssh_config")
                                     (tramp-parse-sconfig "~/.ssh/config")))
    (setq directory-abbrev-alist '(("^/trojan" . "/-:trojan:~/")))
    )

#+END_SRC

* Font

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; stolen from https://github.com/cabins/.emacs.d/blob/dev/lisp/init-ui.el
  ;; adjust the fonts
  (require 'subr-x)

  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))

  (defun cabins/font-setup ()
    "Font setup."

    (interactive)
    (when (display-graphic-p)
      ;; Default font
      (cl-loop for font in '("Monaco" "Hack" "Consolas" "Source Code Pro" "Menlo" "DejaVu Sans Mono")
               when (font-installed-p font)
               return (set-face-attribute 'default nil :family font))

      ;; Unicode characters
      (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
               when (font-installed-p font)
               return (set-fontset-font t 'unicode font nil 'prepend))

      ;; Emoji
      (cl-loop for font in '("Noto Color Emoji" "Apple Color Emoji")
               when (font-installed-p font)
               return (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend))

      ;; Chinese characters
      ;; (cl-loop for font in '("LXGW WenKai" "TsangerJinKai05" "FZLanTingHeiS-EL-GB" "PingFang SC" "Microsoft Yahei UI" "Microsoft Yahei" "STFangsong")
      (cl-loop for font in '("TsangerJinKai05" "LXGW WenKai"  "FZLanTingHeiS-EL-GB" "PingFang SC" "Microsoft Yahei UI" "Microsoft Yahei" "STFangsong")
               when (font-installed-p font)
               return (progn
                                          ;(setq face-font-rescale-alist `((,font . 1.2)))
                        (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family font))))))

  (add-hook 'emacs-startup-hook 'cabins/font-setup)
  (when (daemonp) (add-hook 'after-make-frame-functions (lambda (frame) (with-selected-frame frame (cabins/font-setup)))))

  (set-face-attribute 'default nil :height 160)


#+END_SRC

* Rime

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package rime
    :bind
    (:map rime-active-mode-map
          ("<tab>" . 'rime-inline-ascii)
          :map rime-mode-map
          ("C-`" . 'rime-send-keybinding) 
          ("M-j" . 'rime-force-enable))
    :config
    (when (x/system-is-mac)
      (setq rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
      (setq rime-share-data-dir zxh-emacs-rime-share-data-dir))
    ;;(setq rime-emacs-module-header-root zxh-emacs-module-header-root))
    (when (x/system-is-linux)
      (when (and (x/system-is-mac) (executable-find "nix"))
        (setq rime-emacs-module-header-root
              (concat (shell-command-to-string "nix eval --raw 'nixpkgs#emacs.outPath'") "/include")
              rime-librime-root
              (shell-command-to-string "nix eval --raw 'nixpkgs#librime.outPath'")
              rime-share-data-dir
              (concat (shell-command-to-string "nix eval --raw 'nixpkgs#brise.outPath'") "/share/rime-data"))))
    ;;(setq rime-title " ㄓ")
    (setq rime-posframe-properties
          (list :background-color "#333333"
                :foreground-color "#dcdccc"
                :font "PingFang SC"
                :internal-border-width 10))
    (setq rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g"))
    (setq default-input-method "rime"
          rime-show-candidate 'posframe
          rime-posframe-style 'vertical
          )
    (setq rime-disable-predicates '(rime-predicate-evil-mode-p
                                    rime-predicate-space-after-cc-p
                                    rime-predicate-after-alphabet-char-p
                                    rime-predicate-prog-in-code-p
                                    rime-predicate-tex-math-or-command-p
                                    rime-predicate-current-uppercase-letter-p
                                    rime-predicate-after-ascii-char-p))
    )
#+END_SRC

* Platform

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; macos
  (when (x/system-is-mac)

    ;; Keyboard 
    (setq echo-keystrokes 0.1)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
    ;; (setq mac-command-modifier       'super   ;; s: super(Command/Win)
    ;;       mac-control-modifier       'control ;; C: Ctrl
    ;;       mac-option-modifier        'meta    ;; M: Meta (Option/Alt)
    ;;       )

    ;; Copy/Paste
    (defun copy-from-osx ()
      (shell-command-to-string "pbpaste"))

    (defun paste-to-osx (text &optional push)
      (let ((process-connection-type nil))
        (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
          (process-send-string proc text)
          (process-send-eof proc))))

    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx)

    ;; Move to Trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash/emacs")
    (defun system-move-file-to-trash (file)
      "Use \"trash\" to move FILE to the system trash.
        When using Homebrew, install it using \"brew install trash\"."
      (call-process (executable-find "trash")
                    nil 0 nil
                    file))

    ;; Done
    (message "Wellcome To Mac OS X, Have A Nice Day!!!"))


  ;; linux
  (when (x/system-is-linux)
    (defun yank-to-x-clipboard ()
      (interactive)
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!"))))

#+END_SRC

* Reading & OpenAI

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Epub reader: https://chainsawriot.com/postmannheim/2022/12/22/aoe22.html

  (add-hook 'nov-mode-hook 'visual-line-mode)
  (add-hook 'nov-mode-hook 'visual-fill-column-mode)
  (setq nov-text-width 120)
  (defvar nov-cursor nil "Whether the cursor is enabled")

  (defun toggle-nov-cursor ()
    "Toggle nov cursor mode"
    (interactive)
    (if nov-cursor
  	  (progn
  		(setq cursor-type nil
  			  nov-cursor nil)
  		(scroll-lock-mode 1))
      (progn
  	  (setq cursor-type t
  			nov-cursor t)
  	  (scroll-lock-mode -1)
  	  )))
  
  ;;(with-eval-after-load 'shr (set-face-attribute 'variable-pitch nil :font (format "%s:pixelsize=%d" "TsangerJinKai05" 24)))
  ;;(with-eval-after-load 'shr (set-face-attribute 'variable-pitch nil :font (format "%s:pixelsize=%d" "仓耳今楷 01" 24)))
  (defun nov-display ()
    (face-remap-add-relative 'variable-pitch :family "TsangerJinKai05" :height 1.5)
    ;; (face-remap-add-relative 'variable-pitch :family "LXGW WenKai" :height 1.5)
    (scroll-lock-mode 1)
    (toggle-scroll-bar -1)
    (setq mode-line-format nil
  		nov-header-line-format ""
  		cursor-type nil))

  (use-package visual-fill-column
    :config
    (setq-default visual-fill-column-center-text t)
    (setq-default visual-fill-column-width 120))

  (use-package nov 
    :load-path "~/.emacs.d/vendor/nov"
    :mode ("\\.epub\\'" . nov-mode)
    :bind (:map nov-mode-map
                ("C-q" . 'toggle-nov-cursor)
                ("j" . scroll-up-line)
                ("k" . scroll-down-line))
    :config
    (add-hook 'nov-mode-hook 'nov-display)
    (add-hook 'nov-mode-hook 'visual-fill-column-mode)
    (with-no-warnings
      ;; WORKAROUND: errors while opening `nov' files with Unicode characters
      ;; @see https://github.com/wasamasa/nov.el/issues/63
      (defun my-nov-content-unique-identifier (content)
        "Return the the unique identifier for CONTENT."
        (let* ((name (nov-content-unique-identifier-name content))
               (selector (format "package>metadata>identifier[id='%s']"
                                 (regexp-quote name)))
               (id (car (esxml-node-children (esxml-query selector content)))))
          (and id (intern id))))
      (advice-add #'nov-content-unique-identifier :override #'my-nov-content-unique-identifier))
  
    ;; Fix encoding issue on Windows
    (when sys/win32p
      (setq process-coding-system-alist
            (cons `(,nov-unzip-program . (gbk . gbk))
                  process-coding-system-alist))))

  ;;(use-package calibredb
  ;;  :ensure t
  ;;  :commands calibredb
  ;;  :bind ("\e\e b" . calibredb)
  ;;  :config
  ;;  (setq calibredb-root-dir "~/Calibre")
  ;;  (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
  ;;  (setq calibredb-library-alist '(("~/Books/books")
  ;;                                  ))

  ;;  (setq calibredb-format-icons-in-terminal t)
  ;;  (setq calibredb-id-width 0)
  ;;  )

  (use-package org-ai
    :load-path "~/.emacs.d/vendor/org-ai"
    :bind (
           ("C-c q" . org-ai-prompt)
           ("C-c x" . org-ai-on-region)
           )
    :hook (org-mode . org-ai-mode)
    :config
    ;;(setq org-ai-openai-api-token "sk-")
    (setq org-ai-default-max-tokens 480)
    (setq org-ai-default-chat-system-prompt "你是一个Emacs助手，请以Org-mode的格式来回复我")
    )
#+END_SRC

* Lazycat Plugins

#+BEGIN_SRC emacs-lisp :tangle yes

;;(require 'visual-regexp)
;;(setq vr/match-separator-use-custom-face t)
;;(setq vr/match-separator-string "⇛")
(require 'lazy-load)
(require 'one-key)
(require 'posframe)
(require 'lazycat-toolkit)
(require 'goto-chg)
(require 'watch-other-window)
(require 'thing-edit)
(require 'color-rg)
(require 'blink-search)
(require 'markmacro)

;; (require 'sort-tab)
;; (sort-tab-mode 1)

;; (require 'auto-save)
;; (auto-save-enable)
;; (setq auto-save-silent t)
;; (setq auto-save-delete-trailing-whitespace nil)

;; ----------------------------------------------------------
;; auto mode
(defun add-to-alist (alist-var elt-cons &optional no-replace)
  "Add to the value of ALIST-VAR an element ELT-CONS if it isn't there yet.
                  If an element with the same car as the car of ELT-CONS is already present,
                  replace it with ELT-CONS unless NO-REPLACE is non-nil; if a matching
                  element is not already present, add ELT-CONS to the front of the alist.
                  The test for presence of the car of ELT-CONS is done with `equal'."
  (let ((existing-element (assoc (car elt-cons) (symbol-value alist-var))))
    (if existing-element
        (or no-replace
            (rplacd existing-element (cdr elt-cons)))
      (set alist-var (cons elt-cons (symbol-value alist-var)))))
  (symbol-value alist-var))

(dolist (elt-cons '(
                    ("\\.markdown" . markdown-mode)
                    ("\\.md" . markdown-mode)
                    ("\\.yaml" . yaml-mode)
                    ("\\.yml" . yaml-mode)
                    ("\\.stumpwmrc\\'" . lisp-mode)
                    ("\\.[hg]s\\'" . haskell-mode)
                    ("\\.hi\\'" . haskell-mode)
                    ("\\.hs-boot\\'" . haskell-mode)
                    ("\\.chs\\'" . haskell-mode)
                    ("\\.l[hg]s\\'" . literate-haskell-mode)
                    ("\\.inc\\'" . asm-mode)
                    ("\\.max\\'" . maxima-mode)
                    ("\\.org\\'" . org-mode)
                    ("\\.cron\\(tab\\)?\\'" . crontab-mode)
                    ("cron\\(tab\\)?\\." . crontab-mode)
                    ("\\.py$" . python-mode)
                    ("SConstruct". python-mode)
                    ("\\.jl\\'" . lisp-mode)
                    ("\\.asdf\\'" . lisp-mode)
                    ("CMakeLists\\.txt\\'" . cmake-mode)
                    ("\\.cmake\\'" . cmake-mode)
                    ("\\.php\\'" . php-mode)
                    ("\\.vue" . web-mode)
                    ("\\.wxml" . web-mode)
                    ("\\.phtml\\'" . web-mode)
                    ("\\.tpl\\.php\\'" . web-mode)
                    ("\\.as[cp]x\\'" . web-mode)
                    ("\\.erb\\'" . web-mode)
                    ("\\.mustache\\'" . web-mode)
                    ("\\.djhtml\\'" . web-mode)
                    ("\\.html?\\'" . web-mode)
                    ("\\.js.erb\\'" . js-mode)
                    ("\\.css\\'" . css-mode)
                    ("\\.wxss\\'" . css-mode)
                    ("\\.jade" . jade-mode)
                    ("\\.go$" . go-mode)
                    ("\\.rs$" . rust-mode)
                    ("\\.pro$" . qmake-mode)
                    ("\\.js$" . js-mode)
                    ("\\.wxs$" . js-mode)
                    ("\\.jsx$" . web-mode)
                    ("\\.lua$" . lua-mode)
                    ("\\.y$" . bison-mode)
                    ;;("\\.pdf$" . pdf-view-mode)
                    ("\\.ts$" . typescript-mode)
                    ("\\.tsx$" . typescript-mode)
                    ("\\.cpp$" . c++-mode)
                    ("\\.h$" . c++-mode)
                    ("\\.ll$" . llvm-mode)
                    ("\\.bc$" . hexl-mode)
                    ("\\.nim$" . nim-mode)
                    ("\\.nims$" . nim-mode)
                    ("\\.nimble$" . nim-mode)
                    ("\\.nim.cfg$" . nim-mode)
                    ("\\.exs$" . elixir-mode)
                    ("\\.erl$" . erlang-mode)
                    ("\\.schema$" . erlang-mode)
                    ("rebar\\.config$" . erlang-mode)
                    ("relx\\.config$" . erlang-mode)
                    ("sys\\.config\\.src$" . erlang-mode)
                    ("sys\\.config$" . erlang-mode)
                    ("\\.config\\.src?$" . erlang-mode)
                    ("\\.config\\.script?$" . erlang-mode)
                    ("\\.hrl?$" . erlang-mode)
                    ("\\.app?$" . erlang-mode)
                    ("\\.app.src?$" . erlang-mode)
                    ("\\Emakefile" . erlang-mode)
                    ("\\.json$" . json-mode)
                    ("\\.clj$" . clojure-mode)
                    ("\\.plantuml$" . plantuml-mode)
                    ))
  (add-to-alist 'auto-mode-alist elt-cons))


;;---------------------------------------------------------
;; Line numbers are not displayed when large files are used.
(setq line-number-display-limit large-file-warning-threshold)
(setq line-number-display-limit-width 1000)

(dolist (hook (list
               'c-mode-common-hook
               'c-mode-hook
               'emacs-lisp-mode-hook
               'lisp-interaction-mode-hook
               'lisp-mode-hook
               'java-mode-hook
               'asm-mode-hook
               'haskell-mode-hook
               'rcirc-mode-hook
               'erc-mode-hook
               'sh-mode-hook
               'makefile-gmake-mode-hook
               'python-mode-hook
               'js-mode-hook
               'html-mode-hook
               'css-mode-hook
               'tuareg-mode-hook
               'go-mode-hook
               'qml-mode-hook
               'markdown-mode-hook
               'slime-repl-mode-hook
               'package-menu-mode-hook
               'cmake-mode-hook
               'php-mode-hook
               'web-mode-hook
               'sws-mode-hook
               'jade-mode-hook
               'vala-mode-hook
               'rust-mode-hook
               'ruby-mode-hook
               'qmake-mode-hook
               'lua-mode-hook
               'swift-mode-hook
               'llvm-mode-hook
               'conf-toml-mode-hook
               'nxml-mode-hook
               'nim-mode-hook
               'typescript-mode-hook
               'elixir-mode-hook
               'erlang-mode-hook
               'clojure-mode-hook
               ))
  (add-hook hook (lambda () (display-line-numbers-mode))))

;;----------------------------------------------------------
;; fingertip
;; (when (or (string-match "Emacs 30." (emacs-version))
;;           (string-match "Emacs 31." (emacs-version)))
;;   (require 'fingertip)
;;   (message "For Emacs 29+, load fingertip")
;;   (dolist (hook (list
;;                  'c-mode-common-hook
;;                  'c-mode-hook
;;                  'c++-mode-hook
;;                  'java-mode-hook
;;                  'haskell-mode-hook
;;                  'emacs-lisp-mode-hook
;;                  'lisp-interaction-mode-hook
;;                  'lisp-mode-hook
;;                  'maxima-mode-hook
;;                  'ielm-mode-hook
;;                  'sh-mode-hook
;;                  'makefile-gmake-mode-hook
;;                  'php-mode-hook
;;                  'python-mode-hook
;;                  'js-mode-hook
;;                  'go-mode-hook
;;                  'qml-mode-hook
;;                  'jade-mode-hook
;;                  'css-mode-hook
;;                  'ruby-mode-hook
;;                  'coffee-mode-hook
;;                  'rust-mode-hook
;;                  'qmake-mode-hook
;;                  'lua-mode-hook
;;                  'swift-mode-hook
;;                  'web-mode-hook
;;                  'markdown-mode-hook
;;                  'llvm-mode-hook
;;                  'conf-toml-mode-hook
;;                  'nim-mode-hook
;;                  'typescript-mode-hook

;;                  'c-ts-mode-hook
;;                  'c++-ts-mode-hook
;;                  'cmake-ts-mode-hook
;;                  'toml-ts-mode-hook
;;                  'css-ts-mode-hook
;;                  'js-ts-mode-hook
;;                  'json-ts-mode-hook
;;                  'python-ts-mode-hook
;;                  'bash-ts-mode-hook
;;                  'typescript-ts-mode-hook
;;                  ))
;;     (add-hook hook #'(lambda () (fingertip-mode 1))))
;;   )


;;----------------------------------------------------------
;; lsp-bridge
;;; Require
(require 'lsp-bridge)
(require 'lsp-bridge-jdtls)

;;; Code:

(setq lsp-bridge-enable-completion-in-minibuffer t)
(setq lsp-bridge-signature-show-function 'lsp-bridge-signature-show-with-frame)
(setq acm-enable-quick-access t)
(setq acm-backend-yas-match-by-trigger-keyword t)
(setq acm-enable-tabnine nil)
(setq acm-enable-codeium t)

(global-lsp-bridge-mode)

;; 打开日志，开发者才需要
;; (setq lsp-bridge-enable-log t)

;; 融合 `lsp-bridge' `find-function' 以及 `dumb-jump' 的智能跳转
(defun lsp-bridge-jump ()
  (interactive)
  (cond
   ((eq major-mode 'emacs-lisp-mode)
    (let ((symb (function-called-at-point)))
      (when symb
        (find-function symb))))
   (lsp-bridge-mode
    (lsp-bridge-find-def))
   (t
    (require 'dumb-jump)
    (dumb-jump-go))))

(defun lsp-bridge-jump-back ()
  (interactive)
  (cond
   (lsp-bridge-mode
    (lsp-bridge-find-def-return))
   (t
    (require 'dumb-jump)
    (dumb-jump-back))))

(setq lsp-bridge-get-multi-lang-server-by-project
      (lambda (project-path filepath)
        ;; If typescript file include deno.land url, then use Deno LSP server.
        (save-excursion
          (when (string-equal (file-name-extension filepath) "ts")
            (dolist (buf (buffer-list))
              (when (string-equal (buffer-file-name buf) filepath)
                (with-current-buffer buf
                  (goto-char (point-min))
                  (when (search-forward-regexp (regexp-quote "from \"https://deno.land") nil t)
                    (return "deno")))))))))

;; Support jump to define of EAF root from EAF application directory.
;; (setq lsp-bridge-get-project-path-by-filepath
;;       (lambda (filepath)
;;         (when (string-prefix-p (expand-file-name "~/lazycat-emacs/site-lisp/extensions/emacs-application-framework/app") filepath)
;;           (expand-file-name "~/lazycat-emacs/site-lisp/extensions/emacs-application-framework/"))))

;; Refer: https://emacs-china.org/t/lsp-bridge/20786/3221
(setq lsp-bridge-get-project-path-by-filepath
      (lambda (filepath)
        (save-match-data
          (and (string-match "/Users/zxh/githubs/gld/\\([^/]*\\)" filepath)
               (match-string 0 filepath)))))

#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp :tangle yes

  (require 'lazycat-theme)
  ;; (setq-default mode-line-format (remove 'mode-line-buffer-identification mode-line-format))
  (lazycat-theme-load-dark)
  ;; ;(lazycat-theme-load-with-sunrise)

  (add-to-list 'custom-theme-load-path "~/.emacs.d/vendor/everforest-theme")
  ;(load-theme 'everforest-hard-dark t)

  (require 'awesome-tray)
  (setq awesome-tray-active-modules '("location" "belong" "file-path" "mode-name" "last-command" "battery" "date"))
  (awesome-tray-mode 1)

#+END_SRC

* Eaf

#+BEGIN_SRC emacs-lisp :tangle yes

  (require 'eaf)
  (require 'eaf-image-viewer)
  (require 'eaf-pdf-viewer)
  (require 'eaf-browser)
  (require 'eaf-file-manager)
  (require 'eaf-mindmap)
  (require 'eaf-markmap)
  (require 'eaf-org-previewer)
  (require 'eaf-git)

  ;; Code: 
  ;; You need configuration your own local proxy program first.
  (setq eaf-proxy-type "socks5")
  (setq eaf-proxy-host "127.0.0.1")
  (setq eaf-proxy-port "1080")

  ;; Make `eaf-browser-restore-buffers' restore last close browser buffers.
  (setq eaf-browser-continue-where-left-off t)

  (eaf-bind-key undo_action "C-/" eaf-browser-keybinding)
  (eaf-bind-key redo_action "C-?" eaf-browser-keybinding)
  (eaf-bind-key scroll_up "M-j" eaf-browser-keybinding)
  (eaf-bind-key scroll_down "M-k" eaf-browser-keybinding)
  (eaf-bind-key scroll_up_page "M-n" eaf-browser-keybinding)
  (eaf-bind-key scroll_down_page "M-p" eaf-browser-keybinding)
  (eaf-bind-key open_link "M-h" eaf-browser-keybinding)
  (eaf-bind-key open_link_new_buffer "M-H" eaf-browser-keybinding)
  (eaf-bind-key insert_or_open_link_new_buffer "D" eaf-browser-keybinding)
  (eaf-bind-key insert_or_open_link_background_buffer "F" eaf-browser-keybinding)
  (eaf-bind-key watch-other-window-up-line "M-<" eaf-browser-keybinding)
  (eaf-bind-key watch-other-window-down-line "M->" eaf-browser-keybinding)
  (eaf-bind-key emacs-session-save "<f5>" eaf-browser-keybinding)
  (eaf-bind-key refresh_page "M-r" eaf-browser-keybinding)

  (defun eaf-goto-left-tab ()
    (interactive)
    (sort-tab-select-prev-tab))

  (defun eaf-goto-right-tab ()
    (interactive)
    (sort-tab-select-next-tab))

  (setq eaf-goto-right-after-close-buffer t)

  (one-key-create-menu
   "GIT"
   '(
     (("s" . "Git status") . eaf-open-git)
     (("u" . "Git push to remote") . eaf-git-push)
     (("i" . "Git pull") . eaf-git-pull)
     (("c" . "Git clone") . eaf-git-clone)
     (("h" . "Git history") . eaf-git-show-history)
     )
   t)

  (one-key-create-menu
   "DIRECTORY"
   '(
     (("h" . "Home") . (lambda () (interactive) (eaf-open-in-file-manager "~/")))
     (("d" . "Documents") . (lambda () (interactive) (eaf-open-in-file-manager "~/Documents")))
     (("l" . "Downloads") . (lambda () (interactive) (eaf-open-in-file-manager "~/Downloads")))
     (("p" . "Picture") . (lambda () (interactive) (eaf-open-in-file-manager "~/Pictures")))
     (("m" . "Music") . (lambda () (interactive) (eaf-open-in-file-manager "~/Music")))
     (("c" . "Config") . (lambda () (interactive) (eaf-open-in-file-manager zxh-emacs-root-dir)))
     (("n" . "NRSL") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/nrsl")))
     (("z" . "ZGRH") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/zgrh")))
     (("j" . "JTCX") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/jt")))
     (("s" . "SD") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/sd")))
     (("g" . "GLD") . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/gld")))
     )
   t)

  ;;; Require
  (require 'mind-wave)
  
  ;;; Code:
  (setq mind-wave-chat-model "gpt-4")
  (setq mind-wave-async-text-model "gpt-4")
  (setq mind-wave-action-code-model "gpt-4")
  (setq mind-wave-explain-word-model "gpt-4")
  
  (one-key-create-menu
   "MIND-WAVE"
   '(
     (("t" . "Translate to english") . mind-wave-translate-to-english)
     (("T" . "Explain word") . mind-wave-explain-word)
     (("d" . "Proofreading doc") . mind-wave-proofreading-doc)
     (("f" . "Fix typos") . mind-wave-check-typos)
     (("r" . "Refactory code") . mind-wave-refactory-code)
     (("R" . "Refactory code with input") . mind-wave-refactory-code-with-input)
     (("c" . "Comment code") . mind-wave-comment-code)
     (("e" . "Explain code") . mind-wave-explain-code)
     (("E" . "Explain point") . mind-wave-explain-point)
     (("a" . "Adjust text") . mind-wave-adjust-text)
     (("g" . "Generate code") . mind-wave-generate-code)
     (("G" . "Generate patch name") . mind-wave-generate-commit-name)
     (("v" . "Summary video") . mind-wave-summary-video)
     (("w" . "Summary video") . mind-wave-summary-web)
     (("x" . "Restore window configuration") . mind-wave-restore-window-configuration)
     )
   t)

(add-hook 'eaf-git-commit-and-push-hook #'mind-wave-generate-commit-name)


#+END_SRC

* Treesit
#+BEGIN_SRC emacs-lisp :tangle no

;;; Require
(require 'treesit)

;;; Code:

;; M-x `treesit-install-language-grammar` to install language grammar.
(setq treesit-language-source-alist
      '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
        (c . ("https://github.com/tree-sitter/tree-sitter-c"))
        (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
        (css . ("https://github.com/tree-sitter/tree-sitter-css"))
        (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
        (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
        (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
        (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
        (go . ("https://github.com/tree-sitter/tree-sitter-go"))
        (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
        (html . ("https://github.com/tree-sitter/tree-sitter-html"))
        (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
        (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
        (json . ("https://github.com/tree-sitter/tree-sitter-json"))
        (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
        (make . ("https://github.com/alemuller/tree-sitter-make"))
        (markdown . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
        (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
        (org . ("https://github.com/milisims/tree-sitter-org"))
        (python . ("https://github.com/tree-sitter/tree-sitter-python"))
        (php . ("https://github.com/tree-sitter/tree-sitter-php"))
        (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
        (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
        (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
        (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
        (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
        (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
        (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
        (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
        (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))

(setq major-mode-remap-alist
      '((c-mode          . c-ts-mode)
        (c++-mode        . c++-ts-mode)
        (cmake-mode      . cmake-ts-mode)
        (conf-toml-mode  . toml-ts-mode)
        (css-mode        . css-ts-mode)
        (js-mode         . js-ts-mode)
        (js-json-mode    . json-ts-mode)
        (python-mode     . python-ts-mode)
        (sh-mode         . bash-ts-mode)
        (typescript-mode . typescript-ts-mode)
        (rust-mode       . rust-ts-mode)
        ))

(add-hook 'markdown-mode-hook #'(lambda () (treesit-parser-create 'markdown)))

(add-hook 'web-mode-hook #'(lambda ()
                             (let ((file-name (buffer-file-name)))
                               (when file-name
                                 (treesit-parser-create
                                  (pcase (file-name-extension file-name)
                                    ("vue" 'vue)
                                    ("html" 'html))))
                               )))

(add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
(add-hook 'ielm-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
(add-hook 'json-mode-hook #'(lambda () (treesit-parser-create 'json)))
(add-hook 'go-mode-hook #'(lambda () (treesit-parser-create 'go)))


#+END_SRC

* Key-Bindings

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; ------------------------------------------------------------------------------------------------
  ;;           X-mode KeyBindings   C-h b/k 找到快捷键: M: comand, S: option, C: Control
  ;; ------------------------------------------------------------------------------------------------
  (define-key dired-mode-map     (kbd "e")   'wdired-change-to-wdired-mode)

  ;; 使用 lsp-bridge 关闭其他补全插件， lsp-bridge 提供从补全后端、 补全前端到多后端融合的全套解决方案。
  ;;-----------------------
  ;;company-active-map
  ;; (define-key company-active-map (kbd "TAB") 'company-complete-selection)
  ;; (define-key company-active-map (kbd "M-h") 'company-complete-selection)
  ;; (define-key company-active-map (kbd "M-H") 'company-complete-common)
  ;; (define-key company-active-map (kbd "M-w") 'company-show-location)
  ;; (define-key company-active-map (kbd "M-s") 'company-search-candidates)
  ;; (define-key company-active-map (kbd "M-S") 'company-filter-candidates)
  ;; (define-key company-active-map (kbd "M-n") 'company-select-next)
  ;; (define-key company-active-map (kbd "M-p") 'company-select-previous)
  ;; (define-key company-active-map (kbd "M-i") 'yas-expand)

  (set-control-w-shortcuts)

  ;;-----------------------
  ;; org-mode-map
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-h") nil)
    (define-key org-mode-map (kbd "C-,") nil))


  ;; ------------------------------------------------------------------------------------------------
  ;;                 Global KeyBindings:  C-h b/k 找到快捷键bind -> ReMap it
  ;; ------------------------------------------------------------------------------------------------
  ;; --- 卸载按键, 全局按键的卸载
  (lazy-load-unset-keys  
   '("C-x C-f" "C-q" "s-T" "s-W" "s-z" "M-h" "s-c" "s-x" "s-v" "C-6" "M-." "M-," "M-]"))
  ;; '("C-x C-f" "C-z" "C-q" "s-T" "s-W" "s-z" "M-h" "C-x C-c" "C-\\" "s-c" "s-x" "s-v" "C-6" "M-." "M-,"))

  (global-set-key (kbd "<f5>")    'emacs-session-save) ;退出emacs
  (global-set-key (kbd "C-,")     'goto-last-change)
  (global-set-key (kbd "C-4")     'insert-changelog-date)
  (global-set-key (kbd "C-5")     'insert-standard-date)

  (defun bjm/kill-this-buffer ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k")   'bjm/kill-this-buffer)
  ;;(global-set-key (kbd "C-x k")   'kill-this-buffer)

  (global-set-key (kbd "C-c p f") 'projectile-find-file)
  (global-set-key (kbd "C-c p b") 'projectile-switch-to-buffer)
  (global-set-key (kbd "C-c p p") 'projectile-switch-project)

  (global-set-key (kbd "M-7")     'sort-tab-select-prev-tab)
  (global-set-key (kbd "M-8 ")    'sort-tab-select-next-tab)
  (global-set-key (kbd "M-s-7")   'sort-tab-select-first-tab)
  (global-set-key (kbd "M-s-8")   'sort-tab-select-last-tab)
  (global-set-key (kbd "C-;")     'sort-tab-close-current-tab)
  (global-set-key (kbd "s-q")     'sort-tab-close-mode-tabs)
  (global-set-key (kbd "s-Q")     'sort-tab-close-all-tabs)

  (global-set-key (kbd "C-x C-f") 'ido-find-file)
  (global-set-key (kbd "C-x b")   'ido-switch-buffer)
  (global-set-key (kbd "C-x i")   'ido-insert-buffer)
  (global-set-key (kbd "C-x I")   'ido-insert-file)

  (global-set-key (kbd "M-n")     'hold-line-scroll-down)
  (global-set-key (kbd "M-p")     'hold-line-scroll-up)
  (global-set-key (kbd "M-]")     'watch-other-window-up)
  (global-set-key (kbd "M-[")     'watch-other-window-down)
  (global-set-key (kbd "M->")     'watch-other-window-up-line)
  (global-set-key (kbd "M-<")     'watch-other-window-down-line)

  (global-set-key (kbd "C-x y")   'dash-at-point)

  (global-set-key (kbd "C-c SPC") 'avy-goto-char-2)
  (global-set-key (kbd "M-g f")   'avy-goto-line)
  (global-set-key (kbd "M-g w")   'avy-goto-word-1)

  (global-set-key (kbd "C-M-s")   'color-rg-search-input)
  (global-set-key (kbd "C-M-;")   'magit-status)
  (global-set-key (kbd "C-x G")   'git-messenger:popup-message)

  ;; 语法跳转
  (global-set-key (kbd "C-]")     'lsp-bridge-jump)
  (global-set-key (kbd "C-t")     'lsp-bridge-jump-back)
  (global-set-key (kbd "M-]")     'lsp-bridge-find-impl) 
  (global-set-key (kbd "M-.")     'lsp-bridge-find-references) 
  (global-set-key (kbd "M-,")     'lsp-bridge-code-action) 

  (global-set-key (kbd "C-7")     'lsp-bridge-jump-back)
  (global-set-key (kbd "C-8")     'lsp-bridge-jump)
  (global-set-key (kbd "C-9")     'lsp-bridge-popup-documentation)
  (global-set-key (kbd "C-0")     'lsp-bridge-rename) 
  (global-set-key (kbd "M-s-k")   'lsp-bridge-diagnostic-jump-prev)            ;显示上一个错误 
  (global-set-key (kbd "M-s-l")   'lsp-bridge-diagnostic-ignore)               ;忽略当前的错误
  (global-set-key (kbd "M-s-n")   'lsp-bridge-popup-documentation-scroll-up)   ;向下滚动文档
  (global-set-key (kbd "M-s-p")   'lsp-bridge-popup-documentation-scroll-down) ;向上滚动文档

  ;; macro for marked objects
  (global-set-key (kbd "s-/") 'markmacro-mark-words)
  (global-set-key (kbd "s-?") 'markmacro-mark-lines)
  (global-set-key (kbd "s-:") 'markmacro-mark-chars)
  (global-set-key (kbd "s-L") 'markmacro-mark-imenus)
  (global-set-key (kbd "s-<") 'markmacro-apply-all)
  (global-set-key (kbd "s->") 'markmacro-apply-all-except-first)
  (global-set-key (kbd "s-M") 'markmacro-rect-set)
  (global-set-key (kbd "s-D") 'markmacro-rect-delete)
  (global-set-key (kbd "s-F") 'markmacro-rect-replace)
  (global-set-key (kbd "s-I") 'markmacro-rect-insert)
  (global-set-key (kbd "s-C") 'markmacro-rect-mark-columns)
  (global-set-key (kbd "s-S") 'markmacro-rect-mark-symbols)

  ;; one-key-menu
  (global-set-key (kbd "C-c g") 'one-key-menu-git)
  (global-set-key (kbd "C-c d") 'one-key-menu-directory)


  ;; ------------------------------------------------------
  ;; fingertip-mode
  ;; (when (or (string-match "Emacs 30." (emacs-version))
  ;;           (string-match "Emacs 31." (emacs-version)))
  ;;   ;; ### Fingertip ###
  ;;   ;; --- 结构化编程
  ;;   (lazy-load-unset-keys
  ;;    '("M-J" "M-r" "M-s" "M-;" "C-M-f" "C-M-b" "M-)")
  ;;    fingertip-mode-map)             ;卸载按键
  ;;   (defvar fingertip-key-alist nil)
  ;;   (setq fingertip-key-alist
  ;;         '(
  ;;           ;; 移动
  ;;           ("M-n" . fingertip-jump-left)
  ;;           ("M-p" . fingertip-jump-right)
  ;;           ;; 符号插入
  ;;           ("%" . fingertip-match-paren)       ;括号跳转
  ;;           ("(" . fingertip-open-round)        ;智能 (
  ;;           ("[" . fingertip-open-bracket)      ;智能 [
  ;;           ("{" . fingertip-open-curly)        ;智能 {
  ;;           (")" . fingertip-close-round)       ;智能 )
  ;;           ("]" . fingertip-close-bracket)     ;智能 ]
  ;;           ("}" . fingertip-close-curly)       ;智能 }
  ;;           ("\"" . fingertip-double-quote)     ;智能 "
  ;;           ("'" . fingertip-single-quote)      ;智能 '
  ;;           ("=" . fingertip-equal)             ;智能 =
  ;;           ("SPC" . fingertip-space)           ;智能 space
  ;;           ("RET" . fingertip-newline)         ;智能 newline
  ;;           ;; 删除
  ;;           ("M-o" . fingertip-backward-delete) ;向后删除
  ;;           ("C-d" . fingertip-forward-delete)  ;向前删除
  ;;           ("C-k" . fingertip-kill)            ;向前kill
  ;;           ;; 包围
  ;;           ("M-\"" . fingertip-wrap-double-quote) ;用 " " 包围对象, 或跳出字符串
  ;;           ("M-'" . fingertip-wrap-single-quote) ;用 ' ' 包围对象, 或跳出字符串
  ;;           ("M-[" . fingertip-wrap-bracket)      ;用 [ ] 包围对象
  ;;           ("M-{" . fingertip-wrap-curly)        ;用 { } 包围对象
  ;;           ("M-(" . fingertip-wrap-round)        ;用 ( ) 包围对象
  ;;           ("M-)" . fingertip-unwrap)            ;去掉包围对象
  ;;           ;; 跳出并换行缩进
  ;;           ("M-:" . fingertip-jump-out-pair-and-newline) ;跳出括号并换行
  ;;           ;; 向父节点跳动
  ;;           ("C-j" . fingertip-jump-up)
  ;;           ))
  ;;   (lazy-load-set-keys fingertip-key-alist fingertip-mode-map)
  ;;   )

#+END_SRC
