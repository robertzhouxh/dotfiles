:PROPERTIES: header-args:emacs-lisp :tangle
:END:
#+title: 我的 Emacs 配置
#+auto_tangle: t

* Custom Vars and Const

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq user-full-name "zxh")
  (setq user-mail-address "robertzhouxh@gmail.com")
  (setq erlang-path-prefix (file-truename "~/.asdf/installs/erlang/24.3.4"))
  (setq erlang-lib-tools-version "3.5.2")
  (defvar zxh-emacs-root-dir (file-truename "~/.emacs.d"))
  (defvar zxh-emacs-vendor-dir (concat zxh-emacs-root-dir "/vendor"))

  (defconst *sys/win32* (eq system-type 'windows-nt) "Are we running on a WinTel system?")
  (defconst *sys/linux* (eq system-type 'gnu/linux) "Are we running on a GNU/Linux system?")
  (defconst *sys/mac* (eq system-type 'darwin) "Are we running on a Mac system?")

  (defconst python-p
    (or (executable-find "python3")
        (and (executable-find "python")
             (> (length (shell-command-to-string "python --version | grep 'Python 3'")) 0)))
    "Do we have python3?")

  (defconst pip-p
    (or (executable-find "pip3")
        (and (executable-find "pip")
             (> (length (shell-command-to-string "pip --version | grep 'python 3'")) 0)))
    "Do we have pip3?")

  (defconst clangd-p
    (or (executable-find "clangd")  ;; usually
        (executable-find "/usr/local/opt/llvm/bin/clangd"))  ;; macOS
    "Do we have clangd?")


  (when *sys/linux*
    (setq plantuml-path "/opt/plantuml/plantuml.jar")
    (defvar zxh-emacs-module-header-root "/usr/local/include")
    (defvar zxh-emacs-rime-user-data-dir (concat (getenv "HOME") "/.config/fcitx/rime/")))

  (when *sys/mac*
    (setq plantuml-path "/opt/homebrew/Cellar/plantuml/1.2024.3/libexec/plantuml.jar")
    (defvar zxh-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/")
    (defvar zxh-emacs-rime-user-data-dir (concat (getenv "HOME") "/Library/Rime")))

  (setenv "EMACS_MODULE_HEADER_ROOT" zxh-emacs-module-header-root)

#+END_SRC

* Bootstrap use-package
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; StraightBootstrap
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-use-package-by-default t)
  (setq package-check-signature nil)

  ;; StraightUsePackage
  (straight-use-package 'use-package)

  (eval-and-compile
    (setq use-package-verbose t
          use-package-expand-minimally t
          use-package-compute-statistics t
          use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package)
    (require 'bind-key))

  (use-package diminish)

  (defun add-subdirs-to-load-path (search-dir)
    (interactive)
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; 过滤出不必要的目录，提升Emacs启动速度
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; 不是目录的文件都移除
                     (not (file-directory-p (concat dir subdir)))
                     ;; 父目录、 语言相关和版本控制目录都移除
                     (member subdir '("." ".."
                                      "dist" "node_modules" "__pycache__"
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github"))))
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升Emacs启动速度
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))

            ;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾
            ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动
            (add-to-list 'load-path subdir-path t))

          ;; 继续递归搜索子目录
          (add-subdirs-to-load-path subdir-path)))))

  (add-subdirs-to-load-path zxh-emacs-vendor-dir)

#+END_SRC

* Generic
#+begin_src emacs-lisp :tangle yes
  (tool-bar-mode -1)                              ;禁用工具栏
  (menu-bar-mode -1)                              ;禁用菜单栏
  (scroll-bar-mode -1)                            ;禁用滚动条
  (tooltip-mode -1)                               ;禁用tooltips
  (auto-compression-mode 1)                       ;打开压缩文件时自动解压缩
  (global-hl-line-mode 1)                         ;高亮当前行
  (show-paren-mode t)                             ;显示括号匹配
  (global-subword-mode 1)                         ;Word移动支持 FooBar 的格式
  (electric-pair-mode -1)                         ;关闭内置补全,使用smartparens

  (setq echo-keystrokes 0.1)                       ;加快快捷键提示的速度
  (setq kill-ring-max 1024)                        ;用一个很大的 kill ring. 这样防止我不小心删掉重要的东西
  (setq mark-ring-max 1024)                        ;设置的mark ring容量
  (setq eval-expression-print-length nil)          ;设置执行表达式的长度没有限制
  (setq eval-expression-print-level nil)           ;设置执行表达式的深度没有限制
  (setq isearch-allow-scroll t)                    ;isearch搜索时是可以滚动屏幕的
  (setq enable-recursive-minibuffers t)            ;minibuffer 递归调用命令
  (setq history-delete-duplicates t)               ;删除minibuffer的重复历史
  (setq minibuffer-message-timeout 1)              ;显示消息超时的时间
  (setq show-paren-style 'parentheses)             ;括号匹配显示但不是烦人的跳到另一个括号。
  (setq blink-matching-paren nil)                  ;当插入右括号时不显示匹配的左括号
  (setq message-log-max t)                         ;设置message记录全部消息, 而不用截去
  (setq x-stretch-cursor t)                        ;光标在 TAB 字符上会显示为一个大方块
  (setq print-escape-newlines t)                   ;显示字符窗中的换行符为 \n
  (setq tramp-default-method "ssh")                ;设置传送文件默认的方法
  (setq x-alt-keysym 'meta)                        ;Map Alt key to Meta
  (setq confirm-kill-emacs 'y-or-n-p)              ;Yes-y, No-n
  (setq confirm-kill-processes nil)                ;Automatically kill all active processes when closing Emacs
  (setq ad-redefinition-action 'accept)            ;ad-handle-definition warnings are generated when functions are redefined with `defadvice',
  (setq ring-bell-function 'ignore)                ;Do not noise
  (setq use-dialog-box nil)                        ;never pop dialog
  (setq inhibit-startup-screen t)                  ;inhibit start screen
  (setq initial-scratch-message "")                ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq default-major-mode 'text-mode)             ;设置默认地主模式为TEXT模式
  (setq mouse-yank-at-point t)                     ;粘贴于光标处,而不是鼠标指针处
  (setq x-select-enable-clipboard t)               ;支持emacs和外部程序的粘贴
  (setq frame-resize-pixelwise t)                  ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙

  (setq-default comment-style 'indent)             ;设定自动缩进的注释风格
  (setq-default require-final-newline nil)         ;不自动添加换行符到末尾, 有些情况会出现错误
  (setq-default auto-revert-mode 1)                ;自动更新buffer
  (setq-default void-text-area-pointer nil)        ;禁止显示鼠标指针
  (setq-default create-lockfiles nil)              ;Do not create lock files
  (setq-default history-length 500)                ;Set history-length longer
  (setq ediff-window-setup-function (quote ediff-setup-windows-plain)) ;比较窗口设置在同一个frame里
  (setq byte-compile-warnings
        (quote (
                ;; 显示的警告
                free-vars                 ;不在当前范围的引用变量
                unresolved                ;不知道的函数
                callargs                  ;函数调用的参数和定义的不匹配
                obsolete                  ;荒废的变量和函数
                noruntime                 ;函数没有定义在运行时期
                interactive-only          ;正常不被调用的命令
                make-local ;调用 `make-variable-buffer-local' 可能会不正确的
                mapcar     ;`mapcar' 调用
                ;;
                ;; 抑制的警告
                (not redefine)        ;重新定义的函数 (比如参数数量改变)
                (not cl-functions)    ;`CL' 包中的运行时调用的函数
                )))

  ;; Better Compilation
  (setq-default compilation-always-kill t)      ; kill compilation process before starting another
  (setq-default compilation-ask-about-save nil) ; save all buffers on `compile'
  (setq-default compilation-scroll-output t)

  ;; 滚动行为优化
  (progn
    ;; 垂直滚动
    (setq scroll-step 1
          scroll-margin 3
          scroll-conservatively 101
          scroll-up-aggressively 0.01
          scroll-down-aggressively 0.01
          mouse-wheel-scroll-amount '(1 ((shift) . 1))
          mouse-wheel-progressive-speed nil)
    ;; 水平滚动
    (setq hscroll-step 1
          hscroll-margin 1))

  ;; 进一步优化GC触发阈值
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 10 1000 1000)) ;提高到10MB，平衡性能和内存使用
              (run-with-idle-timer 2 t #'garbage-collect))) ;减少到2秒的空闲时间

  ;; 在minibuffer活动时禁用GC
  (add-hook 'minibuffer-setup-hook (lambda () (setq gc-cons-threshold most-positive-fixnum)))
  (add-hook 'minibuffer-exit-hook (lambda () (setq gc-cons-threshold (* 2 1000 1000))))

  ;; 本地编译优化
  (when (and (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (setq native-comp-async-report-warnings-errors nil
          native-comp-deferred-compilation t
          native-comp-async-jobs-number (max 1 (floor (/ (num-processors) 2)))))


  ;; 将长行处理相关的设置组合在一起
  (progn
    ;; 长行处理
    (when (fboundp 'global-so-long-mode) (global-so-long-mode))
    (setq-default bidi-display-reordering nil
                  bidi-paragraph-direction 'left-to-right)
    (setq bidi-inhibit-bpa t))


  ;; IO性能优化
  (progn
    (setq process-adaptive-read-buffering nil)
    (setq read-process-output-max (* 2 1024 1024)) ;增加到2MB以提高LSP性能
    (setq auto-window-vscroll nil)
    (setq fast-but-imprecise-scrolling nil))

  ;; **全局优化行号显示**
  (setq display-line-numbers-grow-only t) ;; 避免滚动时行号重绘卡顿
  ;; (setq display-line-numbers-type 'relative) ;; 使用相对行号（可选）

  ;; **所有编程模式启用行号**
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; **额外启用行号的模式**
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'conf-mode-hook 'display-line-numbers-mode)

  ;; **不想显示行号的模式**
  (dolist (hook '(org-mode-hook shell-mode-hook eshell-mode-hook term-mode-hook vterm-mode-hook))
    (add-hook hook (lambda () (display-line-numbers-mode -1))))
#+end_src

* Indent
#+begin_src emacs-lisp :tangle yes
  ;; 全局设置使用空格而非制表符
  ;;(setq-default indent-tabs-mode nil)    ;; 不使用制表符进行缩进
  ;;(setq-default tab-width 4)             ;; 默认 Tab 显示为 4 个空格宽度

  ;; 通用空格缩进函数
  (defun my/use-spaces-setup ()
    "设置使用空格进行缩进。"
    (setq indent-tabs-mode nil)
    (setq tab-width 4))

  ;; 为所有编程模式设置空格缩进
  (add-hook 'prog-mode-hook 'my/use-spaces-setup)

  ;; 设置 org-mode 的 tab-width 为 8
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local tab-width 8)
              (setq-local indent-tabs-mode t)))  ; 使用制表符

  ;; Go 语言缩进设置
  (add-hook 'go-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil)
              (setq tab-width 4)
              (when (boundp 'go-tab-width)
                (setq go-tab-width 4))))

  ;; Erlang 语言缩进设置
  (add-hook 'erlang-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil)
              (setq tab-width 4)
              (when (boundp 'erlang-indent-level)
                (setq erlang-indent-level 4))
              (when (boundp 'erlang-tab-always-indent)
                (setq erlang-tab-always-indent t))))

  ;; Java 语言缩进设置
  (add-hook 'java-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil)
              (setq tab-width 4)
              (setq c-basic-offset 4)
              (c-set-offset 'arglist-intro '+)
              (c-set-offset 'arglist-cont 0)
              (c-set-offset 'arglist-close 0)
              (c-set-offset 'statement-cont 0)))

  ;; Rust 语言缩进设置
  (add-hook 'rust-mode-hook
	    (lambda ()
	      (setq-local indent-tabs-mode nil
			  tab-width 4
			  rust-indent-offset 4)))

  ;; 支持 tree-sitter 模式
  (with-eval-after-load 'treesit
    (dolist (mode-hook '((go-ts-mode-hook . go-ts-mode-indent-offset)
                         (erlang-ts-mode-hook . erlang-ts-indent-offset)
                         (java-ts-mode-hook . java-ts-mode-indent-offset)
                         (rust-ts-mode-hook . rust-ts-mode-indent-offset)))
      (let ((hook (car mode-hook))
            (offset-var (cdr mode-hook)))
        (add-hook hook
                  (lambda ()
                    (setq-local  indent-tabs-mode nil)
                    (setq-local  tab-width 4))))))

#+end_src
* UTF8
#+begin_src emacs-lisp :tangle yes
  (unless *sys/win32*
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq locale-coding-system 'utf-8))
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
* Functions

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bjm/kill-this-buffer () (interactive) (kill-buffer (current-buffer)))

  ;; from lazycat emacs config
  (defun org-export-docx ()
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
          (template-file (concat (file-name-as-directory zxh-emacs-root-dir)
                                 "template.docx")))
      (message (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file))
      (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                             (buffer-file-name)
                             docx-file
                             template-file
                             ))
      (message "Convert finish: %s" docx-file)))


  (defun format-function-parameters ()
    "Turn the list of function parameters into multiline."
    (interactive)
    (beginning-of-line)
    (search-forward "(" (line-end-position))
    (newline-and-indent)
    (while (search-forward "," (line-end-position) t)
      (newline-and-indent))
    (end-of-line)
    (c-hungry-delete-forward)
    (insert " ")
    (search-backward ")")
    (newline-and-indent))

  (defun my-org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (org-display-inline-images)
    (setq filename
          (concat
           (make-temp-name
            (concat (file-name-nondirectory (buffer-file-name))
                    "assets/"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
                                          ; take screenshot
    (if (eq system-type 'darwin)
        (call-process "screencapture" nil nil nil "-i" filename))
    (if (eq system-type 'gnu/linux)
        (call-process "import" nil nil nil filename))
                                          ; insert into file if correctly taken
    (if (file-exists-p filename)
        (insert (concat "[[file:" filename "]]"))))

  (defun x/open-init-file ()
    (interactive)
    (find-file user-init-file))

  (defun x/reload-init-file ()
    "Reload init.el file."
    (interactive)
    (load user-init-file)
    (message "Reloaded init.el OK."))

  (defun dos2unix ()
    "Convert the current buffer to UNIX file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-unix nil))

  (defun unix2dos ()
    "Convert the current buffer to DOS file format."
    (interactive)
    (set-buffer-file-coding-system 'undecided-dos nil))

  (defun delete-trailing-M ()
    "Delete `^M' characters in the buffer.
                Same as `replace-string C-q C-m RET RET'."
    (interactive)
    (save-excursion
      (goto-char 0)
      (while (search-forward "\r" nil :noerror)
        (replace-match ""))))

  (defun save-buffer-as-utf8 (coding-system)
    "Revert a buffer with `CODING-SYSTEM' and save as UTF-8."
    (interactive "zCoding system for visited file (default nil):")
    (revert-buffer-with-coding-system coding-system)
    (set-buffer-file-coding-system 'utf-8)
    (save-buffer))

  (defun save-buffer-gbk-as-utf8 ()
    "Revert a buffer with GBK and save as UTF-8."
    (interactive)
    (save-buffer-as-utf8 'gbk))

  (defun switch-to-messages ()
    "Select buffer *message* in the current window."
    (interactive)
    (switch-to-buffer "*Messages*"))

  (defun switch-to-dashboard ()
    "Select buffer *message* in the current window."
    (interactive)
    (switch-to-buffer "*Dashboard*"))

  (defun hold-line-scroll-up ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-up 1)
      (line-move-to-column tmp)
      (forward-line 1)))

  (defun hold-line-scroll-down ()
    "Scroll the page with the cursor in the same line"
    (interactive)
    ;; move the cursor also
    (let ((tmp (current-column)))
      (scroll-down 1)
      (line-move-to-column tmp)
      (forward-line -1)))

  (defun +rename-current-file (newname)
    "Rename current visiting file to NEWNAME.
          If NEWNAME is a directory, move file to it."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "No file is visiting"))
       (let ((name (read-file-name "Rename to: " nil buffer-file-name 'confirm)))
         (when (equal (file-truename name)
                      (file-truename buffer-file-name))
           (user-error "Can't rename file to itself"))
         (list name))))
    ;; NEWNAME is a directory
    (when (equal newname (file-name-as-directory newname))
      (setq newname (concat newname (file-name-nondirectory buffer-file-name))))
    (rename-file buffer-file-name newname)
    (set-visited-file-name newname)
    (rename-buffer newname))

  (defun +delete-current-file (file)
    "Delete current visiting FILE."
    (interactive
     (list (or buffer-file-name
               (user-error "No file is visiting"))))
    (when (y-or-n-p (format "Really delete '%s'? " file))
      (kill-this-buffer)
      (delete-file file)))

  (defun +copy-current-file (new-path &optional overwrite-p)
    "Copy current buffer's file to `NEW-PATH'.
            If `OVERWRITE-P', overwrite the destination file without
            confirmation."
    (interactive
     (progn
       (unless buffer-file-name
         (user-error "No file is visiting"))
       (list (read-file-name "Copy file to: ")
             current-prefix-arg)))
    (let ((old-path (buffer-file-name))
          (new-path (expand-file-name new-path)))
      (make-directory (file-name-directory new-path) t)
      (copy-file old-path new-path (or overwrite-p 1))))

  (defun +copy-current-filename (file)
    "Copy the full path to the current FILE."
    (interactive
     (list (or buffer-file-name
               (user-error "No file is visiting"))))
    (kill-new file)
    (message "Copying '%s' to clipboard" file))

  (defun +copy-current-buffer-name ()
    "Copy the name of current buffer."
    (interactive)
    (kill-new (buffer-name))
    (message "Copying '%s' to clipboard" (buffer-name)))


  (defvar toggle-one-window-window-configuration nil
    "The window configuration use for `toggle-one-window'.")
  (defun toggle-one-window ()
    "Toggle between window layout and one window."
    (interactive)
    (if (equal (length (cl-remove-if #'window-dedicated-p (window-list))) 1)
        (if toggle-one-window-window-configuration
            (progn
              (set-window-configuration toggle-one-window-window-configuration)
              (setq toggle-one-window-window-configuration nil))
          (message "No other windows exist."))
      (setq toggle-one-window-window-configuration (current-window-configuration))
      (delete-other-windows)))

  ;; ResizeWidthHeight
  ;; Resizes the window width based on the input
  (defun resize-window-dimension (dimension)
    "Resize window by DIMENSION (width or height) with percentage input."
    (lambda (percent)
      (interactive (list (if (> (count-windows) 1)
                            (read-number (format "Set current window %s in [1~9]x10%%: " dimension))
                          (error "You need more than 1 window to execute this function!"))))
      (message "%s" percent)
      (let ((is-width (eq dimension 'width)))
        (window-resize nil
                      (- (truncate (* (/ percent 10.0)
                                     (if is-width (frame-width) (frame-height))))
                         (if is-width (window-total-width) (window-total-height)))
                      is-width))))

  (defalias 'resize-window-width (resize-window-dimension 'width)
    "Resizes the window width based on percentage input.")
  (defalias 'resize-window-height (resize-window-dimension 'height)
    "Resizes the window height based on percentage input.")

  (defun resize-window (width delta)
    "Resize the current window's size.  If WIDTH is non-nil, resize width by some DELTA."
    (if (> (count-windows) 1)
        (window-resize nil delta width)
      (error "You need more than 1 window to execute this function!")))

  ;; Setup shorcuts for window resize width and height
  (defun window-width-increase ()
    (interactive)
    (resize-window t 5))

  (defun window-width-decrease ()
    (interactive)
    (resize-window t -5))

  (defun window-height-increase ()
    (interactive)
    (resize-window nil 5))

  (defun window-height-decrease ()
    (interactive)
    (resize-window nil -5))

  (defun edit-configs ()
    "Opens the README.org file."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  ;; OrgIncludeAuto
  (defun save-and-update-includes ()
    "Update the line numbers of #+INCLUDE:s in current buffer.
  Only looks at INCLUDEs that have either :range-begin or :range-end.
  This function does nothing if not in `org-mode', so you can safely
  add it to `before-save-hook'."
    (interactive)
    (when (derived-mode-p 'org-mode)
      (save-excursion
        (goto-char (point-min))
        (while (search-forward-regexp
                "^\\s-*#\\+INCLUDE: *\"\\([^\"]+\\)\".*:range-\\(begin\\|end\\)"
                nil 'noerror)
          (let* ((file (expand-file-name (match-string-no-properties 1)))
                 lines begin end)
            (forward-line 0)
            (when (looking-at "^.*:range-begin *\"\\([^\"]+\\)\"")
              (setq begin (match-string-no-properties 1)))
            (when (looking-at "^.*:range-end *\"\\([^\"]+\\)\"")
              (setq end (match-string-no-properties 1)))
            (setq lines (decide-line-range file begin end))
            (when lines
              (if (looking-at ".*:lines *\"\\([-0-9]+\\)\"")
                  (replace-match lines :fixedcase :literal nil 1)
                (goto-char (line-end-position))
                (insert " :lines \"" lines "\""))))))))

  (add-hook 'before-save-hook #'save-and-update-includes)

  (defun decide-line-range (file begin end)
    "Visit FILE and decide which lines to include.
  BEGIN and END are regexps which define the line range to use."
    (let (l r)
      (save-match-data
        (with-temp-buffer
          (insert-file-contents file)
          (goto-char (point-min))
          (if (null begin)
              (setq l "")
            (search-forward-regexp begin)
            (setq l (line-number-at-pos (match-beginning 0))))
          (if (null end)
              (setq r "")
            (search-forward-regexp end)
            (setq r (1+ (line-number-at-pos (match-end 0)))))
          (format "%s-%s" (+ l 1) (- r 1)))))) ;; Exclude wrapper

  ;; BetterMiniBuffer
  (defun abort-minibuffer-using-mouse ()
    "Abort the minibuffer when using the mouse."
    (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
      (abort-recursive-edit)))

  (add-hook 'mouse-leave-buffer-hook 'abort-minibuffer-using-mouse)

  ;; keep the point out of the minibuffer
  (setq-default minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))

  ;; DisplayLineOverlay
  (defun display-line-overlay+ (pos str &optional face)
    "Display line at POS as STR with FACE.

  FACE defaults to inheriting from default and highlight."
    (let ((ol (save-excursion
                (goto-char pos)
                (make-overlay (line-beginning-position)
                              (line-end-position)))))
      (overlay-put ol 'display str)
      (overlay-put ol 'face
                   (or face '(:background null :inherit highlight)))
      ol))

  ;; ReadLines
  (defun read-lines (file-path)
    "Return a list of lines of a file at FILE-PATH."
    (with-temp-buffer (insert-file-contents file-path)
                      (split-string (buffer-string) "\n" t)))

  (defun where-am-i ()
    "An interactive function showing function `buffer-file-name' or `buffer-name'."
    (interactive)
    (message (kill-new (if (buffer-file-name) (buffer-file-name) (buffer-name)))))

  (defun watch-other-window-up ()
    "在其他窗口向上滚动一页。"
    (interactive)
    (other-window 1)
    (scroll-up-command)
    (other-window -1))

  (defun watch-other-window-down ()
    "在其他窗口向下滚动一页。"
    (interactive)
    (other-window 1)
    (scroll-down-command)
    (other-window -1))

  (defun watch-other-window-up-line ()
    "在其他窗口向上滚动一行。"
    (interactive)
    (other-window 1)
    (scroll-up-line)
    (other-window -1))

  (defun watch-other-window-down-line ()
    "在其他窗口向下滚动一行。"
    (interactive)
    (other-window 1)
    (scroll-down-line)
    (other-window -1))
#+END_SRC

* Fundamental Plugins
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package posframe         :defer t)
  (use-package protobuf-mode    :defer t)
  (use-package markdown-mode    :defer t)
  (use-package dockerfile-mode  :defer t)
  (use-package nginx-mode       :defer t)
  (use-package json-mode        :defer t)
  (use-package json-reformat    :defer t)
  (use-package comment-dwim-2   :defer t)
  (use-package sh-script        :defer t)
  (use-package lua-mode         :defer t)
  (use-package yaml-mode        :defer t)

  (use-package buffer-flip)
  (use-package restclient :config (setq restclient-inhibit-cookies t))
  (use-package autorevert :ensure nil :hook (after-init . global-auto-revert-mode))
  (use-package highlight-parentheses :init (setq hl-paren-colors '("DarkOrange" "DeepSkyBlue" "DarkRed")))
  (use-package all-the-icons :when (display-graphic-p) :commands all-the-icons-install-fonts)
  (use-package sudo-edit :commands (sudo-edit))
  (use-package discover-my-major :bind ("C-h C-m" . discover-my-major))
  (use-package exec-path-from-shell
    :config
    (setq exec-path-from-shell-variables '("PATH" "GOROOT" "GOPATH" "PYTHONPATH" "DEEPSEEK_API_KEY" "OPENROUTER_API_KEY"))
    (exec-path-from-shell-initialize))
  (use-package which-key
    :hook (after-init . which-key-mode)
    :config
    (progn
      (which-key-mode)
      (which-key-setup-side-window-right)))
#+END_SRC
* Search
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package rainbow-delimiters
      :config
      (remove-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode))

    (use-package projectile
      :ensure t  ; 确保 projectile 已安装
      :defer 1   ; 延迟 1 秒加载
      :init
      (setq projectile-mode-line-prefix " P")  ; 轻量级设置，模式行前缀
      :config
      (projectile-mode 1)  ; 启用 projectile 模式
      (setq projectile-enable-caching t)  ; 启用缓存以提高性能
      (setq projectile-completion-system 'default))  ; 使用默认的补全系统

    (use-package ivy
      :diminish
      :init
      (use-package amx :defer t)
      (use-package counsel :diminish :config (counsel-mode 1))
      (use-package swiper :defer t)
      (ivy-mode 1)
      :bind
      (("C-s" . swiper-isearch)
       ("M-y" . counsel-yank-pop)
       (:map ivy-minibuffer-map
             ("M-RET" . ivy-immediate-done))
       (:map counsel-find-file-map
             ("C-~" . counsel-goto-local-home)))
      :custom
      (ivy-use-virtual-buffers t)
      (ivy-height 10)
      (ivy-on-del-error-function nil)
      (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
      (ivy-count-format "【%d/%d】")
      (ivy-wrap t)
      :config
      (defun counsel-goto-local-home ()
        "Go to the $HOME of the local machine."
        (interactive)
        (ivy--cd "~/")))

    (use-package color-rg
      :straight (color-rg :type git :host github :repo "manateelazycat/color-rg")
      :if (executable-find "rg")
      :bind ("C-M-s" . color-rg-search-input))

    (use-package find-file-in-project
      :defer t
      :if (executable-find "find")
      :init
      (when (executable-find "fd")
        (setq ffip-use-rust-fd t)))
  #+END_SRC
* Quick Search And Move
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1)
    (setq sp-autodelete-closing-pair 'always) ; 删除左符号时删除右符号
    (with-eval-after-load 'smartparens
      (define-key smartparens-mode-map (kbd "DEL") 'sp-backward-delete-char)
      (define-key smartparens-mode-map (kbd "<backspace>") 'sp-backward-delete-char)))
  (use-package evil-smartparens
    :ensure t
    :after (evil smartparens)
    :hook (smartparens-mode . evil-smartparens-mode))

  (use-package avy)
  (use-package vundo
    :defer t
    :commands (vundo)
    :config
    ;; Take less on-screen space.
    (setq vundo-compact-display t)
    (custom-set-faces
     '(vundo-node ((t (:foreground "#808080"))))
     '(vundo-stem ((t (:foreground "#808080"))))
     '(vundo-highlight ((t (:foreground "#FFFF00")))))
    ;; Use `HJKL` VIM-like motion
    (define-key vundo-mode-map (kbd "l") #'vundo-forward)
    (define-key vundo-mode-map (kbd "h") #'vundo-backward)
    (define-key vundo-mode-map (kbd "j") #'vundo-next)
    (define-key vundo-mode-map (kbd "k") #'vundo-previous)
    (define-key vundo-mode-map (kbd "a") #'vundo-stem-root)
    (define-key vundo-mode-map (kbd "e") #'vundo-stem-end)
    (define-key vundo-mode-map (kbd "q") #'vundo-quit)
    (define-key vundo-mode-map (kbd "C-g") #'vundo-quit)
    (define-key vundo-mode-map (kbd "RET") #'vundo-confirm))

#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package diff-hl
    :ensure t
    :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
           (magit-pre-refresh  . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :init
    (global-diff-hl-mode t)
    :config
    ;; When Emacs runs in terminal, show the indicators in margin instead.
    (unless (display-graphic-p)
      (diff-hl-margin-mode)))

                ;;;; 自动 revert buffer，确保 modeline 上的分支名正确，但是 CPU Profile 显示 比较影响性能，故暂不开启。
                ;;;; (setq auto-revert-check-vc-info t)
  (use-package magit
    :bind (("C-x g" . magit-status))
    :custom
    ;; 在当前窗口显示 `magit-status`，commit diff（magit-diff & magit-revision）在右侧半屏
    (magit-diff-long-lines-threshold nil)
    (magit-show-long-lines-warning nil)
    (magit-display-buffer-function #'my-magit-display-buffer)
    :config
    (defun my-magit-display-buffer (buffer)
      "自定义 Magit buffer 显示策略：
  - `magit-status` 和 `magit-log` 在当前窗口打开；
  - `magit-diff` 和 `magit-revision` 在右侧半屏打开。"
      (let ((mode (buffer-local-value 'major-mode buffer)))
        (if (memq mode '(magit-diff-mode magit-revision-mode))
            (display-buffer
             buffer
             '((display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.5)))  ;; 右侧窗口宽度为当前窗口的 50%
          (display-buffer
           buffer
           '((display-buffer-same-window))))))
    ;; 绑定 M-RET 让 Diff 直接在其他窗口打开
    (with-eval-after-load 'magit
      (define-key magit-status-mode-map (kbd "M-RET") #'magit-diff-visit-file-other-window)))

#+END_SRC
* Evil-Mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun x/config-evil-leader ()
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      ","  'avy-goto-line
      "."  'avy-goto-char-2
      ":"  'eval-expression

      "ai" 'aider-transient-menu
      "ao" 'aidermacs-transient-menu
      "aa" 'align-regexp

      ;; buffer & bookmark
      "bb" 'switch-to-buffer
      "bo" 'switch-to-buffer-other-window
      "bn" '+copy-current-buffer-name
      "bv" 'revert-buffer
      "bz" 'bury-buffer         ;隐藏当前buffer
      "bZ" 'unbury-buffer         ;反隐藏当前buffer

      "bK" 'kill-other-window-buffer ;;;关闭其他窗口的buffer

      ;; code
      "cc" 'comment-dwim
      "cd" 'delete-trailing-whitespace
      "cl" 'toggle-truncate-lines
      "cm" 'delete-trailing-M
      "cf" 'format-function-parameters        ;; 参数列转行

      ;; dired
      "d" '(lambda () (interactive) (eaf-open-in-file-manager (file-name-directory (buffer-file-name))))

      ;; external Apps
      "es" 'my-org-screenshot
      "eo" 'org-export-docx

      ;; file
      "fh" '(lambda () (interactive) (eaf-open-in-file-manager "~/"))
      "fe" '(lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory)))
      "fi" '(lambda () (interactive) (load-file (expand-file-name "init.el" user-emacs-directory)))
      "ff" 'find-file
      "fO" 'find-file-other-frame
      "fo" 'find-file-other-window
      "fd" '+delete-current-file
      "fn" '+copy-current-filename
      "fr" '+rename-current-file
      "fR" 'recentf-open-files

      ;; magit
      "gs" 'magit-status
      "gb" 'magit-branch-checkout
      "gp" 'magit-pull
      "gt" 'magit-blame-toggle
      "gm" 'one-key-menu-git
      "go"  'eaf-open-git

      ;; magit-blame
      ;; 可以在 magit-status (C-x g) 里进入 l（log）菜单后，选择 b（blame）来查看文件的 blame 记录
      "mb" 'magit-blame           ;;默认完整模式
      "ma" 'magit-blame-addition  ;;仅显示新增的 commit 影响
      "md" 'magit-blame-delete    ;;仅显示删除的 commit 影响
      "mq" 'magit-blame-quit      ;;仅显示删除的 commit 影响
      "mj" 'discover-my-major

      ;; project
      "pf" 'ffip
      ;;"pf" 'projectile-find-file
      "pb" 'projectile-switch-to-buffer
      "pp" 'projectile-switch-project
      "pk" 'projectile-kill-buffers

      ;; search
      "sI" 'imenu
      "sr" 'counsel-rg
      "sy" 'counsel-yank-pop
      "sb" 'counsel-ibuffer
      "si" 'color-rg-search-input
      "ss" 'color-rg-search-symbol-in-project
      "sp" 'color-rg-search-project

      ;; terminal
      "tn" 'sort-tab-next
      "tp" 'sort-tab-previous
      "T"  'eaf-open-pyqterminal

      ;; window && frame
      "ww" 'other-window
      "wf" 'other-frame

      ;; fold
      "zz" 'treesit-fold-open
      "zZ" 'treesit-fold-open-recursively
      "zc" 'treesit-fold-close
      "zC" 'treesit-fold-close-all
      "za" 'treesit-fold-open-all
      "zt" 'treesit-fold-toggle
      ))

  (use-package undo-fu :straight t :ensure t)
  (use-package evil
    ;; :bind (("<escape>" . keyboard-escape-quit))
    :init
    ;; allows for using cgn
    ;; (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    (setq evil-disable-insert-state-bindings t)
    (setq evil-want-C-u-scroll t)
    (setq evil-esc-delay 0)
    :config
    (evil-mode 1))

  (use-package evil-leader
    :init
    (progn
      (global-evil-leader-mode)
      (setq evil-leader/in-all-states 1)
      (x/config-evil-leader)))

  ;; {{ specify major mode uses Evil (vim) NORMAL state or EMACS original state.
  ;; You may delete this setup to use Evil NORMAL state always.
  (dolist (p '((minibuffer-inactive-mode . emacs)
               (magit-log-edit-mode . emacs)
               (magit-status-mode . emacs)
               (magit-revision . normal)
               (color-rg-mode . emacs)
               (eaf-mode . emacs)
               (comint-mode . emacs)
               (dired-mode . normal)
               (fundamental-mode . normal)
               (grep-mode . emacs)
               (Info-mode . emacs)
               (sdcv-mode . emacs)
               (dashboard-mode . normal)
               (log-edit-mode . emacs)
               (vc-log-edit-mode . emacs)
               (help-mode . emacs)
               (xref--xref-buffer-mode . emacs)
               (compilation-mode . emacs)
               (speedbar-mode . emacs)
               (ivy-occur-mode . emacs)
               (ivy-occur-grep-mode . normal)
               (messages-buffer-mode . normal)
               ))
    (evil-set-initial-state (car p) (cdr p)))

#+END_SRC

* Org-Mode
** Org 辅助配置
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package f :ensure t)
  (use-package valign :defer t :custom (valign-fancy-bar 1) :hook ((org-mode . valign-mode)))
  (use-package org-auto-tangle :hook (org-mode . org-auto-tangle-mode) :config (setq org-auto-tangle-default t))
  (use-package toc-org :ensure t :hook (org-mode . toc-org-mode))
  (use-package plantuml-mode :defer t :custom (org-plantuml-jar-path (expand-file-name plantuml-path)))
  (use-package polymode)
  (use-package org-download
    :config
    ;; 保存路径包含 /static/ 时, ox-hugo 在导出时保留后面的目录层次。
    (setq-default org-download-image-dir "./static/images/")
    (setq org-download-method 'directory
          org-download-display-inline-images 'posframe
          ;;org-download-image-attr-list '("#+ATTR_HTML: :width 800 :align left"))
          org-download-image-attr-list '("#+ATTR_HTML: :width 800:align left"))
    (add-hook 'dired-mode-hook 'org-download-enable)
    (org-download-enable)
    (global-set-key (kbd "<f6>") #'org-download-screenshot)
    ;; 不添加 #+DOWNLOADED: 注释。
    (setq org-download-annotate-function (lambda (link) (previous-line 1) "")))
  (use-package image-slicing
    :straight (image-slicing :type git :host github :repo "ginqi7/image-slicing")
    :hook (org-mode . image-slicing-mode)
    :custom
    (image-slicing-line-height-scale 2)
    (image-slicing-max-width 800))
#+END_SRC

** Org 主配置
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :straight (:type built-in)
    :defer t
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           (:map org-mode-map (("C-c C-p" . eaf-org-export-to-pdf-and-open)
                               ("C-c ;" . nil))))
    :custom
    (org-log-done 'time)
    (calendar-latitude 43.65107) ;; Prerequisite: set it to your location, currently default: Toronto, Canada
    (calendar-longitude -79.347015) ;; Usable for M-x `sunrise-sunset' or in `org-agenda'
    (org-export-backends (quote (ascii html icalendar latex md odt)))
    (org-use-speed-commands t)
    (org-confirm-babel-evaluate 'nil)
    (org-image-align 'left)
    (org-image-actual-width '(768))
    (org-image-max-width 'fill-column)
    (org-startup-folded 'content)
    ;; (org-latex-listings-options '(("breaklines" "true")))
    ;; (org-latex-listings t)
    (org-deadline-warning-days 7)
    (org-todo-keywords
     '((sequence "TODO" "IN-PROGRESS" "REVIEW" "|" "DONE" "CANCELED")))
    (org-agenda-window-setup 'other-window)
    ;; (org-latex-pdf-process
    ;;  '("pdflatex -shelnl-escape -interaction nonstopmode -output-directory %o %f"
    ;;    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    :custom-face
    (org-agenda-current-time ((t (:foreground "spring green"))))
    :config
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (unless (version< org-version "9.2")
      (require 'org-tempo))
    (when (file-directory-p "~/org/agenda/")
      (setq org-agenda-files (list "~/org/agenda/")))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(;; other Babel languages
       (C . t)
       (python . t)
       (plantuml . t)))
    ;; (defun org-export-toggle-syntax-highlight ()
    ;;   "Setup variables to turn on syntax highlighting when calling `org-latex-export-to-pdf'."
    ;;   (interactive)
    ;;   (setq-local org-latex-listings 'minted)
    ;;   (add-to-list 'org-latex-packages-alist '("newfloat" "minted")))

    (defun org-table-insert-attr ()
      "tabularx 的特殊 align 参数 X 用来对指定列内容自动换行，表格前需要加如下属性："
      (interactive)
       (insert "#+ATTR_LATEX: :environment tabularx :booktabs t :width \linewidth :align l|X"))
    )
#+END_SRC

* Org-Latex
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; AUCTeXPac
  ;; (use-package auctex
  ;;   :defer t
  ;;   :custom
  ;;   (TeX-auto-save t)
  ;;   (TeX-parse-self t)
  ;;   (TeX-master nil)
  ;;   ;; to use pdfview with auctex
  ;;   (TeX-view-program-selection '((output-pdf "pdf-tools"))
  ;;                               TeX-source-correlate-start-server t)
  ;;   (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  ;;   (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  ;;   :hook
  ;;   (LaTeX-mode . (lambda ()
  ;;                   (turn-on-reftex)
  ;;                   (setq reftex-plug-into-AUCTeX t)
  ;;                   (reftex-isearch-minor-mode)
  ;;                   (setq TeX-PDF-mode t)
  ;;                   (setq TeX-source-correlate-method 'synctex)
  ;;                   (setq TeX-source-correlate-start-server t)))
  ;;   :config
  ;;   (when (version< emacs-version "26")
  ;;     (add-hook LaTeX-mode-hook #'display-line-numbers-mode)))
  ;; -AUCTeXPac
  (use-package auctex
    :defer t
    :custom
    (TeX-auto-save t)                        ;; 自动保存 TeX 缓存数据
    (TeX-parse-self t)                       ;; 自动解析 TeX 头部信息
    (TeX-master nil)                         ;; 默认不指定 master 文件
    (TeX-engine 'xetex)                      ;; 默认使用 XeLaTeX，可根据需要更改为 pdflatex 或 lualatex
    (TeX-source-correlate-method 'synctex)     ;; 启用 synctex 反向搜索
    (TeX-source-correlate-start-server t)      ;; 启动反向搜索服务器
    (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)  ;; 编译完成后自动刷新 PDF buffer
    :hook
    (LaTeX-mode . my-latex-setup)             ;; 自定义 LaTeX 模式初始化
    (LaTeX-mode . display-line-numbers-mode)  ;; 启用行号（仅在需要时）
    :config
    (defun my-latex-setup ()
      "为 AUCTeX 启动 RefTeX 支持。"
      (reftex-mode 1)
      (setq reftex-plug-into-AUCTeX t))

    ;; 根据可用性选择 PDF 查看器：优先使用 EAF PDF，其次 pdf-tools，再不行则使用默认查看器
    (cond
     ((require 'eaf-pdf nil 'noerror)
      (setq TeX-view-program-selection '((output-pdf "EAF PDF")))
      (add-to-list 'TeX-view-program-list '("EAF PDF" "eaf-open \"%o\"")))
     ;; ((require 'pdf-tools nil 'noerror)
     ;;  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
     ;;  (add-to-list 'TeX-view-program-list '("PDF Tools" "TeX-pdf-tools-sync-view")))
     ;; (t
     ;;  (setq TeX-view-program-selection '((output-pdf "Evince"))))
     ))

#+END_SRC

* Org-Latex-Theme
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; ;; engrave-faces 相比 minted 渲染速度更快。
  ;; (use-package engrave-faces
  ;;   :ensure t
  ;;   :after ox-latex
  ;;   :config
  ;;   (require 'engrave-faces-latex)
  ;;   (setq org-latex-src-block-backend 'engraved)
  ;;   ;; 代码块左侧添加行号。
  ;;   (add-to-list 'org-latex-engraved-options '("numbers" . "left"))
  ;;   ;; 代码块主题。
  ;;   ;;(setq org-latex-engraved-theme 'ef-light))
  ;;   )

  (require 'ox-latex)
  (with-eval-after-load 'ox-latex
    ;; latex image 的默认宽度, 可以通过 #+ATTR_LATEX :width xx 配置。
    (setq org-latex-image-default-width "0.8\\linewidth")
    ;; 使用 booktabs style 来显示表格，例如支持隔行颜色, 这样 #+ATTR_LATEX: 中不需要添加 :booktabs t。
    (setq org-latex-tables-booktabs t)
    ;; 保存 LaTeX 日志文件。
    (setq org-latex-remove-logfiles t)

    ;; ;; 目录页前后分页。
    ;; (setq org-latex-toc-command "\\clearpage \\tableofcontents \\clearpage \n")
    ;; ;; 封面页，不添加页编号。
    ;; (setq org-latex-title-command
    ;; 	"\\maketitle\n\\setcounter{page}{0}\n\\thispagestyle{empty}\n\\newpage \n")

    ;; 使用支持中文的 xelatex。
    ;;(setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
    (setq org-latex-pdf-process '
          ;;("latexmk -xelatex -quiet -shell-escape -f %f"
          ("latexmk -xelatex -shell-escape -f %f"
           "rm -fr %b.out %b.tex %b.brf %b.bbl"))
    ;;        ;;"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl"))

    (add-to-list 'org-latex-classes
                 '("ctexart"
                   "
                   \\documentclass[lang=cn,11pt,a4paper,table]{ctexart}
                      [NO-DEFAULT-PACKAGES]
                      [PACKAGES]
                      [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

* PDF
#+BEGIN_SRC emacs-lisp :tangle no

  ;; PDFToolsPac
  (use-package pdf-tools
    :straight t
    :ensure t
    :if (and (display-graphic-p) (not *sys/win32*) (not eaf-env-p))
    :mode ("\\.pdf\\'" . pdf-view-mode)  ;; 关联 PDF 文件
    :commands (pdf-loader-install)
    :custom
    (pdf-view-midnight-colors '("#ffffff" . "#000000")) ;; 夜间模式
    (TeX-view-program-selection '((output-pdf "PDF Tools"))) ;; AUCTeX 兼容
    (TeX-view-program-list '(("PDF Tools" "TeX-pdf-tools-sync-view")))
    :hook
    (pdf-view-mode . (lambda () (display-line-numbers-mode -1))) ;; 关闭行号
    :config
    (pdf-tools-install)  ;; 安装 pdf-tools
    (pdf-loader-install))  ;; 加载 pdf-tools
  ;; -PDFToolsPac
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp :tangle no

  ;; DiredPackage
  (use-package dired
    :straight (:type built-in)
    :bind
    (("C-x C-j" . dired-jump))
    :custom
    ;; Always delete and copy recursively
    (dired-listing-switches "-lah")
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file
    (auto-revert-use-notify nil)
    (auto-revert-interval 3) ; Auto revert every 3 sec
    :config
    ;; Enable global auto-revert
    (global-auto-revert-mode t)
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
                    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                    (local-set-key (kbd "RET") #'dired-find-alternate-file)
                    (local-set-key (kbd "^")
                                   (lambda () (interactive) (find-alternate-file ".."))))))
  ;; -DiredPackage

  ;; DiskUsage
  (use-package disk-usage
    :commands (disk-usage))
  ;; -DiskUsage

  ;; SaveAllBuffers
  (defun save-all-buffers ()
    "Instead of `save-buffer', save all opened buffers by calling `save-some-buffers' with ARG t."
    (interactive)
    (save-some-buffers t))

#+END_SRC

* Treesit
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package treesit-fold :straight (treesit-fol :type git :host github :repo "emacs-tree-sitter/treesit-fold") :config)

  ;; cargo install tree-sitter-cli
  ;; M-x 执行 M-x treesit-auto-install-all 来安装所有的 treesit modules。
  ;; 如果要重新安装(升级) grammer, 需要先删除 dylib 文件或 tree-sitter 目录, 重启 emacs 后再执行 M-x treesit-auto-install-all. 
  ;; (use-package treesit-auto
  ;;   :demand t
  ;;   :config
  ;;   (setq treesit-auto-install 'prompt)
  ;;   (global-treesit-auto-mode))


  ;; M-x `treesit-install-language-grammar` to install language grammar.
  (use-package treesit-auto
    :ensure t
    :config
    (setq treesit-language-source-alist
          '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
            (c . ("https://github.com/tree-sitter/tree-sitter-c"))
            (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
            (css . ("https://github.com/tree-sitter/tree-sitter-css"))
            (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
            ;;(csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
            (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
            (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
            (erlang . ("https://github.com/WhatsApp/tree-sitter-erlang"))
            (elixir "https://github.com/elixir-lang/tree-sitter-elixir" "main" "src" nil nil)
            (go . ("https://github.com/tree-sitter/tree-sitter-go"))
            (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
            (haskell "https://github.com/tree-sitter/tree-sitter-haskell" "master" "src" nil nil)
            (html . ("https://github.com/tree-sitter/tree-sitter-html"))
            (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
            (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
            (json . ("https://github.com/tree-sitter/tree-sitter-json"))
            (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
            (make . ("https://github.com/alemuller/tree-sitter-make"))
            (markdown . ("https://github.com/tree-sitter-grammars/tree-sitter-markdown" "split_parser" "tree-sitter-markdown/src"))
            (markdown-inline . ("https://github.com/tree-sitter-grammars/tree-sitter-markdown" "split_parser" "tree-sitter-markdown-inline/src"))
            ;;(ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
            (org . ("https://github.com/milisims/tree-sitter-org"))
            (python . ("https://github.com/tree-sitter/tree-sitter-python"))
            ;;(php . ("https://github.com/tree-sitter/tree-sitter-php"))
            (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
            (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
            (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
            (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
            (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
            (scala "https://github.com/tree-sitter/tree-sitter-scala" "master" "src" nil nil)
            (toml "https://github.com/tree-sitter/tree-sitter-toml" "master" "src" nil nil)
            (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
            (kotlin . ("https://github.com/fwcd/tree-sitter-kotlin"))
            (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
            (zig . ("https://github.com/GrayJack/tree-sitter-zig"))
            (clojure . ("https://github.com/sogaiu/tree-sitter-clojure"))
            ;;(nix . ("https://github.com/nix-community/nix-ts-mode"))
            (mojo . ("https://github.com/HerringtonDarkholme/tree-sitter-mojo"))))

    (setq major-mode-remap-alist
          '((c-mode          . c-ts-mode)
            (c++-mode        . c++-ts-mode)
            (cmake-mode      . cmake-ts-mode)
            (conf-toml-mode  . toml-ts-mode)
            (css-mode        . css-ts-mode)
            (js-mode         . js-ts-mode)
            (js-json-mode    . json-ts-mode)
            (python-mode     . python-ts-mode)
            (sh-mode         . bash-ts-mode)
            (typescript-mode . typescript-ts-mode)
            (rust-mode       . rust-ts-mode)
            (java-mode       . java-ts-mode)
            (clojure-mode    . clojure-ts-mode)
            (markdown-mode   . markdown-ts-mode)
            ))

    (dolist (lang (mapcar #'car treesit-language-source-alist))
      (unless (treesit-language-available-p lang)
        (treesit-install-language-grammar lang)))

    (add-hook 'web-mode-hook #'(lambda ()
                                 (let ((file-name (buffer-file-name)))
                                   (when file-name
                                     (treesit-parser-create
                                      (pcase (file-name-extension file-name)
                                        ("vue" 'vue)
                                        ("html" 'html)
                                        ("php" 'php))))
                                   )))

    (add-hook 'markdown-ts-mode-hook #'(lambda () (treesit-parser-create 'markdown)))
    (add-hook 'zig-mode-hook #'(lambda () (treesit-parser-create 'zig)))
    (add-hook 'mojo-mode-hook #'(lambda () (treesit-parser-create 'mojo)))
    (add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
    (add-hook 'ielm-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
    (add-hook 'json-mode-hook #'(lambda () (treesit-parser-create 'json)))
    (add-hook 'go-mode-hook #'(lambda () (treesit-parser-create 'go)))
    (add-hook 'java-mode-hook #'(lambda () (treesit-parser-create 'java)))
    (add-hook 'java-ts-mode-hook #'(lambda () (treesit-parser-create 'java)))
    (add-hook 'clojure-mode-hook #'(lambda () (treesit-parser-create 'clojure)))
    (add-hook 'clojure-ts-mode-hook #'(lambda () (treesit-parser-create 'clojure)))
    (add-hook 'cider-repl-mode-hook #'(lambda () (treesit-parser-create 'clojure)))
    (add-hook 'php-mode-hook #'(lambda () (treesit-parser-create 'php)))
    (add-hook 'php-ts-mode-hook #'(lambda () (treesit-parser-create 'php)))
    (add-hook 'java-ts-mode-hook #'(lambda () (treesit-parser-create 'java)))
    (add-hook 'haskell-mode-hook #'(lambda () (treesit-parser-create 'haskell)))
    (add-hook 'kotlin-mode-hook #'(lambda () (treesit-parser-create 'kotlin)))
    (add-hook 'ruby-mode-hook #'(lambda () (treesit-parser-create 'ruby)))
    )
#+END_SRC
* Programming

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; (use-package header2
  ;;   :straight (header2 :type git :host github :repo "emacsmirror/header2")
  ;;   :custom
  ;;   (header-copyright-notice (concat "Copyright (C) 2019 " (user-full-name) "\n"))
  ;;   :hook (emacs-lisp-mode . auto-make-header)
  ;;   :config
  ;;   (add-to-list 'write-file-functions 'auto-update-file-header)
  ;;   (autoload 'auto-make-header "header2")
  ;;   (autoload 'auto-update-file-header "header2"))

  (use-package ediff
    :custom
    (ediff-split-window-function #'split-window-horizontally)
    (ediff-window-setup-function #'ediff-setup-windows-plain))

  ;; golang
  (use-package go-mode)
  (defun go-run-buffer()
    (interactive)
    (shell-command (concat "go run " (buffer-name))))

  ;;  Erlang
  (let* ((tools-version erlang-lib-tools-version)
         (path-prefix erlang-path-prefix)
         (tools-path
          (concat path-prefix "/lib/tools-" tools-version "/emacs")))
    (when (file-exists-p tools-path)
      (setq load-path (cons tools-path load-path))
      (setq erlang-root-dir (concat path-prefix "/erlang"))
      (setq exec-path (cons (concat path-prefix "/bin") exec-path))
      (require 'erlang-start)
      (defvar inferior-erlang-prompt-timeout t)))

  ;; Cpp
  (use-package cc-mode
    :ensure nil
    :bind (:map c-mode-base-map
                ("C-c c" . compile))
    :hook (c-mode-common . (lambda () (c-set-style "stroustrup")))
    :config
    (use-package modern-cpp-font-lock
      :init (modern-c++-font-lock-global-mode t)))

  ;; Python
  (use-package python-mode
    :straight (:type built-in)
    :mode "\\.py\\'"
    :custom
    (flycheck-python-pycompile-executable "python3")
    (python-shell-interpreter "python3"))

  ;; Rust
  (use-package rust-mode
    :config
    (setq rust-format-on-save t)
    (defun my/rust-lsp ()
      (setq-local lsp-completion-enable nil
                  compile-command "cargo build")))

  (use-package ein
    :if (executable-find "jupyter")
    :bind
    (("C-c e" . ein:worksheet-execute-cell)
     ("C-c C-e" . ein:worksheet-execute-all-cells))
    :custom-face
    (ein:basecell-input-area-face ((t (:extend t :background "#303640"))))
    :defer t
    :custom
    (ein:worksheet-enable-undo t))

#+END_SRC

* Font
** Lazycat's Font Config

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun load-font-setup()
    (cond ((eq window-system 'pgtk)
           (set-face-attribute 'default nil :height 140 :family "WenQuanYi Micro Hei Mono"))
          (t
           (let ((emacs-font-size 14)
                 (chinese-font-name  "TsangerJinKai05")
                 english-font-name)
             (cond
              ((featurep 'cocoa)
               (setq english-font-name "Monaco"))
              ((string-equal system-type "gnu/linux")
               (setq english-font-name "WenQuanYi Micro Hei Mono")))

             ;;(set-face-attribute 'default nil :height 140 :family (eval english-font-name))
             ;;(set-face-attribute 'default nil :height 140 :family (eval chinese-font-name))

             (when (display-grayscale-p)
               (set-frame-font (format "%s-%s" (eval english-font-name) (eval emacs-font-size)))
               (set-fontset-font (frame-parameter nil 'font) 'unicode (eval english-font-name))

               (dolist (charset '(kana han symbol cjk-misc bopomofo))
                 (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family (eval chinese-font-name))))
               )))))

  (load-font-setup)

  ;; This is hacking to fix Emacs 29 will decrease font after standby.
  (add-function :after after-focus-change-function #'load-font-setup)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'maxima-mode-hook
                 'ielm-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'jade-mode-hook
                 'css-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'web-mode-hook
                 'markdown-mode-hook
                 'conf-toml-mode-hook
                 'typescript-mode-hook
                 ))
    (add-hook hook #'(lambda () (load-font-setup))))
#+END_SRC

* Rime
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package youdao-dictionary
    :commands (youdao-dictionary-search
               youdao-dictionary-search-at-point
               youdao-dictionary-search-at-point-posframe)
    :bind ("C-M-y" . youdao-dictionary-search-at-point-posframe))

  (use-package rime
    :bind
    (:map rime-active-mode-map
          ("C-;" . 'rime-inline-ascii)
          :map rime-mode-map
          ("C-`" . 'rie-send-keybinding)
          ("M-o" . 'rime--backspace)
          ("M-m" . 'rime--return)
          ("M-h" . 'rime--escape)
          ("M-j" . 'rime-force-enable))
    :custom
    (default-input-method "rime")
    (rime-posframe-style 'vertical)
    (rime-show-candidate 'posframe)
    (rime-user-data-dir zxh-emacs-rime-user-data-dir)
    (rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
    :config
    (setq rime-disable-predicates
          ;; 行首输入符号
          '(rime-predicate-punctuation-line-begin-p
            ;; 中文字符加空格之后输入符号
            rime-predicate-punctuation-after-space-cc-p
            ;; 中文字符加空格之后输入英文
            rime-predicate-space-after-cc-p
            ;; 英文使用半角符号
            rime-predicate-punctuation-after-ascii-p
            ;; 编程模式，只在注释中输入中文
            rime-predicate-prog-in-code-p))
    ;;(when (x/system-is-mac)
    (when (string-equal system-type "darwin")
      (setq rime-posframe-properties
            (list :background-color "#333333"
                  :foreground-color "#dcdccc"
                  ;; :font "PingFang SC"
                  ;; :font "TsangerJinKai05"
                  :font "TsangerJinKai05-18"
                  :internal-border-width 10)))
    ;;(when (x/system-is-linux)
    (when (string-equal system-type "gnu/linux")
      (setq rime-posframe-properties
            (list :background-color "#333333"
                  :foreground-color "#dcdccc"
                  ;; :font "WenQuanYi Micro Hei Mono-14"
                  :font "TsangerJinKai05-18"
                  :internal-border-width 10)))
    )
#+END_SRC
* Platform

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; macos
  (when *sys/mac*

    ;; s- 表示 Super，S- 表示 Shift, H- 表示 Hyper:
    ;; command 作为 Meta 键。
    (setq mac-command-modifier 'meta)

    ;; option 作为 Super 键。
    (setq mac-option-modifier 'super)

    ;; fn 作为 Hyper 键。
    (setq ns-function-modifier 'hyper)

    ;; Copy/Paste
    (defun copy-from-osx ()
      (shell-command-to-string "pbpaste"))

    (defun paste-to-osx (text &optional push)
      (let ((process-connection-type nil))
        (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
          (process-send-string proc text)
          (process-send-eof proc))))

    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx)

    ;; Move to Trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash/emacs")
    (defun system-move-file-to-trash (file)
      "Use \"trash\" to move FILE to the system trash.
            When using Homebrew, install it using \"brew install trash\"."
      (call-process (executable-find "trash")
                    nil 0 nil
                    file))

    ;; Done
    (message "Wellcome To Mac OS X, Have A Nice Day!!!"))


  ;; linux
  (when *sys/linux*
    (defun yank-to-x-clipboard ()
      (interactive)
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!"))))

#+END_SRC

* LLM
** aidermacs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package aidermacs
    :straight (:host github :repo "MatthewZMD/aidermacs" :files ("*.el"))
    :when (executable-find "aider")
    :config
    (setq aidermacs-auto-commits nil)
    ;; When Architect mode is enabled, the aidermacs-default-model setting is ignored
    (setq aidermacs-use-architect-mode t)
    (setenv "AIDER_CHAT_LANGUAGE" "Chinese")

    ;; Openrouter
    (when (getenv "OPENROUTER_API_KEY")
      ;; (setq aidermacs-default-model "openrouter/anthropic/claude-3.5-sonnet")
      (setq aidermacs-architect-model "openrouter/anthropic/claude-3.5-sonnet")
      (setq aidermacs-editor-model "openrouter/anthropic/claude-3.5-sonnet")
      (setenv "OPENROUTER_API_KEY" (getenv "OPENROUTER_API_KEY")))

    ;; DeepSeek
    (when (getenv "DEEPSEEK_API_KEY")
      (setq aidermacs-architect-model "deepseek/deepseek-reasoner")
      ;; (setq aidermacs-editor-model "deepseek/deepseek-chat")
      (setq aidermacs-editor-model "deepseek/deepseek-coder")
      (setenv "DEEPSEEK_API_KEY" (getenv "DEEPSEEK_API_KEY"))
      (setenv "AIDERMACS_API_KEY" (getenv "DEEPSEEK_API_KEY")))
    )
#+END_SRC
** aider(暂时使用 aidermacs)
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package aider
    :straight (:host github :repo "tninja/aider.el" :files ("aider.el"))
    :when (executable-find "aider")
    :config
    ;; ;; For claude-3-5-sonnet
    ;; (setq aider-args '("--model" "anthropic/claude-3-5-sonnet-20241022"))
    ;; (setenv "ANTHROPIC_API_KEY" anthropic-api-key)

    (setq aider-args '("--no-auto-commits" "--model" "deepseek/deepseek-reasoner" "--editor-model" "deepseek/deepseek-coder"))
    (when (getenv "DEEPSEEK_API_KEY")
      (setenv "DEEPSEEK_API_KEY" (getenv "DEEPSEEK_API_KEY")))
    )
#+END_SRC

* Lazycat Plugins

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lazy-load :straight (lazy-load :type git :host github :repo "manateelazycat/lazy-load"))
  (use-package one-key :straight (one-key :type git :host github :repo "manateelazycat/one-key"))
  (use-package auto-save
    :straight (auto-save :type git :host github :repo "manateelazycat/auto-save")
    :config
    (auto-save-enable)
    (setq auto-save-silent t))

  (use-package ws-butler
    :straight t
    :hook (prog-mode . ws-butler-mode)) ;; 仅在编程模式启用

  ;;----------------------------------------------------------
  ;; 使用 lsp-bridge 时， 请先关闭其他补全插件，
  ;; 比如 lsp-mode, eglot, company, corfu 等等， lsp-bridge 提供从补全后端、 补全前端到多后端融合的全套解决方案。
  ;; rustup component add rust-src
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :after yasnippet :defer t)
    :hook ((prog-mode LaTeX-mode org-mode markdown-mode) . yas-minor-mode)
    :bind
    (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
          (("TAB" . smarter-yas-expand-next-field)
           ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick)))
        (yas-expand)
        (when (and (eq old-point (point))
                   (eq old-tick (buffer-chars-modified-tick)))
          (ignore-errors (yas-next-field))))))


  ;; 然后选择你要的语言，比如 c, c++, python, rust，等待安装完成。
  ;; 你可以手动检查 tree-sitter 语法是否正确安装：
  ;; M-x treesit-inspect-node-at-point
  (use-package lsp-bridge
    :straight (lsp-bridge
               :type git
               :host github
               :repo "manateelazycat/lsp-bridge"
               :files ("*"))
    :commands (global-lsp-bridge-mode lsp-bridge-mode)
    :custom
    (acm-enable-codeium nil)
    (acm-enable-tabnine nil)
    (acm-enable-yas nil)
    (acm-enable-quick-access t)
    (acm-enable-icon t)                         ;; 显示补全图标
    (lsp-bridge-enable-inlay-hint t)            ;; 启用类型提示
    (lsp-bridge-enable-hover-diagnostic t)      ;; 悬停显示错误
    (lsp-bridge-enable-auto-format-code nil)    ;; 关闭自动格式化
    (lsp-bridge-python-command "python3")       ;; 指定 Python 解释器
    (lsp-bridge-python-lsp-server "pyright")    ;; 默认使用 Pyright
    :bind
    (("C-]" . lsp-bridge-find-def)
     ("C-t" . lsp-bridge-find-def-return)
     ("M-]" . lsp-bridge-find-impl)
     ("M-i" . lsp-bridge-popup-documentation)
     ("C-M-." . lsp-bridge-peek)
     :map lsp-bridge-ref-mode-map
     ("n" . lsp-bridge-ref-jump-next-keyword)
     ("p" . lsp-bridge-ref-jump-prev-keyword)
     ("M-n" . lsp-bridge-ref-jump-next-file)
     ("M-p" . lsp-bridge-ref-jump-prev-file)
     ("C-x C-q" . lsp-bridge-ref-switch-to-edit-mode)
     :map lsp-bridge-ref-mode-edit-map
     ("C-x C-q" . lsp-bridge-ref-apply-changed)
     ("C-x C-s" . lsp-bridge-ref-apply-changed)
     ("C-c C-k" . lsp-bridge-ref-quit)
     ("M-n" . lsp-bridge-ref-jump-next-file)
     ("M-p" . lsp-bridge-ref-jump-prev-file)
     :map acm-mode-map
     ("C-n" . acm-select-next)
     ("C-p" . acm-select-prev)
     ("TAB" . acm-complete)
     ("<tab>" . acm-complete)
     ("RET" . acm-complete))  ;; 回车键用于补全
    :hook
    (prog-mode . global-lsp-bridge-mode))  ;; 仅在编程模式下启用 lsp-bridge

  (use-package eaf
    :defer 2
    :straight (emacs-application-framework
               :type git
               :host github
               :repo "emacs-eaf/emacs-application-framework"
               :files ("*"))
    :custom
    (eaf-start-python-process-when-require t)
    (browse-url-browser-function #'eaf-open-browser)
    (eaf-browser-enable-adblocker t)
    (eaf-webengine-continue-where-left-off t)
    (eaf-webengine-default-zoom 1.25)
    (eaf-webengine-scroll-step 200)
    (eaf-pdf-show-progress-on-page nil)
    (eaf-pdf-dark-mode "ignore")
    :commands (eaf-open-browser eaf-open-pdf)
    :config
    (dolist (pkg '(eaf-file-manager
                   eaf-browser
                   eaf-pdf-viewer
                   eaf-image-viewer
                   eaf-pyqterminal
                   eaf-mind-elixir
                   eaf-markmap
                   eaf-git
                   eaf-map
                   eaf-jupyter))
      (require pkg nil t)))
      ;;(with-eval-after-load 'eaf (require pkg nil t))))

  ;; 设置 EAF PDF 为默认阅读器
  (setq browse-url-browser-function
        '((".*\\.pdf\\'" . eaf-open-pdf)
          (".*" . browse-url-default-browser)))

  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . eaf-open-pdf))

#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :config
    ;; Icon in graphic mode
    (when (display-graphic-p)
      (setq
       dashboard-set-heading-icons t
       dashboard-set-file-icons t))

    (setq
     ;;dashboard-center-content t
     dashboard-banner-logo-title " 浩哥专属 Emacs:-) "
     dashboard-startup-banner (expand-file-name "icon.png" user-emacs-directory)
     dashboard-items '((recents . 5)
                       (bookmarks . 5)
                       (agenda . 5)
                       (projects . 5)))
    (dashboard-setup-startup-hook))

  (use-package sort-tab
    :if (display-graphic-p)  ;; 仅在 GUI 模式下启用
    :straight (sort-tab :type git :host github :repo "manateelazycat/sort-tab")
    :commands (sort-tab-mode sort-tab-next sort-tab-previous) ;; 延迟加载
    :init
    ;; 延迟启用，避免阻塞启动
    (run-with-idle-timer 1 nil #'sort-tab-mode)
    :config
    ;; 其他自定义配置
    (setq sort-tab-name-max-length 20      ; 标签最大长度
          sort-tab-hide-tab-function nil   ; 不隐藏标签
          sort-tab-cycle-navigation t))    ; 启用循环导航

  (use-package holo-layer
    :if (and (display-graphic-p) (eq system-type 'darwin)) ;; Mac GUI 下启用
    :straight (holo-layer :type git :host github :repo "manateelazycat/holo-layer")
    :init
    ;; 自动检测 Python 解释器路径
    (setq holo-layer-python-command
          (or (executable-find "python3")
              (executable-find "python")
              (expand-file-name "~/.venv/venv/bin/python")))
    ;; 优化动画延迟
    (setq holo-layer-animation-delay 0.05)
    :custom
    ;; 动态启用动画特效
    (holo-layer-enable-cursor-animation (and (>= (display-pixel-width) 2560)
                                             (> (length (frame-list)) 1)))
    ;;(holo-layer-enable-place-info t)  ; 可选启用
    (holo-layer-enable-indent-rainbow t)
    (holo-layer-enable-window-border t)
    (holo-layer-enable-type-animation (>= (display-pixel-width) 2560))
    (holo-layer-type-animation-style "flame")

    :config
    ;; 延迟加载，优化启动性能
    (with-eval-after-load 'holo-layer
      (run-with-idle-timer 1 nil #'holo-layer-enable)))

  (use-package lazycat-theme
    :straight (lazycat-theme :type git :host github :repo "manateelazycat/lazycat-theme")
    :config
    (lazycat-theme-load-dark))

  (use-package awesome-tray
    :straight (awesome-tray :type git :host github :repo "manateelazycat/awesome-tray")
    :custom
    (awesome-tray-active-modules '("location" "pdf-view-page" "belong" "file-path"
                                   "mode-name" "last-command" "battery" "date"))
    (awesome-tray-info-padding-right 1)
    :init
    (awesome-tray-mode 1))

#+END_SRC
* Key-Bindings

#+BEGIN_SRC emacs-lisp :tangle yes

    ;; #######################################################################
    ;; Global KeyBindings:  C-h b/k 找到快捷键bind -> ReMap it
    ;; x-mode KeyBindings   C-h b/k 找到快捷键: M: comand, S: option, C: Control

    ;; ;;; ### Golang ###
    ;; (lazy-load-unset-keys
    ;;  '("C-k" "M-o")
    ;;  go-mode-map)
    ;; (lazy-load-set-keys
    ;;  '(
    ;;    ("C-c C-c" . go-run-buffer)
    ;;    ("C-c C-f" . gofmt)
    ;;    ("C-c C-d" . godoc)
    ;;    ("C-c C-a" . go-import-add)
    ;;  go-mode-map)

    ;; (lazy-load-unset-keys
    ;; '("C-x C-f" "C-z" "C-q" "s-T" "s-W" "s-z" "M-h" "C-x C-c" "C-\\" "s-c" "s-x" "s-v" "C-6" "M-." "M-,"))
    ;; #######################################################################
    ;; 关闭容易误操作的按键。
    ;; (let ((keys '(
    ;;               "s-w"
    ;;               "C-z"
    ;;               "<mouse-2>"
    ;;               "s-k"
    ;;               "s-,"
    ;;               "s-."
    ;;               "s--"
    ;;               "s-+"
    ;;               "C-<wheel-down>"
    ;;               "C-<wheel-up>"
    ;;               "C-M-<wheel-down>"
    ;;               "C-M-<wheel-up>"
    ;;               ;;"<down-mouse-1>"
    ;;               ;;"<drag-mouse-1>"
    ;;               )))
    ;;   (dolist (key keys)
    ;;     (global-unset-key (kbd key))))

  ;; 卸载全局快捷键
  (lazy-load-unset-keys
   '("C-x C-f" "C-q" "s-T" "s-W" "s-z" "M-h" "s-c" "s-x" "s-v" "C-6" "M-." "M-," "M-]"))

  ;; 定义窗口管理快捷键
  (defun set-control-w-shortcuts ()
    "设置以 C-w 为前缀的窗口管理快捷键。"
    (define-prefix-command 'my-window-map)
    (global-set-key (kbd "C-w") 'my-window-map)
    ;; 窗口大小调整
    (define-key my-window-map (kbd "=")  'window-width-increase)  ; 增加窗口宽度
    (define-key my-window-map (kbd "-")  'window-width-decrease)  ; 减少窗口宽度
    (define-key my-window-map (kbd "9")  'window-height-increase)  ; 增加窗口高度
    (define-key my-window-map (kbd "0")  'window-height-decrease)  ; 减少窗口高度
    ;; 窗口导航
    (define-key my-window-map (kbd "h")  'windmove-left)          ; 左移窗口
    (define-key my-window-map (kbd "j")  'windmove-down)          ; 下移窗口
    (define-key my-window-map (kbd "k")  'windmove-up)            ; 上移窗口
    (define-key my-window-map (kbd "l")  'windmove-right)         ; 右移窗口
    ;; 窗口分割与关闭
    (define-key my-window-map (kbd "v")  'split-window-right)     ; 垂直分割
    (define-key my-window-map (kbd "b")  'split-window-below)     ; 水平分割
    (define-key my-window-map (kbd "d")  'delete-window)          ; 关闭当前窗口
    (define-key my-window-map (kbd "D")  'delete-other-windows)   ; 关闭其他窗口
    (define-key my-window-map (kbd "B")  'kill-buffer-and-window) ; 关闭窗口并杀死缓冲区
    (define-key my-window-map (kbd "o")  'delete-other-windows))  ; 切换到单一窗口

  ;; 应用窗口管理快捷键
  (set-control-w-shortcuts)

  ;; 在 dired 模式中绑定快捷键
  (define-key dired-mode-map (kbd "e") 'wdired-change-to-wdired-mode)

  ;; 在 evil 模式下卸载和绑定快捷键
  (with-eval-after-load 'evil
    ;; 卸载 evil 模式的快捷键
    (dolist (map '(evil-motion-state-map
                   evil-insert-state-map
                   evil-emacs-state-map
                   evil-window-map))
      (define-key (eval map) "\C-]" nil)
      (define-key (eval map) "\C-t" nil)
      (define-key (eval map) "\C-w" nil)
      (define-key (eval map) "\M-]" nil))
    ;; 重新绑定窗口管理快捷键
    (set-control-w-shortcuts)

    ;; 定义智能 q 键行为
    (defun smart-q ()
      "在只读缓冲区中关闭窗口，否则录制宏。"
      (interactive)
      (if buffer-read-only
          (if (= 1 (count-windows))
              (bury-buffer)
            (delete-window))
        (call-interactively 'evil-record-macro)))

    ;; 绑定 smart-q 到 q 键
    (define-key evil-normal-state-map (kbd "q") 'smart-q)
    ;; 卸载其他快捷键
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (define-key evil-normal-state-map (kbd "C-t") nil)
    (define-key evil-normal-state-map (kbd "C-]") nil)
    ;; 绑定 swiper 到 / 键
    (define-key evil-normal-state-map (kbd "/")  'swiper)
    (define-key evil-motion-state-map (kbd "C-6") nil))

  ;; 在 org 模式下卸载快捷键
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-h") nil)
    (define-key org-mode-map (kbd "C-,") nil))

  ;; 全局快捷键绑定
  (global-set-key (kbd "C-x k")   'sort-tab-close-current-tab)  ; 关闭当前缓冲区
  (global-set-key (kbd "<f5>")    'emacs-session-save)          ; 保存 Emacs 会话
  (global-set-key (kbd "C-,")     'goto-last-change)            ; 跳转到最后修改的位置
  (global-set-key (kbd "C-4")     'insert-changelog-date)       ; 插入变更日志日期
  (global-set-key (kbd "C-5")     'insert-standard-date)        ; 插入标准日期

  ;; Projectile 快捷键
  (global-set-key (kbd "C-c p f") 'projectile-find-file)        ; 查找文件
  (global-set-key (kbd "C-c p b") 'projectile-switch-to-buffer) ; 切换缓冲区
  (global-set-key (kbd "C-c p p") 'projectile-switch-project)   ; 切换项目

  ;; Sort-tab 快捷键
  (global-set-key (kbd "M-j")     'sort-tab-select-prev-tab)    ; 选择上一个标签页
  (global-set-key (kbd "M-k")     'sort-tab-select-next-tab)    ; 选择下一个标签页
  (global-set-key (kbd "M-7")     'sort-tab-select-first-tab)   ; 选择第一个标签页
  (global-set-key (kbd "M-8")     'sort-tab-select-last-tab)    ; 选择最后一个标签页
  (global-set-key (kbd "M-m")     'sort-tab-close-current-tab)  ; 关闭当前标签页
  (global-set-key (kbd "s-q")     'sort-tab-close-mode-tabs)    ; 关闭当前模式的标签页
  (global-set-key (kbd "s-Q")     'sort-tab-close-all-tabs)     ; 关闭所有标签页

  ;; Ido 快捷键
  (global-set-key (kbd "C-x C-f") 'ido-find-file)               ; 查找文件
  (global-set-key (kbd "C-x b")   'ido-switch-buffer)           ; 切换缓冲区
  (global-set-key (kbd "C-x i")   'ido-insert-buffer)           ; 插入缓冲区
  (global-set-key (kbd "C-x I")   'ido-insert-file)             ; 插入文件

  ;; 滚动快捷键
  (global-set-key (kbd "M-n")     'hold-line-scroll-down)       ; 向下滚动
  (global-set-key (kbd "M-p")     'hold-line-scroll-up)         ; 向上滚动

  ;; 窗口导航快捷键
  (global-set-key (kbd "M-]")     'watch-other-window-up)       ; 向上查看其他窗口
  (global-set-key (kbd "M-[")     'watch-other-window-down)     ; 向下查看其他窗口
  (global-set-key (kbd "M->")     'watch-other-window-up-line)  ; 向上查看其他窗口（行）
  (global-set-key (kbd "M-<")     'watch-other-window-down-line); 向下查看其他窗口（行）

  ;; 搜索和 Git 快捷键
  (global-set-key (kbd "C-M-s")   'color-rg-search-input)       ; 彩色搜索
  (global-set-key (kbd "C-M-;")   'magit-status)                ; 打开 Magit 状态
  (global-set-key (kbd "C-x G")   'git-messenger:popup-message) ; 显示 Git 提交信息

  ;; LSP Bridge 快捷键
  (global-set-key (kbd "C-]")     'lsp-bridge-find-def)         ; 查找定义
  (global-set-key (kbd "C-t")     'lsp-bridge-find-def-return)  ; 返回到定义
  (global-set-key (kbd "M-]")     'lsp-bridge-find-impl)        ; 查找实现
  (global-set-key (kbd "M-.")     'lsp-bridge-find-references)  ; 查找引用
  (global-set-key (kbd "M-,")     'lsp-bridge-code-action)      ; 代码操作
  (global-set-key (kbd "C-9")     'lsp-bridge-popup-documentation) ; 弹出文档
  (global-set-key (kbd "C-0")     'lsp-bridge-rename)           ; 重命名

  ;; LSP Bridge 诊断快捷键
  (global-set-key (kbd "M-s-j")   'lsp-bridge-diagnostic-jump-next) ; 跳转到下一个错误
  (global-set-key (kbd "M-s-k")   'lsp-bridge-diagnostic-jump-prev) ; 跳转到上一个错误
  (global-set-key (kbd "M-s-l")   'lsp-bridge-diagnostic-ignore)    ; 忽略当前错误
  (global-set-key (kbd "M-s-n")   'lsp-bridge-popup-documentation-scroll-up)  ; 向下滚动文档
  (global-set-key (kbd "M-s-p")   'lsp-bridge-popup-documentation-scroll-down); 向上滚动文档

  ;; One-key 菜单
  (one-key-create-menu
   "GIT"
   '(
     (("s" . "Git status")         . eaf-open-git)
     (("u" . "Git push to remote") . eaf-git-push)
     (("i" . "Git pull")           . eaf-git-pull)
     (("c" . "Git clone")          . eaf-git-clone)
     (("h" . "Git history")        . eaf-git-show-history))
   t)

  (one-key-create-menu
   "DIRECTORY"
   '(
     (("h" . "Home")      . (lambda () (interactive) (eaf-open-in-file-manager "~/")))
     (("d" . "Documents") . (lambda () (interactive) (eaf-open-in-file-manager "~/Documents")))
     (("l" . "Downloads") . (lambda () (interactive) (eaf-open-in-file-manager "~/Downloads")))
     (("p" . "Picture")   . (lambda () (interactive) (eaf-open-in-file-manager "~/Pictures")))
     (("s" . "SD")        . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/sd")))
     (("g" . "GLD")       . (lambda () (interactive) (eaf-open-in-file-manager "~/githubs/gld"))))
   t)

  (global-set-key (kbd "C-c g")   'one-key-menu-git)            ; Git 菜单
  (global-set-key (kbd "C-c d")   'one-key-menu-directory)      ; 目录菜单

#+END_SRC
